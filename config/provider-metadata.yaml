name: ionos-cloud/ionoscloud
resources:
    application_loadbalancer_forwarding_rule:
        subCategory: Application Load Balancer
        description: Creates and manages IonosCloud Application Load Balancer Forwarding Rule.
        name: application_loadbalancer_forwarding_rule
        title: application_loadbalancer_forwarding_rule
        argumentDocs:
            application_loadbalancer_id: '- (Required)[string] The ID of Application Load Balancer.'
            client_timeout: '- (Optional)[int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).'
            condition: '- (Required)[string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.'
            conditions: '- (Optional)[list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.'
            content_type: '- (Optional)[string] Valid only for STATIC actions.'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            drop_query: '- (Optional)[bool] Default is false; valid only for REDIRECT actions.'
            http_rules: '- (Optional)[list] Array of items in that collection'
            key: '- (Optional)[string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.'
            listener_ip: '- (Required)[string] Listening (inbound) IP.'
            listener_port: '- (Required)[int] Listening (inbound) port number; valid range is 1 to 65535.'
            location: '- (Optional)[string] The location for redirecting; mandatory and valid only for REDIRECT actions.'
            name: '- (Required)[string] The name of the Application Load Balancer forwarding rule.'
            negate: '- (Optional)[bool] Specifies whether the condition is negated or not; the default is False.'
            protocol: '- (Required)[string] Balancing protocol.'
            response_message: '- (Optional)[string] The response message of the request; mandatory for STATIC action.'
            server_certificates: '- (Optional)[list] Array of certificate ids. You can create certificates with the certificate resource.'
            status_code: '- (Optional)[int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.'
            target_group: '- (Optional)[string] The UUID of the target group; mandatory for FORWARD action.'
            type: '- (Required)[string] Type of the Http Rule.'
            value: '- (Optional)[string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.'
        importStatements:
            - terraform import ionoscloud_application_loadbalancer_forwarding_rule.myAlbRule {datacenter uuid}/{applicationLoadBalancer uuid}/{applicationLoadBalancerForwardingRule uuid}
    ionoscloud_apigateway:
        subCategory: API Gateway
        description: API Gateway is an application that acts as a "front door" for backend services and APIs, handling client requests and routing them to the appropriate backend.
        name: ionoscloud_apigateway
        title: ionoscloud_apigateway
        argumentDocs:
            certificate_id: '- (Required)[string] The certificate ID for the domain.'
            custom_domains: '- (Optional)[list] Custom domains for the API Gateway, a list that contains elements with the following structure:'
            id: '- (Computed)[string] The ID of the API Gateway.'
            logs: '- (Optional)[bool] Enable or disable logging. Defaults to false. NOTE: Central Logging must be enabled through the Logging API to enable this feature.'
            metrics: '- (Optional)[bool] Enable or disable metrics. Defaults to false.'
            name: '- (Required)[string] The name of the API Gateway.'
            public_endpoint: '- (Computed)[string] The public endpoint of the API Gateway.'
        importStatements: []
    ionoscloud_apigateway_route:
        subCategory: API Gateway
        description: Creates and manages IonosCloud API Gateway Route objects.
        name: ionoscloud_apigateway_route
        title: ionoscloud_apigateway_route
        examples:
            - name: apigateway_route
              manifest: |-
                {
                  "gateway_id": "${ionoscloud_apigateway.example.id}",
                  "methods": [
                    "GET",
                    "POST"
                  ],
                  "name": "apigateway-route",
                  "paths": [
                    "/foo/*",
                    "/bar"
                  ],
                  "type": "http",
                  "upstreams": [
                    {
                      "host": "example.com",
                      "loadbalancer": "roundrobin",
                      "port": 80,
                      "scheme": "http",
                      "weight": 100
                    }
                  ],
                  "websocket": false
                }
              references:
                gateway_id: ionoscloud_apigateway.example.id
              dependencies:
                ionoscloud_apigateway.example: |-
                    {
                      "custom_domains": [
                        {
                          "certificate_id": "00000000-0000-0000-0000-000000000000",
                          "name": "example.com"
                        },
                        {
                          "certificate_id": "00000000-0000-0000-0000-000000000000",
                          "name": "example.org"
                        }
                      ],
                      "metrics": true,
                      "name": "example-gateway"
                    }
        argumentDocs:
            gateway_id: '- (Required)[string] The ID of the API Gateway that the route belongs to.'
            host: '-  (Required)[string] The host of the upstream.'
            id: '- (Computed)[string] The ID of the API Gateway Route.'
            loadbalancer: '- (Optional)[string] The load balancer algorithm. Default value: roundrobin.'
            methods: |-
                - (Required)[list] The HTTP methods that the route should match. Minimum items: 1. Possible values: GET,
                POST, PUT, DELETE, PATCH, OPTIONS, HEAD, CONNECT, TRACE.
            name: '- (Required)[string] Name of the API Gateway Route. Only alphanumeric characters are allowed.'
            paths: '- (Required)[list] The paths that the route should match. Minimum items: 1.'
            port: '-  (Optional)[int] The port of the upstream. Default value: 80.'
            scheme: '- (Optional)[string] The target URL of the upstream. Default value: http.'
            type: |-
                - (Optional)[string] This field specifies the protocol used by the ingress to route traffic to the backend
                service. Default value: http.
            upstreams: '- (Required) Upstreams information of the API Gateway Route. Minimum items: 1.'
            websocket: '- (Optional)[bool] To enable websocket support. Default value: false.'
            weight: '- (Optional)[int] Weight with which to split traffic to the upstream. Default value: 100.'
        importStatements:
            - terraform import ionoscloud_apigateway_route.myroute {apigateway uuid}:{apigateway route uuid}
    ionoscloud_application_loadbalancer:
        subCategory: Application Load Balancer
        description: Creates and manages IonosCloud Application Load Balancer.
        name: ionoscloud_application_loadbalancer
        title: application_loadbalancer
        examples:
            - name: example
              manifest: |-
                {
                  "central_logging": true,
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "ips": [
                    "10.12.118.224"
                  ],
                  "lb_private_ips": [
                    "10.13.72.225/24"
                  ],
                  "listener_lan": "${ionoscloud_lan.example_1.id}",
                  "logging_format": "%{+Q}o %{-Q}ci - - [%trg] %r %ST %B \"\" \"\" %cp %ms %ft %b %s %TR %Tw %Tc %Tr %Ta %tsc %ac %fc %bc %sc %rc %sq %bq %CC %CS %hrl %hsl",
                  "name": "ALB Example",
                  "target_lan": "${ionoscloud_lan.example_2.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                listener_lan: ionoscloud_lan.example_1.id
                target_lan: ionoscloud_lan.example_2.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "datacenter description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example_1: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_lan.example_2: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
        argumentDocs:
            action: '- (Required)[string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.'
            bucket: '- (Required)[string] Specifies the S3 IONOS bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.'
            central_logging: '- (Optional)[bool] Turn logging on and off for this product. Default value is ''false''.'
            datacenter_id: '- (Required)[string] ID of the datacenter.'
            direction: '- (Required)[string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.'
            flowlog: '- (Optional)[list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.'
            ips: '- (Optional)[set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.'
            lb_private_ips: '- (Optional)[set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.'
            listener_lan: '- (Required)[int] ID of the listening (inbound) LAN.'
            logging_lormat: '- (Optional)[string] Specifies the format of the logs.'
            name: '- (Required)[string] The name of the Application Load Balancer.'
            target_lan: '- (Required)[int] ID of the balanced private target LAN (outbound).'
        importStatements:
            - terraform import ionoscloud_application_loadbalancer.myalb {datacenter uuid}/{applicationLoadBalancer uuid}
    ionoscloud_auto_certificate:
        subCategory: Certificate Manager Service
        description: Creates and manages Certificate Manager AutoCertificate objects.
        name: ionoscloud_auto_certificate
        title: ionoscloud_auto_certificate
        examples:
            - name: example
              manifest: |-
                {
                  "common_name": "www.example.com",
                  "key_algorithm": "rsa4096",
                  "location": "${ionoscloud_auto_certificate_provider.example.location}",
                  "name": "My Auto renewed certificatemanager",
                  "provider_id": "${ionoscloud_auto_certificate_provider.example.id}",
                  "subject_alternative_names": [
                    "app.example.com"
                  ]
                }
              references:
                location: ionoscloud_auto_certificate_provider.example.location
                provider_id: ionoscloud_auto_certificate_provider.example.id
              dependencies:
                ionoscloud_auto_certificate_provider.example: |-
                    {
                      "email": "user@example.com",
                      "external_account_binding": [
                        {
                          "key_id": "some-key-id",
                          "key_secret": "secret"
                        }
                      ],
                      "location": "de/fra",
                      "name": "Let's Encrypt",
                      "server": "https://acme-v02.api.letsencrypt.org/directory"
                    }
        argumentDocs:
            common_name: '- (Required)[string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.'
            key_algorithm: '- (Required)[string] The key algorithm used to generate the certificate.'
            last_issued_certificate_id: '- (Computed)[string] The ID of the last certificate that was issued.'
            location: '- (Required)[string] The location of the auto-certificate.'
            name: '- (Optional)[string] A certificate name used for management purposes.'
            provider_id: '- (Required)[string] The certificate provider used to issue the certificates.'
            subject_alternative_names: '- (Optional)[list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.'
        importStatements:
            - terraform import ionoscloud_auto_certificate.example {location}:{auto_certificate_id}
    ionoscloud_auto_certificate_provider:
        subCategory: Certificate Manager Service
        description: Creates and manages Certificate Manager provider objects.
        name: ionoscloud_auto_certificate_provider
        title: ionoscloud_auto_certificate_provider
        examples:
            - name: example
              manifest: |-
                {
                  "email": "user@example.com",
                  "external_account_binding": [
                    {
                      "key_id": "some-key-id",
                      "key_secret": "secret"
                    }
                  ],
                  "location": "de/fra",
                  "name": "Let's Encrypt",
                  "server": "https://acme-v02.api.letsencrypt.org/directory"
                }
        argumentDocs:
            email: '- (Required)[string] The email address of the certificate requester.'
            external_account_binding: '- (Optional)[list] External account binding details.'
            key_id: '- (Required)[string] The key ID of the external account binding.'
            key_secret: '- (Required)[string] The key secret of the external account binding'
            location: '- (Required)[string] The location of the provider.'
            name: '- (Required)[string] The name of the certificate provider.'
            server: '- (Required)[string] The URL of the certificate provider.'
        importStatements:
            - terraform import ionoscloud_auto_certificate_provider.example {location}:{provider_id}
    ionoscloud_backup_unit:
        subCategory: Managed Backup
        description: Creates and manages IonosCloud Backup Units.
        name: ionoscloud_backup_unit
        title: backup_unit
        examples:
            - name: example
              manifest: |-
                {
                  "email": "example@example-domain.com",
                  "name": "Backup Unit Example",
                  "password": "${random_password.backup_unit_password.result}"
                }
              references:
                password: random_password.backup_unit_password.result
              dependencies:
                random_password.backup_unit_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            email: '- (Required)[string] The email address assigned to the backup unit'
            login: '- (Computed) The login associated with the backup unit. Derived from the contract number'
            name: '- (Required)[string] The name of the Backup Unit. This argument is immutable.'
            password: '- (Required)[string] The desired password for the Backup Unit'
        importStatements:
            - terraform import ionoscloud_backup_unit.demo {backup_unit_uuid}
    ionoscloud_cdn_distribution:
        subCategory: CDN
        description: Creates and manages IonosCloud CDN Distributions.
        name: ionoscloud_cdn_distribution
        title: cdn_distribution
        examples:
            - name: example
              manifest: |-
                {
                  "certificate_id": "${ionoscloud_certificate.cert.id}",
                  "domain": "example.com",
                  "routing_rules": [
                    {
                      "prefix": "/api",
                      "scheme": "https",
                      "upstream": [
                        {
                          "caching": true,
                          "geo_restrictions": [
                            {
                              "allow_list": [
                                "CN",
                                "RU"
                              ]
                            }
                          ],
                          "host": "server.example.com",
                          "rate_limit_class": "R500",
                          "waf": true
                        }
                      ]
                    },
                    {
                      "prefix": "/api2",
                      "scheme": "http/https",
                      "upstream": [
                        {
                          "caching": false,
                          "geo_restrictions": [
                            {
                              "block_list": [
                                "CN",
                                "RU"
                              ]
                            }
                          ],
                          "host": "server2.example.com",
                          "rate_limit_class": "R10",
                          "waf": false
                        }
                      ]
                    }
                  ]
                }
              references:
                certificate_id: ionoscloud_certificate.cert.id
              dependencies:
                ionoscloud_certificate.cert: |-
                    {
                      "certificate": "${file(\"path_to_cert\")}",
                      "certificate_chain": "${file(\"path_to_cert_chain\")}",
                      "name": "add_name_here",
                      "private_key": "${file(\"path_to_private_key\")}"
                    }
        argumentDocs:
            allow_list: '- (Optional)[string] List of allowed countries'
            block_list: '- (Optional)[string] List of blocked countries'
            caching: '- (Required)[bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.'
            certificate_id: '- (Required)[string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.'
            domain: '- (Required)[string] The domain of the distribution.'
            geo_restrictions: '- (Optional)[map] - A map of geo_restrictions'
            host: '- (Required)[string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.'
            prefix: '- (Required)[string] The prefix of the routing rule.'
            rate_limit_class: '- (Required)[string] Rate limit class that will be applied to limit the number of incoming requests per IP.'
            routing_rules: '- (Required)[list] The routing rules for the distribution.'
            scheme: '- (Required)[string] The scheme of the routing rule.'
            upstream: '- (Required)[map] - A map of properties for the rule'
            waf: '- (Required)[bool] Enable or disable WAF to protect the upstream host.'
        importStatements:
            - terraform import ionoscloud_cdn_distribution.myDistribution {distribution uuid}
    ionoscloud_certificate:
        subCategory: Certificate Manager Service
        description: Creates and manages a certificate.
        name: ionoscloud_certificate
        title: ionoscloud_certificate
        examples:
            - name: cert
              manifest: |-
                {
                  "certificate": "${file(\"path_to_cert\")}",
                  "certificate_chain": "${file(\"path_to_cert_chain\")}",
                  "name": "add_name_here",
                  "private_key": "${file(\"path_to_private_key\")}"
                }
            - name: cert
              manifest: |-
                {
                  "certificate": "-----BEGIN CERTIFICATE-----\ncert_body_here\n-----END CERTIFICATE-----\n",
                  "certificate_chain": "${file(\"path_to_cert_chain\")}",
                  "name": "add_name_here",
                  "private_key": "${file(\"path_to_private_key\")}"
                }
        argumentDocs:
            certificate: '- (Required)[string] The certificate body. Pem encoded. Immutable.'
            certificate_chain: '- (Optional)[string] The certificate chain. Pem encoded. Immutable.'
            name: '- (Required)[string] The certificate name'
            private_key: '- (Required)[string] The certificate private key. Immutable. Sensitive.'
        importStatements:
            - terraform import ionoscloud_certificate.mycert {certificatemanager uuid}
    ionoscloud_container_registry:
        subCategory: Container Registry
        description: Creates and manages IonosCloud Container Registry.
        name: ionoscloud_container_registry
        title: ionoscloud_container_registry
        examples:
            - name: example
              manifest: |-
                {
                  "api_subnet_allow_list": [
                    "1.2.3.4/32"
                  ],
                  "garbage_collection_schedule": [
                    {
                      "days": [
                        "Monday",
                        "Tuesday"
                      ],
                      "time": "05:19:00+00:00"
                    }
                  ],
                  "location": "de/fra",
                  "name": "container-registry-example"
                }
        argumentDocs:
            api_subnet_allow_list: '- (Optional)[list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. Note: If this list is empty or not set, there are no restrictions.'
            days: '- (Required)[list] Elements of list must have one of the values: Saturday, Sunday, Monday, Tuesday,  Wednesday,  Thursday,  Friday'
            features: '- (Optional)[Map]'
            garbage_collection_schedule: '- (Optional)[Map]'
            location: '- (Required)[string] Immutable, update forces re-creation of the resource.'
            name: '- The name of the container registry. Immutable, update forces re-creation of the resource.'
            time: '- (Required)[string]'
            vulnerability_scanning: '- (Optional)[bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.'
        importStatements:
            - terraform import ionoscloud_container_registry.mycr {container_registry uuid}
    ionoscloud_container_registry_token:
        subCategory: Container Registry Token
        description: Creates and manages IonosCloud Container Registry Token.
        name: ionoscloud_container_registry_token
        title: ionoscloud_container_registry_token
        examples:
            - name: example
              manifest: |-
                {
                  "expiry_date": "2023-01-13 16:27:42Z",
                  "name": "container-registry-token-example",
                  "registry_id": "${ionoscloud_container_registry.example.id}",
                  "save_password_to_file": "pass.txt",
                  "scopes": [
                    {
                      "actions": [
                        "push"
                      ],
                      "name": "Scope1",
                      "type": "repository"
                    }
                  ],
                  "status": "enabled"
                }
              references:
                registry_id: ionoscloud_container_registry.example.id
              dependencies:
                ionoscloud_container_registry.example: |-
                    {
                      "garbage_collection_schedule": [
                        {
                          "days": [
                            "Monday",
                            "Tuesday"
                          ],
                          "time": "05:19:00+00:00"
                        }
                      ],
                      "location": "de/fra",
                      "name": "container-registry-example"
                    }
        argumentDocs:
            actions: '- (Required)[string] Example: ["pull", "push", "delete"]'
            expiry-date: '- (Optional)[string] The value must be supplied as ISO 8601 timestamp'
            name: '- (Required)[string] The name of the container registry token. Immutable, update forces re-creation of the resource.'
            save_password_to_file: '- (Optional)[string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path'
            scopes: '- (Optional)[map]'
            status: '- (Optional)[string] Must have on of the values: enabled, disabled'
            type: '- (Required)[string]'
        importStatements:
            - terraform import ionoscloud_container_registry_token.mycrtoken {container_registry uuid}/{container_registry_token uuid}
    ionoscloud_cube_server:
        subCategory: Compute Engine
        description: Creates and manages IonosCloud Cube Server objects.
        name: ionoscloud_cube_server
        title: ionoscloud_cube_server
        examples:
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_2",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "ubuntu:latest",
                  "image_password": "${random_password.server_image_password.result}",
                  "name": "Server Example",
                  "nic": [
                    {
                      "dhcp": true,
                      "firewall_active": true,
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "Nic Example"
                    }
                  ],
                  "template_uuid": "${data.ionoscloud_template.example.id}",
                  "volume": [
                    {
                      "disk_type": "DAS",
                      "licence_type": "LINUX",
                      "name": "Volume Example"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_password: random_password.server_image_password.result
                nic.lan: ionoscloud_lan.example.id
                template_uuid: data.ionoscloud_template.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/txl",
                      "name": "Datacenter Example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "availability_zone": "AUTO",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "ubuntu:latest",
                  "image_password": "${random_password.server_image_password.result}",
                  "name": "Server Example",
                  "nic": [
                    {
                      "dhcp": true,
                      "dhcpv6": false,
                      "firewall_active": true,
                      "ips": [
                        "${ionoscloud_ipblock.webserver_ipblock.ips[0]}",
                        "${ionoscloud_ipblock.webserver_ipblock.ips[1]}"
                      ],
                      "ipv6_cidr_block": "${cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,5)}",
                      "ipv6_ips": [
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,5),1)}",
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,5),2)}",
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,5),3)}"
                      ],
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "Nic Example"
                    }
                  ],
                  "template_uuid": "${data.ionoscloud_template.example.id}",
                  "volume": [
                    {
                      "disk_type": "DAS",
                      "licence_type": "LINUX",
                      "name": "Volume Example"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_password: random_password.server_image_password.result
                nic.lan: ionoscloud_lan.example.id
                template_uuid: data.ionoscloud_template.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/txl",
                      "name": "Datacenter Example"
                    }
                ionoscloud_ipblock.webserver_ipblock: |-
                    {
                      "location": "de/txl",
                      "name": "webserver_ipblock",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "ipv6_cidr_block": "${cidrsubnet(ionoscloud_datacenter.example.ipv6_cidr_block,8,10)}",
                      "name": "Lan Example",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            availability_zone: '- (Optional)[string] The availability zone in which the server should exist. This property is immutable.'
            boot_cdrom: '- DEPRECATED Please refer to ionoscloud_server_boot_device_selection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.'
            boot_image: '- (Optional)[string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.'
            boot_volume: '- (Computed) The associated boot volume.'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            firewallrule_id: '- (Computed) The associated firewall rule.'
            image_name: '- (Optional)[string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.'
            image_password: '- (Optional)[string] Required if ssh_key_path is not provided.'
            licence_type: '- (Optional)[string] Sets the OS type of the server.'
            name: '- (Required)[string] The name of the server.'
            nic: '- (Required) See the Nic section.'
            primary_ip: '- (Computed) The associated IP address.'
            primary_nic: '- (Computed) The associated NIC.'
            ssh_key_path: '- (Optional)[list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.'
            template_uuid: '- (Required)[string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource'
            vm_state: '- (Optional)[string] Sets the power state of the cube server. E.g: RUNNING or SUSPENDED.'
            volume: '- (Required) See the Volume section.'
        importStatements:
            - terraform import ionoscloud_cube_server.myserver {datacenter uuid}/{server uuid}
    ionoscloud_datacenter:
        subCategory: Compute Engine
        description: Creates and manages IonosCloud Virtual Data Center.
        name: ionoscloud_datacenter
        title: datacenter
        examples:
            - name: example
              manifest: |-
                {
                  "description": "datacenter description",
                  "location": "us/las",
                  "name": "Datacenter Example",
                  "sec_auth_protection": false
                }
        argumentDocs:
            cpu_architecture: '- (Computed) Array of features and CPU families available in a location'
            cpu_family: '- A valid CPU family name'
            description: '- (Optional)[string] Description for the Virtual Data Center.'
            features: '- (Computed) List of features supported by the location this data center is part of'
            ipv6_cidr_block: '- (Computed) The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center'
            location: '- (Required)[string] The regional location where the Virtual Data Center will be created. This argument is immutable.'
            max_cores: '- The maximum number of cores available'
            max_ram: '- The maximum number of RAM in MB'
            name: '- (Required)[string] The name of the Virtual Data Center.'
            sec_auth_protection: '- (Optional) [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection'
            vendor: '- A valid CPU vendor name'
            version: '- (Computed) The version of that Data Center. Gets incremented with every change'
        importStatements:
            - terraform import ionoscloud_datacenter.mydc {datacenter uuid}
    ionoscloud_dataplatform_cluster:
        subCategory: Dataplatform
        description: Creates and manages Dataplatform Cluster objects.
        name: ionoscloud_dataplatform_cluster
        title: ionoscloud_dataplatform_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "lans": [
                    {
                      "dhcp": false,
                      "lan_id": "${ionoscloud_lan.example.id}",
                      "routes": [
                        {
                          "gateway": "192.168.42.1",
                          "network": "182.168.42.1/24"
                        }
                      ]
                    }
                  ],
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "name": "Dataplatform_Cluster_Example",
                  "version": "23.11"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                lans.lan_id: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for testing Dataplatform Cluster",
                      "location": "de/txl",
                      "name": "Datacenter_Example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "LAN_Example",
                      "public": false
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] The UUID of the virtual data center (VDC) the cluster is provisioned.'
            day_of_the_week: '- (Required)[string] Must be set with one the values Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday.'
            dhcp: '- (Optional)[bool] Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is ''true''.'
            gateway: '- (Required)[string] IPv4 or IPv6 gateway IP for the route.'
            lan_id: '- (Required)[string] The LAN ID of an existing LAN at the related data center.'
            lans: '- (Optional)[list] A list of LANs you want this node pool to be part of.'
            maintenance_window: '- (Optional)[string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format'
            name: '- (Required)[string] The name of your cluster. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.'
            network: '- (Required)[string] IPv4 or IPv6 CIDR to be routed via the interface.'
            routes: '- (Optional)[list] An array of additional LANs attached to worker nodes.'
            time: '- (Required)[string] Time at which the maintenance should start. Must conform to the ''HH:MM:SS'' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at this link.'
            version: '- (Optional)[int] The version of the Data Platform.'
        importStatements:
            - terraform import ionoscloud_dataplatform_cluster.mycluser {cluster uuid}
    ionoscloud_dataplatform_node_pool:
        subCategory: Dataplatform
        description: Creates and manages Dataplatform Node Pool objects.
        name: ionoscloud_dataplatform_node_pool
        title: ionoscloud_dataplatform_node_pool
        examples:
            - name: example
              manifest: |-
                {
                  "annotations": {
                    "ann1": "value1",
                    "ann2": "value2"
                  },
                  "availability_zone": "AUTO",
                  "cluster_id": "${ionoscloud_dataplatform_cluster.example.id}",
                  "cores_count": 1,
                  "cpu_family": "INTEL_SKYLAKE",
                  "labels": {
                    "color": "green",
                    "foo": "bar"
                  },
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Monday",
                      "time": "09:00:00"
                    }
                  ],
                  "name": "Dataplatform_Node_Pool_Example",
                  "node_count": 1,
                  "ram_size": 2048,
                  "storage_size": 10,
                  "storage_type": "HDD"
                }
              references:
                cluster_id: ionoscloud_dataplatform_cluster.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for testing Dataplatform Cluster",
                      "location": "de/txl",
                      "name": "Datacenter_Example"
                    }
                ionoscloud_dataplatform_cluster.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "maintenance_window": [
                        {
                          "day_of_the_week": "Sunday",
                          "time": "09:00:00"
                        }
                      ],
                      "name": "Dataplatform_Cluster_Example",
                      "version": "23.7"
                    }
        argumentDocs:
            annotations: '- (Optional)[map] Key-value pairs attached to node pool resource as Kubernetes annotations.'
            availability_zone: '- (Optional)[string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values AUTO, ZONE_1 or ZONE_2. The default value is AUTO.'
            cluster_id: '- (Required)[string] The UUID of an existing Dataplatform cluster.'
            cores_count: '- (Optional)[int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is 4.'
            cpu_family: '- (Optional)[string] A valid CPU family name or AUTO if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is AUTO.'
            day_of_the_week: '- (Required)[string] Must be set with one the values Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday.'
            labels: '- (Optional)[map] Key-value pairs attached to the node pool resource as Kubernetes labels.'
            maintenance_window: '- (Optional)[string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format'
            name: '- (Required)[string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.'
            node_count: '- (Required)[int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.'
            ram_size: '- (Optional)[int] The RAM size for one node in MB. Must be set in multiples of 1024MB, with a minimum size is of 2048MB. The default value is 4096.'
            storage_size: '- (Optional)[int] The size of the volume in GB. The size must be greater than 10GB. The default value is 20.'
            storage_type: '- (Optional)[int] The type of hardware for the volume. Must be set with one of the values HDD or SSD. The default value is SSD.'
            time: '- (Required)[string] Time at which the maintenance should start. Must conform to the ''HH:MM:SS'' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at this link.'
        importStatements:
            - terraform import ionoscloud_dataplatform_node_pool.mynodepool {dataplatform_cluster_uuid}/{dataplatform_nodepool_id}
    ionoscloud_dns_record:
        subCategory: Cloud DNS
        description: Creates and manages DNS Record objects.
        name: ionoscloud_dns_record
        title: ionoscloud_dns_record
        examples:
            - name: recordexample
              manifest: |-
                {
                  "content": "1.2.3.4",
                  "enabled": false,
                  "name": "recordexample",
                  "priority": 1024,
                  "ttl": 2000,
                  "type": "CNAME",
                  "zone_id": "${ionoscloud_dns_zone.example.id}"
                }
              references:
                zone_id: ionoscloud_dns_zone.example.id
              dependencies:
                ionoscloud_dns_zone.example: |-
                    {
                      "description": "description",
                      "enabled": false,
                      "name": "example.com"
                    }
            - name: example
              manifest: '{}'
        argumentDocs:
            content: '- (Required)[string] The content of the DNS Record.'
            enabled: '- (Optional)[bool] Indicates if the DNS Record is active or not. Default is true.'
            name: '- (Required)[string] The name of the DNS Record.'
            priority: '- (Optional)[int] The priority for the DNS Record.'
            ttl: '- (Optional)[int] Time to live for the DNS Record. Default is 3600.'
            type: '- (Required)[string] The type of the DNS Record, can have one of these values: A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC. More details about types can be found here.'
            zone_id: '- (Required)[string] The DNS Zone ID in which the DNS Record will be created.'
        importStatements:
            - terraform import ionoscloud_dns_record.example {zone_id}/{record_id}
    ionoscloud_dns_zone:
        subCategory: Cloud DNS
        description: Creates and manages DNS Zone objects.
        name: ionoscloud_dns_zone
        title: ionoscloud_dns_zone
        examples:
            - name: example
              manifest: |-
                {
                  "description": "description",
                  "enabled": false,
                  "name": "example.com"
                }
            - name: example
              manifest: '{}'
        argumentDocs:
            description: '- (Optional)[string] The description for the DNS Zone.'
            enabled: '- (Optional)[bool] Indicates if the DNS Zone is active or not. Default is true.'
            name: '- (Required)[string] The name of the DNS Zone.'
        importStatements:
            - terraform import ionoscloud_dns_zone.example {zone_id}
    ionoscloud_firewall:
        subCategory: Compute Engine
        description: Creates and manages Firewall Rules.
        name: ionoscloud_firewall
        title: firewall
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "icmp_code": 8,
                  "icmp_type": 1,
                  "name": "Firewall Example",
                  "nic_id": "${ionoscloud_nic.example.id}",
                  "protocol": "ICMP",
                  "server_id": "${ionoscloud_server.example.id}",
                  "source_ip": "${ionoscloud_ipblock.example.ips[0]}",
                  "source_mac": "00:0a:95:9d:68:16",
                  "target_ip": "${ionoscloud_ipblock.example.ips[1]}",
                  "type": "INGRESS"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                nic_id: ionoscloud_nic.example.id
                server_id: ionoscloud_server.example.id
                source_ip: ionoscloud_ipblock.example.ips[0]
                target_ip: ionoscloud_ipblock.example.ips[1]
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 2
                    }
                ionoscloud_nic.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "dhcp": true,
                      "firewall_active": true,
                      "lan": 2,
                      "name": "Nic Example",
                      "server_id": "${ionoscloud_server.example.id}"
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Ubuntu-20.04",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "1"
                        }
                      ],
                      "ram": 1024,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] The Virtual Data Center ID.'
            icmp_code: '- (Optional)[int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.'
            icmp_type: '- (Optional)[string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.'
            name: '- (Optional)[string] The name of the firewall rule.'
            nic_id: '- (Required)[string] The NIC ID.'
            port_range_end: '- (Optional)[int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.'
            port_range_start: '- (Optional)[int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.'
            protocol: '- (Required)[string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).'
            server_id: '- (Required)[string] The Server ID.'
            source_ip: '-  (Optional)[string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.'
            source_mac: '- (Optional)[string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.'
            target_ip: '- (Optional)[string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.'
            type: '- (Optional)[string] The type of firewall rule. If is not specified, it will take the default value INGRESS.'
        importStatements:
            - terraform import ionoscloud_firewall.myfwrule {datacenter uuid}/{server uuid}/{nic uuid}/{firewall uuid}
    ionoscloud_group:
        subCategory: User Management
        description: Creates and manages group objects.
        name: ionoscloud_group
        title: group
        examples:
            - name: example
              manifest: |-
                {
                  "access_activity_log": true,
                  "access_and_manage_certificates": true,
                  "access_and_manage_monitoring": true,
                  "create_backup_unit": true,
                  "create_datacenter": true,
                  "create_flow_log": true,
                  "create_internet_access": true,
                  "create_k8s_cluster": true,
                  "create_pcc": true,
                  "create_snapshot": true,
                  "manage_dbaas": true,
                  "name": "Group Example",
                  "reserve_ip": true,
                  "s3_privilege": true,
                  "user_ids": [
                    "${ionoscloud_user.example1.id}",
                    "${ionoscloud_user.example2.id}"
                  ]
                }
              dependencies:
                ionoscloud_user.example1: |-
                    {
                      "administrator": false,
                      "email": "unique_email.com",
                      "first_name": "user1",
                      "force_sec_auth": false,
                      "last_name": "user1",
                      "password": "${random_password.user1_password.result}"
                    }
                ionoscloud_user.example2: |-
                    {
                      "administrator": false,
                      "email": "unique_email.com",
                      "first_name": "user2",
                      "force_sec_auth": false,
                      "last_name": "user2",
                      "password": "${random_password.user2_password.result}"
                    }
                random_password.user1_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
                random_password.user2_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            access_activity_log: '- (Optional) [Boolean] The group will be allowed to access the activity log.'
            access_and_manage_certificates: '- (Optional) [Boolean]  The group will be allowed to access and manage certificates.'
            access_and_manage_monitoring: '- (Optional) [Boolean]  The group will be allowed to access and manage monitoring.'
            create_backup_unit: '- (Optional) [Boolean] The group will be allowed to create backup unit privilege.'
            create_datacenter: '- (Optional) [Boolean] The group will be allowed to create virtual data centers.'
            create_flow_log: '- (Optional) [Boolean]  The group will be allowed to create flow log.'
            create_internet_access: '- (Optional) [Boolean] The group will be allowed to create internet access privilege.'
            create_k8s_cluster: '- (Optional) [Boolean]  The group will be allowed to create kubernetes cluster privilege.'
            create_pcc: '- (Optional) [Boolean] The group will be allowed to create Cross Connects privilege.'
            create_snapshot: '- (Optional) [Boolean] The group will be allowed to create snapshots.'
            manage_dbaas: '- (Optional) [Boolean]  Privilege for a group to manage DBaaS related functionality.'
            name: '- (Required) [string] A name for the group.'
            reserve_ip: '- (Optional) [Boolean] The group will be allowed to reserve IP addresses.'
            s3_privilege: '- (Optional) [Boolean] The group will have S3 privilege.'
            user_id: '- (Optional) [string] The ID of the specific user to add to the group. Please use user_ids argument since this is DEPRECATED'
            user_ids: '- (Optional) [list] A list of users to add to the group.'
            users: '- (Computed) List of users - See the User section'
        importStatements:
            - terraform import ionoscloud_group.mygroup {group uuid}
    ionoscloud_inmemorydb_replicaset:
        subCategory: Database as a Service - InMemoryDB
        description: Creates and manages DBaaS InMemoryDB Replica Set objects.
        name: ionoscloud_inmemorydb_replicaset
        title: ionoscloud_inmemorydb_replicaset
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr": "${local.database_ip_cidr}",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "credentials": [
                    {
                      "plain_text_password": "testpassword",
                      "username": "myuser"
                    }
                  ],
                  "display_name": "ExampleReplicaSet",
                  "eviction_policy": "noeviction",
                  "location": "${ionoscloud_datacenter.example.location}",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Monday",
                      "time": "10:00:00"
                    }
                  ],
                  "persistence_mode": "RDB",
                  "replicas": 4,
                  "resources": [
                    {
                      "cores": 1,
                      "ram": 6
                    }
                  ],
                  "version": "7.2"
                }
              references:
                connections.cidr: local.database_ip_cidr
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
                location: ionoscloud_datacenter.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for DBaaS InMemoryDB replica sets",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example",
                      "public": false
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 2,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "rockylinux-8-GenericCloud-20230518",
                      "image_password": "password",
                      "name": "example",
                      "nic": [
                        {
                          "dhcp": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "SSD Standard",
                          "name": "example",
                          "size": 10
                        }
                      ]
                    }
        argumentDocs:
            AOF: '- (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.'
            None: '- Data is inMemory only and will not be persisted. Useful for cache only applications.'
            RDB: '- RDB persistence performs snapshots of the current in memory state.'
            RDB_AOF: '- Both RDB and AOF persistence are enabled.'
            algorithm: '- (Required)[string] The value can be only: "SHA-256".'
            allkeys-lfu: '- The least frequently used keys will be removed first.'
            allkeys-lru: '- The least recently used keys will be removed first.'
            allkeys-random: '- Random keys will be removed.'
            cidr: '- (Required)[string] The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24.'
            connections: '- (Required)[object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.'
            cores: '- (Required)[int] The number of CPU cores per instance.'
            credentials: '- (Required)[object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.'
            datacenter_id: '- (Required)[string] The datacenter to connect your instance to.'
            day_of_the_week: '- (Required)[string] The name of the week day.'
            display_name: '- (Required)[string] The human-readable name of your replica set.'
            dns_name: '- (Computed)[string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.'
            eviction_policy: '- (Required)[string] The eviction policy for the replica set, possible values are:'
            hash: '- (Required)[string] The hashed password.'
            hashed_password: '- (Optional)[object] The hashed password for a InMemoryDB user.'
            initial_snapshot_id: '- (Optional)[string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.'
            lan_id: '- (Required)[string] The numeric LAN ID to connect your instance to.'
            location: '- (Required)[string] The location of your replica set. Updates to the value of the field force the replica set to be re-created.'
            maintenance_window: '- (Optional)(Computed) A weekly 4 hour-long window, during which maintenance might occur.'
            noeviction: '- No eviction policy is used. InMemoryDB will never remove any data. If the memory limit is reached, an error will be returned on write operations.'
            persistence_mode: '- (Required)[string] Specifies How and If data is persisted, possible values are:'
            plain_text_password: '- (Optional)[string] The password for a InMemoryDB user, this is a field that is marked as Sensitive.'
            ram: '- (Required)[int] The amount of memory per instance in gigabytes (GB).'
            replicas: '- (Required)[int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.'
            resources: '- (Required)[object] The resources of the individual replicas.'
            storage: '- (Computed)[int] The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.'
            time: '- (Required)[string] Start of the maintenance window in UTC time.'
            username: '- (Required)[string] The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. ''admin'', ''standby'').'
            version: '- (Required)[string] The InMemoryDB version of your replica set.'
            volatile-lfu: '- The least frequently used keys will be removed first, but only among keys with the expire field set to true.'
            volatile-lru: '- The least recently used keys will be removed first, but only among keys with the expire field set to true.'
            volatile-random: '- Random keys will be removed, but only among keys with the expire field set to true.'
            volatile-ttl: '- The key with the nearest time to live will be removed first, but only among keys with the expire field set to true.'
        importStatements:
            - terraform import ionoscloud_inmemorydb_replicaset.example {location}:{replicaSet UUID}
    ionoscloud_ipblock:
        subCategory: Compute Engine
        description: Creates and manages IP Block objects.
        name: ionoscloud_ipblock
        title: ipblock
        examples:
            - name: example
              manifest: |-
                {
                  "location": "us/las",
                  "name": "IP Block Example",
                  "size": 3
                }
        argumentDocs:
            ip_consumers: (Computed) Read-Only attribute. Lists consumption detail of an individual ip
            ips: '- (Computed)[integer] The list of IP addresses associated with this block.'
            location: '- (Required)[string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.'
            name: '- (Optional)[string] The name of Ip Block'
            size: '- (Required)[integer] The number of IP addresses to reserve for this block.'
        importStatements:
            - terraform import ionoscloud_ipblock.myipblock {ipblock uuid}
    ionoscloud_ipfailover:
        subCategory: Compute Engine
        description: Creates and manages ipfailover objects.
        name: ionoscloud_ipfailover
        title: ipfailover
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "depends_on": [
                    "${ionoscloud_lan.example}"
                  ],
                  "ip": "${ionoscloud_ipblock.example.ips[0]}",
                  "lan_id": "${ionoscloud_lan.example.id}",
                  "nicuuid": "${ionoscloud_server.example.primary_nic}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                ip: ionoscloud_ipblock.example.ips[0]
                lan_id: ionoscloud_lan.example.id
                nicuuid: ionoscloud_server.example.primary_nic
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "us/las",
                      "name": "IP Block Example",
                      "size": 1
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Ubuntu-20.04",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "ips": [
                            "${ionoscloud_ipblock.example.ips[0]}"
                          ],
                          "lan": "1"
                        }
                      ],
                      "ram": 1024,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            ip: '- (Required)[string] The reserved IP address to be used in the IP failover group.'
            lan_id: '- (Required)[string] The ID of a LAN.'
            nicuuid: '- (Required)[string] The ID of a NIC.'
        importStatements:
            - terraform apply -parallelism=1
            - terraform import ionoscloud_ipfailover.myipfailover {datacenter uuid}/{lan uuid}
    ionoscloud_k8s_cluster:
        subCategory: Managed Kubernetes
        description: Creates and manages IonosCloud Kubernetes Clusters.
        name: ionoscloud_k8s_cluster
        title: k8s_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "api_subnet_allow_list": [
                    "1.2.3.4/32"
                  ],
                  "k8s_version": "1.28.6",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00Z"
                    }
                  ],
                  "name": "k8sClusterExample",
                  "s3_buckets": [
                    {
                      "name": "globally_unique_s3_bucket_name"
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "api_subnet_allow_list": [
                    "1.2.3.4/32"
                  ],
                  "k8s_version": "1.28.6",
                  "location": "de/fra",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00Z"
                    }
                  ],
                  "name": "k8sClusterExample",
                  "nat_gateway_ip": "${ionoscloud_ipblock.k8sip.ips[0]}",
                  "node_subnet": "192.168.0.0/16",
                  "public": false,
                  "s3_buckets": [
                    {
                      "name": "globally_unique_s3_bucket_name"
                    }
                  ]
                }
              references:
                nat_gateway_ip: ionoscloud_ipblock.k8sip.ips[0]
              dependencies:
                ionoscloud_datacenter.testdatacenter: |-
                    {
                      "description": "Test datacenter",
                      "location": "de/fra",
                      "name": "example"
                    }
                ionoscloud_ipblock.k8sip: |-
                    {
                      "location": "de/fra",
                      "name": "IP Block Private K8s",
                      "size": 1
                    }
        argumentDocs:
            allow_replace: '- (Optional)[bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.'
            api_subnet_allow_list: '- (Optional)[list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.'
            day_of_the_week: '- (Required)[string] Day of the week when maintenance is allowed'
            k8s_version: '- (Optional)[string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.'
            location: '- (Optional)[string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.'
            maintenance_window: '- (Optional) A maintenance window comprise of a day of the week and a time for maintenance to be allowed'
            name: '- (Required)[string] The name of the Kubernetes Cluster.'
            nat_gateway_ip: '- (Optional)[string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster''s location. This attribute is mandatory if the cluster is private.'
            node_subnet: '- (Optional)[string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.'
            public: '- (Optional)[boolean] Indicates if the cluster is public or private. This attribute is immutable.'
            s3_buckets: '- (Optional)[list] List of S3 bucket configured for K8s usage. For now it contains only an S3 bucket used to store K8s API audit logs.'
            time: '- (Required)[string] A clock time in the day when maintenance is allowed'
            viable_node_pool_versions: '- (Computed)[list] List of versions that may be used for node pools under this cluster'
        importStatements:
            - terraform import ionoscloud_k8s_cluster.demo {k8s_cluster uuid}
    ionoscloud_k8s_node_pool:
        subCategory: Managed Kubernetes
        description: Creates and manages IonosCloud Kubernetes Node Pools.
        name: ionoscloud_k8s_node_pool
        title: k8s_node_pool
        examples:
            - name: example
              manifest: |-
                {
                  "annotations": {
                    "ann1": "value1",
                    "ann2": "value2"
                  },
                  "auto_scaling": [
                    {
                      "max_node_count": 2,
                      "min_node_count": 1
                    }
                  ],
                  "availability_zone": "AUTO",
                  "cores_count": 2,
                  "cpu_family": "INTEL_XEON",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "k8s_cluster_id": "${ionoscloud_k8s_cluster.example.id}",
                  "k8s_version": "${ionoscloud_k8s_cluster.example.k8s_version}",
                  "labels": {
                    "lab1": "value1",
                    "lab2": "value2"
                  },
                  "lans": [
                    {
                      "dhcp": true,
                      "id": "${ionoscloud_lan.example.id}",
                      "routes": [
                        {
                          "gateway_ip": "10.1.5.17",
                          "network": "1.2.3.5/24"
                        }
                      ]
                    }
                  ],
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Monday",
                      "time": "09:00:00Z"
                    }
                  ],
                  "name": "k8sNodePoolExample",
                  "node_count": 1,
                  "public_ips": [
                    "${ionoscloud_ipblock.example.ips[0]}",
                    "${ionoscloud_ipblock.example.ips[1]}",
                    "${ionoscloud_ipblock.example.ips[2]}"
                  ],
                  "ram_size": 2048,
                  "storage_size": 40,
                  "storage_type": "SSD"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                k8s_cluster_id: ionoscloud_k8s_cluster.example.id
                k8s_version: ionoscloud_k8s_cluster.example.k8s_version
                lans.id: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "datacenter description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "us/las",
                      "name": "IP Block Example",
                      "size": 3
                    }
                ionoscloud_k8s_cluster.example: |-
                    {
                      "api_subnet_allow_list": [
                        "1.2.3.4/32"
                      ],
                      "k8s_version": "1.28.6",
                      "maintenance_window": [
                        {
                          "day_of_the_week": "Sunday",
                          "time": "09:00:00Z"
                        }
                      ],
                      "name": "k8sClusterExample",
                      "s3_buckets": [
                        {
                          "name": "globally_unique_s3_bucket_name"
                        }
                      ]
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lifecycle": [
                        {
                          "create_before_destroy": true
                        }
                      ],
                      "name": "Lan Example",
                      "public": false
                    }
        argumentDocs:
            allow_replace: '- (Optional)[bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the node pool.'
            annotations: '- (Optional)[map] A key/value map of annotations'
            auto_scaling: '- (Optional)[string] Wether the Node Pool should autoscale. For more details, please check the API documentation'
            availability_zone: '- (Required)[string] - The desired Compute availability zone - See the API documentation for more information. This attribute is immutable.'
            cores_count: -(Required)[int] - The CPU cores count for each node of the node pool. This attribute is immutable.
            cpu_family: '- (Required)[string] The desired CPU Family - See the API documentation for more information. This attribute is immutable.'
            datacenter_id: '- (Required)[string] A Datacenter''s UUID'
            day_of_the_week: '- (Required)[string] Day of the week when maintenance is allowed'
            dhcp: '- (Optional)[boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is true'
            gateway_ip: '- (Required)[string] IPv4 or IPv6 Gateway IP for the route'
            id: '- (Required)[int] The LAN ID of an existing LAN at the related datacenter'
            k8s_cluster_id: '- (Required)[string] A k8s cluster''s UUID'
            k8s_version: '- (Optional)[string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.'
            labels: '- (Optional)[map] A key/value map of labels'
            lans: '- (Optional)[list] A list of numeric LAN id''s you want this node pool to be part of. For more details, please check the API documentation, as well as the example above'
            maintenance_window: '- (Optional) See the maintenance_window section in the example above'
            max_node_count: '- (Optional)[int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count'
            min_node_count: '- (Optional)[int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count'
            name: '- (Required)[string] The name of the Kubernetes Cluster. This attribute is immutable.'
            network: '- (Required)[string] IPv4 or IPv6 CIDR to be routed via the interface'
            node_count: -(Required)[int] - The desired number of nodes in the node pool
            public_ips: '- (Optional)[list] A list of public IPs associated with the node pool; must have at least node_count + 1 elements'
            ram_size: -(Required)[int] - The desired amount of RAM, in MB. This attribute is immutable.
            routes: '- (Optional) An array of additional LANs attached to worker nodes'
            storage_size: -(Required)[int] - The size of the volume in GB. The size should be greater than 10GB. This attribute is immutable.
            storage_type: -(Required)[string] - The desired storage type - SSD/HDD. This attribute is immutable.
            time: '- (Required)[string] A clock time in the day when maintenance is allowed'
        importStatements:
            - terraform import ionoscloud_k8s_node_pool.demo {k8s_cluster_uuid}/{k8s_nodepool_id}
    ionoscloud_kafka_cluster:
        subCategory: Event Streams for Apache Kafka
        description: Creates and manages IonosCloud Kafka Cluster objects.
        name: ionoscloud_kafka_cluster
        title: ionoscloud_kafka_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "broker_addresses": [
                        "192.168.1.101/24",
                        "192.168.1.102/24",
                        "192.168.1.103/24"
                      ],
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "location": "de/fra",
                  "name": "example-kafka-cluster",
                  "size": "S",
                  "version": "3.7.0"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/fra",
                      "name": "example-kafka-datacenter"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example-kafka-lan",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "broker_addresses": "${local.kafka_cluster_broker_ips_cidr}",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "location": "${ionoscloud_datacenter.example.location}",
                  "name": "example-kafka-cluster",
                  "size": "S",
                  "version": "3.7.0"
                }
              references:
                connections.broker_addresses: local.kafka_cluster_broker_ips_cidr
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
                location: ionoscloud_datacenter.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/fra",
                      "name": "example-kafka-datacenter"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example-kafka-lan",
                      "public": false
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "AUTO",
                      "cores": 1,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.password.result}",
                      "name": "example-kafka-server",
                      "nic": [
                        {
                          "dhcp": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "example-kafka-nic"
                        }
                      ],
                      "ram": "${2 * 1024}",
                      "volume": [
                        {
                          "disk_type": "SSD Standard",
                          "name": "example-kafka-volume",
                          "size": 6
                        }
                      ]
                    }
                random_password.password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            broker_addresses: |-
                - (Required)[list] IP addresses and subnet of cluster brokers. Note the following
                unavailable IP range: 10.224.0.0/11
            connections: '- (Required) Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.'
            datacenter_id: '- (Required)[string] The datacenter to connect your instance to.'
            id: '- (Computed)[string] The UUID of the Kafka Cluster.'
            lan_id: '- (Required)[string] The numeric LAN ID to connect your instance to.'
            location: |-
                - (Required)[string] The location of the Kafka Cluster. Possible values: de/fra, de/txl, es/vit,
                gb/lhr, us/ewr, us/las, us/mci, fr/par
            name: '- (Required)[string] Name of the Kafka Cluster.'
            size: '- (Required)[string] Size of the Kafka Cluster. Possible values: XS, S'
            version: '- (Required)[string] Version of the Kafka Cluster. Possible values: 3.7.0'
        importStatements:
            - terraform import ionoscloud_kafka_cluster.mycluster {location}:{kafka cluster uuid}
    ionoscloud_kafka_cluster_topic:
        subCategory: Event Streams for Apache Kafka
        description: Creates and manages IonosCloud Kafka Cluster Topic objects.
        name: ionoscloud_kafka_cluster_topic
        title: ionoscloud_kafka_cluster_topic
        examples:
            - name: example
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_kafka_cluster.example.id}",
                  "location": "${ionoscloud_kafka_cluster.example.location}",
                  "name": "kafka-cluster-topic",
                  "number_of_partitions": 1,
                  "replication_factor": 1,
                  "retention_time": 86400000,
                  "segment_bytes": 1073741824
                }
              references:
                cluster_id: ionoscloud_kafka_cluster.example.id
                location: ionoscloud_kafka_cluster.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/fra",
                      "name": "example-kafka-datacenter"
                    }
                ionoscloud_kafka_cluster.example: |-
                    {
                      "connections": [
                        {
                          "broker_addresses": [
                            "192.168.1.101/24",
                            "192.168.1.102/24",
                            "192.168.1.103/24"
                          ],
                          "datacenter_id": "${ionoscloud_datacenter.example.id}",
                          "lan_id": "${ionoscloud_lan.example.id}"
                        }
                      ],
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "example-kafka-cluster",
                      "size": "S",
                      "version": "3.7.0"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example-kafka-lan",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_kafka_cluster.example.id}",
                  "location": "${ionoscloud_kafka_cluster.example.location}",
                  "name": "kafka-cluster-topic",
                  "number_of_partitions": 1,
                  "replication_factor": 1,
                  "retention_time": 86400000,
                  "segment_bytes": 1073741824
                }
              references:
                cluster_id: ionoscloud_kafka_cluster.example.id
                location: ionoscloud_kafka_cluster.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/fra",
                      "name": "example-kafka-datacenter"
                    }
                ionoscloud_kafka_cluster.example: |-
                    {
                      "connections": [
                        {
                          "broker_addresses": "${local.kafka_cluster_broker_ips_cidr}",
                          "datacenter_id": "${ionoscloud_datacenter.example.id}",
                          "lan_id": "${ionoscloud_lan.example.id}"
                        }
                      ],
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "example-kafka-cluster",
                      "size": "S",
                      "version": "3.7.0"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example-kafka-lan",
                      "public": false
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "AUTO",
                      "cores": 1,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.password.result}",
                      "name": "example-kafka-server",
                      "nic": [
                        {
                          "dhcp": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "example-kafka-nic"
                        }
                      ],
                      "ram": "${2 * 1024}",
                      "volume": [
                        {
                          "disk_type": "SSD Standard",
                          "name": "example-kafka-volume",
                          "size": 6
                        }
                      ]
                    }
                random_password.password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            cluster_id: '- (Required)[string] ID of the Kafka Cluster that the topic belongs to.'
            id: '- (Computed)[string] The UUID of the Kafka Cluster Topic.'
            location: |-
                - (Required)[string] The location of the Kafka Cluster Topic. Possible values: de/fra, de/txl,
                es/vit,gb/lhr, us/ewr, us/las, us/mci, fr/par
            name: '- (Required)[string] Name of the Kafka Cluster.'
            number_of_partitions: |-
                - (Optional)[int] The number of partitions of the topic. Partitions allow for parallel
                processing of messages. The partition count must be greater than or equal to the replication factor. Minimum value: 1.
                Default value: 3.
            replication_factor: |-
                - (Optional)[int] The number of replicas of the topic. The replication factor determines how many
                copies of the topic are stored on different brokers. The replication factor must be less than or equal to the number
                of brokers in the Kafka Cluster. Minimum value: 1. Default value: 3.
            retention_time: |-
                - (Optional)[int] This configuration controls the maximum time we will retain a log before we will
                discard old log segments to free up space. This represents an SLA on how soon consumers must read their data. If set
                to -1, no time limit is applied. Default value: 604800000.
            segment_bytes: |-
                - (Optional)[int] This configuration controls the segment file size for the log. Retention and
                cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over
                retention. Default value: 1073741824.
        importStatements:
            - terraform import ionoscloud_kafka_cluster_topic.my_topic {location}:{kafka cluster uuid}:{kafka cluster topic uuid}
    ionoscloud_lan:
        subCategory: Compute Engine
        description: Creates and manages LAN objects.
        name: ionoscloud_lan
        title: lan
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "name": "Lan Example",
                  "pcc": "${ionoscloud_private_crossconnect.example.id}",
                  "public": false
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                pcc: ionoscloud_private_crossconnect.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_private_crossconnect.example: |-
                    {
                      "description": "Cross Connect Description",
                      "name": "Cross Connect Example"
                    }
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "ipv6_cidr_block": "AUTO",
                  "name": "Lan IPv6 Example",
                  "public": true
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "de/txl",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            ip_failover: '- (Computed) IP failover configurations for lan'
            ipv6_cidr_block: '- (Computed, Optional) Contains the LAN''s /64 IPv6 CIDR block if this LAN is IPv6 enabled. ''AUTO'' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.'
            name: '- (Optional)[string] The name of the LAN.'
            pcc: '- (Optional)[String] The unique id of a ionoscloud_private_crossconnect resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range'
            public: '- (Optional)[Boolean] Indicates if the LAN faces the public Internet (true) or not (false).'
        importStatements:
            - terraform import ionoscloud_lan.mylan {datacenter uuid}/{lan id}
    ionoscloud_loadbalancer:
        subCategory: Compute Engine
        description: Creates and manages Load Balancers
        name: ionoscloud_loadbalancer
        title: loadbalancer
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "dhcp": true,
                  "name": "Load Balancer Example",
                  "nic_ids": [
                    "${ionoscloud_server.example.primary_nic}"
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Ubuntu-20.04",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "1"
                        }
                      ],
                      "ram": 1024,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            dhcp: '- (Optional)[Boolean] Indicates if the load balancer will reserve an IP using DHCP.'
            ip: '- (Optional)[string] IPv4 address of the load balancer.'
            name: '- (Required)[string] The name of the load balancer.'
            nic_ids: '- (Required)[list] A list of NIC IDs that are part of the load balancer.'
        importStatements:
            - terraform import ionoscloud_loadbalancer.myloadbalancer {datacenter uuid}/{loadbalancer uuid}
    ionoscloud_logging_pipeline:
        subCategory: Logging Service
        description: Creates and manages Logging pipeline objects.
        name: ionoscloud_logging_pipeline
        title: ionoscloud_logging_pipeline
        examples:
            - name: example
              manifest: |-
                {
                  "location": "es/vit",
                  "log": [
                    {
                      "destinations": [
                        {
                          "retention_in_days": 7,
                          "type": "loki"
                        }
                      ],
                      "protocol": "http",
                      "source": "kubernetes",
                      "tag": "tagexample"
                    },
                    {
                      "destinations": [
                        {
                          "retention_in_days": 7,
                          "type": "loki"
                        }
                      ],
                      "protocol": "tcp",
                      "source": "kubernetes",
                      "tag": "anothertagexample"
                    }
                  ],
                  "name": "pipelineexample"
                }
            - name: example
              manifest: |-
                {
                  "dynamic": {
                    "log": [
                      {
                        "content": [
                          {
                            "destinations": [
                              {
                                "retention_in_days": "${log.value[\"destinations\"][\"retention_in_days\"]}",
                                "type": "${log.value[\"destinations\"][\"type\"]}"
                              }
                            ],
                            "protocol": "${log.value[\"protocol\"]}",
                            "source": "${log.value[\"source\"]}",
                            "tag": "${log.value[\"tag\"]}"
                          }
                        ],
                        "for_each": "${var.logs}"
                      }
                    ]
                  },
                  "location": "es/vit",
                  "name": "examplepipeline"
                }
              references:
                dynamic.content.destinations.retention_in_days: log.value["destinations"]["retention_in_days"]
                dynamic.content.destinations.type: log.value["destinations"]["type"]
                dynamic.content.protocol: log.value["protocol"]
                dynamic.content.source: log.value["source"]
                dynamic.content.tag: log.value["tag"]
                dynamic.for_each: var.logs
            - name: example
              manifest: '{}'
        argumentDocs:
            destinations: '- (Optional)[list] The configuration of the logs datastore, a list that contains elements with the following structure:'
            grafana_address: '- (Computed)[string] The address of the client''s grafana instance.'
            location: '- (Optional)[string] The location of the Logging pipeline. Default: de/txl One of de/fra, de/txl, gb/lhr, es/vit, fr/par.'
            log: '- (Required)[list] Pipeline logs, a list that contains elements with the following structure:'
            name: '- (Required)[string] The name of the Logging pipeline.'
            protocol: '- (Required)[string] "Protocol to use as intake. Possible values are: http, tcp."'
            public: '- (Computed)[bool]'
            retention_in_days: '- (Optional)[int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.'
            source: '- (Required)[string] The source parser to be used.'
            tag: '- (Required)[string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline''s array items.'
            type: '- (Optional)[string] The internal output stream to send logs to.'
        importStatements:
            - |-
              terraform plan -var-file="vars.tfvars"
              terraform apply -var-file="vars.tfvars"
            - terraform import ionoscloud_logging_pipeline.example {location}:{pipeline_id}
    ionoscloud_mariadb_cluster:
        subCategory: Database as a Service - MariaDB
        description: Creates and manages DBaaS MariaDB Cluster objects.
        name: ionoscloud_mariadb_cluster
        title: ionoscloud_mariadb_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr": "${local.database_ip_cidr}",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "cores": 4,
                  "credentials": [
                    {
                      "password": "${random_password.cluster_password.result}",
                      "username": "username"
                    }
                  ],
                  "display_name": "MariaDB_cluster",
                  "instances": 1,
                  "location": "de/txl",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "mariadb_version": "10.6",
                  "ram": 4,
                  "storage_size": 10
                }
              references:
                connections.cidr: local.database_ip_cidr
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
                credentials.password: random_password.cluster_password.result
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for testing DBaaS cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example",
                      "public": false
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 2,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "rockylinux-8-GenericCloud-20230518",
                      "image_password": "password",
                      "name": "example",
                      "nic": [
                        {
                          "dhcp": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "SSD Standard",
                          "name": "example",
                          "size": 10
                        }
                      ]
                    }
                random_password.cluster_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            cidr: '- (Required)[true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See Private IPs and Configuring the network.'
            connections: '- (Required) The network connection for your cluster. Only one connection is allowed.'
            cores: '- (Required)[int] The number of CPU cores per instance.'
            credentials: '- (Required) Credentials for the database user to be created.'
            datacenter_id: '- (Required)[true] The datacenter to connect your cluster to.'
            day_of_the_week: '- (Required)[string] The name of the week day.'
            display_name: '- (Required)[string] The friendly name of your cluster.'
            dns_name: '- (Computed)[string] The DNS name pointing to your cluster.'
            instances: '- (Required)[int] The total number of instances in the cluster (one primary and n-1 secondary).'
            lan_id: '- (Required)[true] The numeric LAN ID to connect your cluster to.'
            location: '- (Optional)[string] The location in which the cluster will be created. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".'
            maintenance_window: '- (Optional)(Computed) A weekly 4 hour-long window, during which maintenance might occur'
            mariadb_version: '- (Required)[string] The MariaDB version of your cluster.'
            password: '- (Required)[string] The password for a MariaDB user.'
            ram: '- (Required)[int] The amount of memory per instance in gigabytes (GB).'
            storage_size: '- (Required)[int] The amount of storage per instance in gigabytes (GB).'
            time: '- (Required)[string] Start of the maintenance window in UTC time.'
            username: '- (Required)[string] The username for the initial MariaDB user. Some system usernames are restricted (e.g ''mariadb'', ''admin'', ''standby'').'
        importStatements:
            - terraform import ionoscloud_mariadb_cluster.mycluster {location}:{cluster UUID}
    ionoscloud_mongo_cluster:
        subCategory: Database as a Service - MongoDB
        description: Creates and manages DbaaS MongoDB Cluster objects.
        name: ionoscloud_mongo_cluster
        title: ionoscloud_mongo_cluster
        examples:
            - name: example_mongo_cluster
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr_list": [
                        "192.168.1.108/24"
                      ],
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "lan_id": "${ionoscloud_lan.lan_example.id}"
                    }
                  ],
                  "display_name": "example_mongo_cluster",
                  "instances": 1,
                  "location": "${ionoscloud_datacenter.datacenter_example.location}",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "mongodb_version": "5.0",
                  "template_id": "6b78ea06-ee0e-4689-998c-fc9c46e781f6"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.datacenter_example.id
                connections.lan_id: ionoscloud_lan.lan_example.id
                location: ionoscloud_datacenter.datacenter_example.location
              dependencies:
                ionoscloud_datacenter.datacenter_example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.lan_example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "name": "example",
                      "public": false
                    }
                random_password.cluster_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
            - name: example_mongo_cluster
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr_list": [
                        "192.168.1.108/24",
                        "192.168.1.109/24",
                        "192.168.1.110/24"
                      ],
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "lan_id": "${ionoscloud_lan.lan_example.id}"
                    }
                  ],
                  "cores": 1,
                  "display_name": "example_mongo_cluster",
                  "edition": "enterprise",
                  "instances": 3,
                  "location": "${ionoscloud_datacenter.datacenter_example.location}",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "mongodb_version": "5.0",
                  "ram": 2048,
                  "shards": 2,
                  "storage_size": 5120,
                  "storage_type": "HDD",
                  "type": "sharded-cluster"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.datacenter_example.id
                connections.lan_id: ionoscloud_lan.lan_example.id
                location: ionoscloud_datacenter.datacenter_example.location
              dependencies:
                ionoscloud_datacenter.datacenter_example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.lan_example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "name": "example",
                      "public": false
                    }
                random_password.cluster_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            backup: '- (Optional)[list]'
            bi_connector: '- (Optional)(Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.'
            cidr_list: '- (Required)[List] The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]. See Private IPs and Cluster Setup - Preparing the network.'
            connection_string: '- (Computed)[string] The physical location where the cluster will be created. This will be where all of your instances live. Updates to the value of the field force the cluster to be re-created. Available locations: de/txl, gb/lhr, es/vit'
            connections: '- (Required)[List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.'
            cores: '- (Optional)(Computed)[int] The number of CPU cores per replica. Required for enterprise edition.'
            datacenter_id: '- (Required)[string] The datacenter to connect your cluster to.'
            day_of_the_week: '- (Required)[string]'
            display_name: '- (Required)[string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.'
            edition: '- (Optional)(Computed)[string] Cluster edition. Playground, business or enterprise.'
            enabled: ': (Optional)[bool] - The status of the BI Connector. If not set, the BI Connector is disabled.'
            host: ': (Computed)[string] - The host where this new BI Connector is installed.'
            instances: '- (Required)[int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.'
            lan_id: '- (Required)[string] The LAN to connect your cluster to.'
            location: '- (Required)[string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.'
            maintenance_window: '- (Optional)(Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.'
            mongodb_version: '- (Required)[string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.'
            port: ': (Computed)[string] - Port number used when connecting to this new BI Connector.'
            ram: '- (Optional)(Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.'
            shards: '- (Optional)[int]The total number of shards in the cluster.'
            storage_size: '- (Optional)(Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.'
            storage_type: '- (Optional)(Computed)[String] The storage type used in your cluster. Required for enterprise edition.'
            template_id: '- (Optional)[string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.'
            time: '- (Required)[string]'
            type: '- (Optional)(Computed)[string]The cluster type, either replicaset or sharded-cluster.'
        importStatements:
            - terraform import ionoscloud_mongo_cluster.mycluser {cluster uuid}
    ionoscloud_mongo_user:
        subCategory: Database as a Service - MongoDB
        description: Creates and manages DbaaS MongoDB users.
        name: ionoscloud_mongo_user
        title: ionoscloud_mongo_user
        examples:
            - name: example_mongo_user
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_mongo_cluster.example_mongo_cluster.id}",
                  "password": "strongPassword",
                  "roles": [
                    {
                      "database": "db1",
                      "role": "read"
                    },
                    {
                      "database": "db2",
                      "role": "readWrite"
                    }
                  ],
                  "username": "myUser"
                }
              references:
                cluster_id: ionoscloud_mongo_cluster.example_mongo_cluster.id
              dependencies:
                ionoscloud_datacenter.datacenter_example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.lan_example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "name": "example",
                      "public": false
                    }
                ionoscloud_mongo_cluster.example_mongo_cluster: |-
                    {
                      "connections": [
                        {
                          "cidr_list": [
                            "192.168.1.108/24"
                          ],
                          "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                          "lan_id": "${ionoscloud_lan.lan_example.id}"
                        }
                      ],
                      "display_name": "example_mongo_cluster",
                      "instances": 1,
                      "location": "${ionoscloud_datacenter.datacenter_example.location}",
                      "maintenance_window": [
                        {
                          "day_of_the_week": "Sunday",
                          "time": "09:00:00"
                        }
                      ],
                      "mongodb_version": "5.0",
                      "template_id": "6b78ea06-ee0e-4689-998c-fc9c46e781f6"
                    }
            - name: example_mongo_user
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_mongo_cluster.example_mongo_cluster.id}",
                  "password": "${random_password.user_password.result}",
                  "roles": [
                    {
                      "database": "db1",
                      "role": "read"
                    },
                    {
                      "database": "db2",
                      "role": "readWrite"
                    }
                  ],
                  "username": "myUser"
                }
              references:
                cluster_id: ionoscloud_mongo_cluster.example_mongo_cluster.id
                password: random_password.user_password.result
              dependencies:
                ionoscloud_datacenter.datacenter_example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.lan_example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "name": "example",
                      "public": false
                    }
                ionoscloud_mongo_cluster.example_mongo_cluster: |-
                    {
                      "connections": [
                        {
                          "cidr_list": [
                            "192.168.1.108/24"
                          ],
                          "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                          "lan_id": "${ionoscloud_lan.lan_example.id}"
                        }
                      ],
                      "display_name": "example_mongo_cluster",
                      "instances": 1,
                      "location": "${ionoscloud_datacenter.datacenter_example.location}",
                      "maintenance_window": [
                        {
                          "day_of_the_week": "Sunday",
                          "time": "09:00:00"
                        }
                      ],
                      "mongodb_version": "5.0",
                      "template_id": "6b78ea06-ee0e-4689-998c-fc9c46e781f6"
                    }
                random_password.cluster_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
                random_password.user_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
            - name: importeduser
              manifest: '{}'
        argumentDocs:
            cluster_id: '- (Required)[string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.'
            database: '- (Required)[string] The user database to use for authentication. Updates to the value of the field force the cluster to be re-created.'
            password: '- (Required)[string] User password. Updates to the value of the field force the cluster to be re-created.'
            role: '- (Required)[true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.'
            roles: '- (Required)[string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.'
            username: '- (Required)[string] Used for authentication. Updates to the value of the field force the cluster to be re-created.'
        importStatements:
            - terraform import ionoscloud_mongo_user.mycluser {clusterId}/{username}
    ionoscloud_natgateway:
        subCategory: NAT Gateway
        description: Creates and manages Nat Gateway objects.
        name: ionoscloud_natgateway
        title: natgateway
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "lans": [
                    {
                      "gateway_ips": [
                        "10.11.2.5"
                      ],
                      "id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "name": "example",
                  "public_ips": [
                    "${ionoscloud_ipblock.example.ips[0]}",
                    "${ionoscloud_ipblock.example.ips[1]}"
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                lans.id: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "us/las",
                      "name": "IP Block Example",
                      "size": 2
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] A Datacenter''s UUID.'
            gateway_ips: '- (Optional)[list] Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN.'
            id: '- (Required)[int] Id for the LAN connected to the NAT gateway.'
            lans: '- (Required)[list] A list of Local Area Networks the node pool should be part of.'
            name: '- (Required)[string] Name of the NAT gateway.'
            public_ips: '- (Required)[list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.'
        importStatements:
            - terraform import ionoscloud_natgateway.my_natgateway {datacenter uuid}/{nat gateway uuid}
    ionoscloud_natgateway_rule:
        subCategory: NAT Gateway
        description: Creates and manages Nat Gateway Rule objects.
        name: ionoscloud_natgateway_rule
        title: natgateway_rule
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "name": "example",
                  "natgateway_id": "${ionoscloud_natgateway.example.id}",
                  "protocol": "TCP",
                  "public_ip": "${ionoscloud_ipblock.example.ips[0]}",
                  "source_subnet": "10.0.1.0/24",
                  "target_port_range": [
                    {
                      "end": 1000,
                      "start": 500
                    }
                  ],
                  "target_subnet": "10.0.1.0/24",
                  "type": "SNAT"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                natgateway_id: ionoscloud_natgateway.example.id
                public_ip: ionoscloud_ipblock.example.ips[0]
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "us/las",
                      "name": "IP Block Example",
                      "size": 2
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_natgateway.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lans": [
                        {
                          "gateway_ips": [
                            "10.11.2.5"
                          ],
                          "id": "${ionoscloud_lan.example.id}"
                        }
                      ],
                      "name": "example",
                      "public_ips": [
                        "${ionoscloud_ipblock.example.ips[0]}",
                        "${ionoscloud_ipblock.example.ips[1]}"
                      ]
                    }
        argumentDocs:
            datacenter_id: '- (Required)[string] A Datacenter''s UUID.'
            end: '- (Optional)[int] Target port range end associated with the NAT gateway rule.'
            name: '- (Required)[string] Name of the NAT gateway rule.'
            natgateway_id: '- (Required)[string] Nat Gateway''s UUID.'
            protocol: '- (Optional)[string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is ''ICMP'' then targetPortRange start and end cannot be set.'
            public_ip: '- (Required)[string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.'
            source_subnet: '- (Required)[string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.'
            start: '- (Optional)[int] Target port range start associated with the NAT gateway rule.'
            target_port_range: '- (Optional) Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.'
            target_subnet: '- (Optional)[string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.'
            type: '- (Optional)[string] Type of the NAT gateway rule.'
        importStatements:
            - terraform import ionoscloud_natgateway_rule.my_natgateway_rule {datacenter uuid}/{nat gateway uuid}/{nat gateway rule uuid}
    ionoscloud_networkloadbalancer:
        subCategory: Network Load Balancer
        description: Creates and manages Network Load Balancer objects.
        name: ionoscloud_networkloadbalancer
        title: networkloadbalancer
        examples:
            - name: example
              manifest: |-
                {
                  "central_logging": true,
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "ips": [
                    "10.12.118.224"
                  ],
                  "lb_private_ips": [
                    "10.13.72.225/24"
                  ],
                  "listener_lan": "${ionoscloud_lan.example1.id}",
                  "logging_format": "%{+Q}o %{-Q}ci - - [%trg] %r %ST %B \"\" \"\" %cp %ms %ft %b %s %TR %Tw %Tc %Tr %Ta %tsc %ac %fc %bc %sc %rc %sq %bq %CC %CS %hrl %hsl",
                  "name": "example",
                  "target_lan": "${ionoscloud_lan.example2.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                listener_lan: ionoscloud_lan.example1.id
                target_lan: ionoscloud_lan.example2.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example1: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 1",
                      "public": false
                    }
                ionoscloud_lan.example2: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 2",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "flowlog": [
                    {
                      "action": "ALL",
                      "bucket": "flowlog-bucket",
                      "direction": "INGRESS",
                      "name": "flowlog"
                    }
                  ],
                  "ips": [
                    "10.12.118.224"
                  ],
                  "lb_private_ips": [
                    "10.13.72.225/24"
                  ],
                  "listener_lan": "${ionoscloud_lan.example1.id}",
                  "name": "nlb with flowlog",
                  "target_lan": "${ionoscloud_lan.example2.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                listener_lan: ionoscloud_lan.example1.id
                target_lan: ionoscloud_lan.example2.id
        argumentDocs:
            action: '- (Required)[string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.'
            bucket: '- (Required)[string] Specifies the S3 IONOS bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.'
            central_logging: '- (Optional)[bool] Turn logging on and off for this product. Default value is ''false''.'
            datacenter_id: '- (Required)[string] A Datacenter''s UUID.'
            direction: '- (Required)[string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.'
            flowlog: '- (Optional)[list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.'
            ips: '- (Optional)[list] Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer reserved IP for the public load balancer and private IP for the private load balancer.'
            lb_private_ips: '- (Optional)[list] Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If user will not provide any IP then the system will generate one IP with /24 subnet.'
            listener_lan: '- (Required)[int] Id of the listening LAN. (inbound)'
            logging_lormat: '- (Optional)[string] Specifies the format of the logs.'
            name: '- (Required)[string] A name of that Network Load Balancer.'
            target_lan: '- (Required)[int] Id of the balanced private target LAN. (outbound)'
        importStatements:
            - terraform import ionoscloud_networkloadbalancer.my_networkloadbalancer {datacenter uuid}/{networkloadbalancer uuid}
    ionoscloud_networkloadbalancer_forwardingrule:
        subCategory: Network Load Balancer
        description: Creates and manages Network Load Balancer Forwarding Rule objects.
        name: ionoscloud_networkloadbalancer_forwardingrule
        title: networkloadbalancer_forwardingrule
        examples:
            - name: example
              manifest: |-
                {
                  "algorithm": "SOURCE_IP",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "listener_ip": "10.12.118.224",
                  "listener_port": "8081",
                  "name": "example",
                  "networkloadbalancer_id": "${ionoscloud_networkloadbalancer.example.id}",
                  "protocol": "TCP",
                  "targets": [
                    {
                      "health_check": [
                        {
                          "check": true,
                          "check_interval": 1000
                        }
                      ],
                      "ip": "22.231.2.2",
                      "port": "8080",
                      "proxy_protocol": "v1",
                      "weight": "123"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                networkloadbalancer_id: ionoscloud_networkloadbalancer.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example1: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 1",
                      "public": false
                    }
                ionoscloud_lan.example2: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 2",
                      "public": false
                    }
                ionoscloud_networkloadbalancer.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "ips": [
                        "10.12.118.224"
                      ],
                      "lb_private_ips": [
                        "10.13.72.225/24"
                      ],
                      "listener_lan": "${ionoscloud_lan.example1.id}",
                      "name": "example",
                      "target_lan": "${ionoscloud_lan.example2.id}"
                    }
            - name: example
              manifest: |-
                {
                  "algorithm": "SOURCE_IP",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "dynamic": {
                    "targets": [
                      {
                        "content": [
                          {
                            "health_check": [
                              {
                                "check": true,
                                "check_interval": 1000,
                                "maintenance": false
                              }
                            ],
                            "ip": "${targets.value}",
                            "port": "31234",
                            "weight": "1"
                          }
                        ],
                        "for_each": "${var.IPs}"
                      }
                    ]
                  },
                  "listener_ip": "10.12.118.224",
                  "listener_port": "8081",
                  "name": "example",
                  "networkloadbalancer_id": "${ionoscloud_networkloadbalancer.example.id}",
                  "protocol": "TCP"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                dynamic.content.ip: targets.value
                dynamic.for_each: var.IPs
                networkloadbalancer_id: ionoscloud_networkloadbalancer.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example1: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 1",
                      "public": false
                    }
                ionoscloud_lan.example2: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example 2",
                      "public": false
                    }
                ionoscloud_networkloadbalancer.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "ips": [
                        "10.12.118.224"
                      ],
                      "lb_private_ips": [
                        "10.13.72.225/24"
                      ],
                      "listener_lan": "${ionoscloud_lan.example1.id}",
                      "name": "example",
                      "target_lan": "${ionoscloud_lan.example2.id}"
                    }
        argumentDocs:
            algorithm: '- (Required)[string] Algorithm for the balancing.'
            check: '- (Optional)[boolean] Check specifies whether the target VM''s health is checked.'
            check_interval: '- (Optional)[int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.'
            client_timeout: '- (Optional)[int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.'
            connect_timeout: '- (Optional)[int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.'
            datacenter_id: '- (Required)[string] A Datacenter''s UUID.'
            health_check: '- (Optional) Health check attributes for Network Load Balancer forwarding rule.'
            ip: '- (Required)[string] IP of a balanced target VM.'
            listener_ip: '- (Required)[string] Listening IP. (inbound)'
            listener_port: '- (Required)[int] Listening port number. (inbound) (range: 1 to 65535)'
            maintenance: '- (Optional)[boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.'
            name: '- (Required)[string] A name of that Network Load Balancer forwarding rule.'
            natgateway_id: '- (Required)[string] Network Load Balancer''s UUID.'
            port: '- (Required)[int] Port of the balanced target service. (range: 1 to 65535).'
            protocol: '- (Required)[string] Protocol of the balancing.'
            proxy_protocol: '- (Optional)[string] The proxy protocol version. Accepted values are none, v1, v2, v2ssl. If unspecified, the default value of none is used.'
            retries: '- (Optional)[int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.'
            target_timeout: '- (Optional)[int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.'
            targets: '- (Required)[Set] Array of items in that collection.'
            weight: '- (Required)[int] Weight parameter is used to adjust the target VM''s weight relative to other target VMs.'
        importStatements:
            - terraform import ionoscloud_networkloadbalancer_forwardingrule.my_networkloadbalancer_forwardingrule {datacenter uuid}/{networkloadbalancer uuid}/{networkloadbalancer_forwardingrule uuid}
    ionoscloud_nfs_cluster:
        subCategory: Network File Storage
        description: Creates and manages Network File Storage (NFS) Cluster objects
        name: ionoscloud_nfs_cluster
        title: nfs_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "ip_address": "192.168.100.10/24",
                      "lan": "${ionoscloud_lan.nfs_lan.id}"
                    }
                  ],
                  "location": "de/txl",
                  "name": "test",
                  "nfs": [
                    {
                      "min_version": "4.2"
                    }
                  ],
                  "size": 2
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.nfs_dc.id
                connections.lan: ionoscloud_lan.nfs_lan.id
              dependencies:
                ionoscloud_datacenter.nfs_dc: |-
                    {
                      "description": "Datacenter Description",
                      "location": "de/txl",
                      "name": "NFS Datacenter",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.nfs_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "name": "Lan for NFS",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "ip_address": "${local.nfs_cluster_cidr}",
                      "lan": "${ionoscloud_lan.nfs_lan.id}"
                    }
                  ],
                  "location": "de/txl",
                  "name": "test",
                  "nfs": [
                    {
                      "min_version": "4.2"
                    }
                  ],
                  "size": 2
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.nfs_dc.id
                connections.ip_address: local.nfs_cluster_cidr
                connections.lan: ionoscloud_lan.nfs_lan.id
              dependencies:
                ionoscloud_datacenter.nfs_dc: |-
                    {
                      "description": "Datacenter Description",
                      "location": "de/txl",
                      "name": "NFS Datacenter",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.nfs_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "name": "Lan for NFS",
                      "public": false
                    }
                ionoscloud_server.nfs_server: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "image_name": "${data.ionoscloud_image.HDD_image.id}",
                      "image_password": "${random_password.password.result}",
                      "name": "Server for NFS",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "${ionoscloud_lan.nfs_lan.id}",
                          "name": "NIC A"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            connections: '- (Required) A list of connections for the Network File Storage cluster. You can specify only one connection. Connections are immutable. Each connection supports the following:'
            datacenter_id: '- (Required) The ID of the datacenter where the Network File Storage cluster is located.'
            de/fra: '- Frankfurt'
            de/txl: '- Berlin'
            ip_address: '- (Required) The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.'
            lan: '- (Required) The Private LAN to which the Network File Storage cluster must be connected.'
            location: '- (Required) The location where the Network File Storage cluster is located.'
            min_version: '- (Optional) The minimum supported version of the NFS cluster. Supported values: 4.2. Default is 4.2.'
            name: '- (Required) The name of the Network File Storage cluster.'
            nfs: '- (Optional) The NFS configuration for the Network File Storage cluster. Each NFS configuration supports the following:'
            size: '- (Required) The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is 2. The minimum value is 2 and the maximum value is 42.'
        importStatements:
            - terraform import ionoscloud_nfs_cluster.name {location}:{uuid}
    ionoscloud_nfs_share:
        subCategory: Network File Storage
        description: Creates and manages Network File Storage (NFS) Share objects on IonosCloud.
        name: ionoscloud_nfs_share
        title: nfs_share
        examples:
            - name: example
              manifest: |-
                {
                  "client_groups": [
                    {
                      "description": "Client Group 1",
                      "hosts": [
                        "10.234.62.123"
                      ],
                      "ip_networks": [
                        "10.234.50.0/24"
                      ],
                      "nfs": [
                        {
                          "squash": "all-anonymous"
                        }
                      ]
                    }
                  ],
                  "cluster_id": "${ionoscloud_nfs_cluster.example.id}",
                  "gid": 512,
                  "location": "de/txl",
                  "name": "example-share",
                  "quota": 512,
                  "uid": 512
                }
              references:
                cluster_id: ionoscloud_nfs_cluster.example.id
              dependencies:
                ionoscloud_datacenter.nfs_dc: |-
                    {
                      "description": "Datacenter Description",
                      "location": "de/txl",
                      "name": "NFS Datacenter",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.nfs_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                      "name": "Lan for NFS",
                      "public": false
                    }
                ionoscloud_nfs_cluster.example: |-
                    {
                      "connections": [
                        {
                          "datacenter_id": "${ionoscloud_datacenter.nfs_dc.id}",
                          "ip_address": "192.168.100.10/24",
                          "lan": "${ionoscloud_lan.nfs_lan.id}"
                        }
                      ],
                      "location": "de/txl",
                      "name": "test",
                      "nfs": [
                        {
                          "min_version": "4.2"
                        }
                      ],
                      "size": 2
                    }
        argumentDocs:
            all-anonymous: '- Map all users to anonymous uid.'
            client_groups: '- (Required) The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:'
            cluster_id: '- (Required) The ID of the Network File Storage Cluster.'
            description: '- (Optional) Optional description for the clients groups.'
            gid: '- (Optional) The group ID that will own the exported directory. If not set, anonymous (512) will be used.'
            hosts: '- (Required) A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.'
            ip_networks: '- (Required) The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.'
            location: '- (Required) The location of the Network File Storage Cluster.'
            name: '- (Required) The directory being exported.'
            nfs: '- (Required) NFS specific configurations. Each configuration includes:'
            none: '- No squash mode. no mapping,'
            quota: '- (Optional) The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using 0. Default is 0.'
            root-anonymous: '- Map root user to anonymous uid,'
            squash: '- (Required) The squash mode for the export. The squash mode can be:'
            uid: '- (Optional) The user ID that will own the exported directory. If not set, anonymous (512) will be used.'
        importStatements:
            - terraform import ionoscloud_nfs_share.name location:cluster_id:resource_id
    ionoscloud_nic:
        subCategory: Compute Engine
        description: Creates and manages Network Interface objects.
        name: ionoscloud_nic
        title: nic
        examples:
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "dhcp": true,
                  "firewall_active": true,
                  "firewall_type": "INGRESS",
                  "ips": [
                    "${ionoscloud_ipblock.example.ips[0]}",
                    "${ionoscloud_ipblock.example.ips[1]}"
                  ],
                  "lan": "${ionoscloud_lan.example.id}",
                  "name": "NIC",
                  "server_id": "${ionoscloud_server.example.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                lan: ionoscloud_lan.example.id
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 2
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Ubuntu-20.04",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "1"
                        }
                      ],
                      "ram": 1024,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "dhcp": true,
                  "dhcpv6": false,
                  "firewall_active": true,
                  "firewall_type": "INGRESS",
                  "ipv6_cidr_block": "${cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14)}",
                  "ipv6_ips": [
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),10)}",
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),20)}",
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),30)}"
                  ],
                  "lan": "${ionoscloud_lan.example.id}",
                  "name": "IPv6 Enabled NIC",
                  "server_id": "${ionoscloud_server.example.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                lan: ionoscloud_lan.example.id
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "ipv6_cidr_block": "${cidrsubnet(ionoscloud_datacenter.example.ipv6_cidr_block,8,2)}",
                      "name": "IPv6 Enabled LAN",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Ubuntu-20.04",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "1"
                        }
                      ],
                      "ram": 1024,
                      "volume": [
                        {
                          "disk_type": "SSD",
                          "name": "system",
                          "size": 14
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "dhcp": true,
                  "dhcpv6": false,
                  "firewall_active": true,
                  "firewall_type": "INGRESS",
                  "flowlog": [
                    {
                      "action": "ACCEPTED",
                      "bucket": "flowlog-bucket",
                      "direction": "INGRESS",
                      "name": "flowlog"
                    }
                  ],
                  "ipv6_cidr_block": "${cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14)}",
                  "ipv6_ips": [
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),10)}",
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),20)}",
                    "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,14),30)}"
                  ],
                  "lan": "${ionoscloud_lan.example.id}",
                  "name": "IPV6 and Flowlog Enabled NIC",
                  "server_id": "${ionoscloud_server.example.id}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                lan: ionoscloud_lan.example.id
                server_id: ionoscloud_server.example.id
        argumentDocs:
            action: '- (Required) Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.'
            bucket: '- (Required) Specifies the S3 IONOS bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            device_number: '- (Computed) The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.'
            dhcp: '- (Optional)[Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).'
            dhcpv6: '- (Optional)[Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).'
            direction: '- (Required) Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.'
            firewall_active: '- (Optional)[Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.'
            firewall_type: '- (Optional) [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS'
            flowlog: '- (Optional) Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.'
            id: '- (Computed) The ID of the NIC.'
            ips: '- (Optional)[list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.'
            ipv6_cidr_block: '- (Computed, Optional) Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.'
            ipv6_ips: '- (Optional)[list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC''s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC''s CIDR block.'
            lan: '- (Required)[integer] The LAN ID the NIC will sit on.'
            mac: '- (Computed) The MAC address of the NIC.'
            name: '- (Optional)[string] The name of the LAN.'
            pci_slot: '- (Computed) The PCI slot number of the Nic.'
            server_id: '- (Required)[string] The ID of a server.'
        importStatements:
            - terraform import ionoscloud_nic.mynic {datacenter uuid}/{server uuid}/{nic uuid}
    ionoscloud_pg_cluster:
        subCategory: Database as a Service - Postgres
        description: Creates and manages DbaaS Postgres Cluster objects.
        name: ionoscloud_pg_cluster
        title: ionoscloud_pg_cluster
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr": "192.168.100.1/24",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "cores": 4,
                  "credentials": [
                    {
                      "password": "strongPassword",
                      "username": "username"
                    }
                  ],
                  "display_name": "PostgreSQL_cluster",
                  "instances": 1,
                  "location": "${ionoscloud_datacenter.example.location}",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "postgres_version": "12",
                  "ram": 2048,
                  "storage_size": 2048,
                  "storage_type": "HDD",
                  "synchronization_mode": "ASYNCHRONOUS"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
                location: ionoscloud_datacenter.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "cidr": "${local.database_ip_cidr}",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "lan_id": "${ionoscloud_lan.example.id}"
                    }
                  ],
                  "cores": 4,
                  "credentials": [
                    {
                      "password": "${random_password.cluster_password.result}",
                      "username": "username"
                    }
                  ],
                  "display_name": "PostgreSQL_cluster",
                  "from_backup": [
                    {
                      "backup_id": "backup_uuid",
                      "recovery_target_time": "2021-12-06T13:54:08Z"
                    }
                  ],
                  "instances": 1,
                  "location": "${ionoscloud_datacenter.example.location}",
                  "maintenance_window": [
                    {
                      "day_of_the_week": "Sunday",
                      "time": "09:00:00"
                    }
                  ],
                  "postgres_version": "12",
                  "ram": 2048,
                  "storage_size": 2048,
                  "storage_type": "HDD",
                  "synchronization_mode": "ASYNCHRONOUS"
                }
              references:
                connections.cidr: local.database_ip_cidr
                connections.datacenter_id: ionoscloud_datacenter.example.id
                connections.lan_id: ionoscloud_lan.example.id
                credentials.password: random_password.cluster_password.result
                location: ionoscloud_datacenter.example.location
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter for testing dbaas cluster",
                      "location": "de/txl",
                      "name": "example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "example",
                      "public": false
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 2,
                      "cpu_family": "INTEL_SKYLAKE",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "Debian-10-cloud-init.qcow2",
                      "image_password": "password",
                      "name": "example",
                      "nic": [
                        {
                          "dhcp": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "SSD Standard",
                          "name": "example",
                          "size": 6
                        }
                      ]
                    }
                random_password.cluster_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            backup_id: '- (Required)[string] The unique ID of the backup you want to restore.'
            backup_location: '- (Optional)(Computed)[string] The S3 location where the backups will be stored. Possible values are: de, eu-south-2, eu-central-2. This attribute is immutable (disallowed in update requests).'
            cidr: '- (Required)[true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See Private IPs and Configuring the network.'
            connections: '- (Required)[string] Details about the network connection for your cluster.'
            cores: '- (Required)[int] The number of CPU cores per replica.'
            credentials: '- (Required)[string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).'
            datacenter_id: '- (Required)[true] The datacenter to connect your cluster to.'
            day_of_the_week: '- (Required)[string]'
            display_name: '- (Required)[string] The friendly name of your cluster.'
            dns_name: '- (Computed)[string] The DNS name pointing to your cluster.'
            from_backup: '- (Optional)[string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).'
            instances: '- (Required)[int] The total number of instances in the cluster (one master and n-1 standbys)'
            lan_id: '- (Required)[true] The LAN to connect your cluster to.'
            location: '- (Required)[string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: de/fra, de/txl, gb/lhr, es/vit, us/ewr, us/las. This attribute is immutable(disallowed in update requests).'
            maintenance_window: '- (Optional)(Computed)[string] A weekly 4 hour-long window, during which maintenance might occur'
            password: '- (Required)[string]'
            postgres_version: '- (Required)[string] The PostgreSQL version of your cluster.'
            ram: '- (Required)[int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.'
            recovery_target_time: '- (Optional)[string] If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.'
            storage_size: '- (Required)[int] The amount of storage per instance in MB. Has to be a multiple of 2048.'
            storage_type: '- (Required)[string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).'
            synchronization_mode: '- (Required) [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).'
            time: '- (Required)[string]'
            username: '- (Required)[string] The username for the initial postgres user. Some system usernames are restricted (e.g. "postgres", "admin", "standby")'
        importStatements:
            - terraform import ionoscloud_pg_cluster.mycluser {cluster uuid}
    ionoscloud_pg_database:
        subCategory: Database as a Service - Postgres
        description: Creates and manages DbaaS Postgres Database objects.
        name: ionoscloud_pg_database
        title: ionoscloud_pg_database
        examples:
            - name: example_pg_database
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_pg_cluster.example.id}",
                  "name": "exampledatabase",
                  "owner": "exampleuser"
                }
              references:
                cluster_id: ionoscloud_pg_cluster.example.id
            - name: example
              manifest: '{}'
        argumentDocs:
            cluster_id: '- (Required)[string] The unique ID of the cluster.'
            name: '- (Required)[string] The name of the database.'
            owner: '- (Required)[string] The owner of the database.'
        importStatements:
            - terraform import ionoscloud_pg_database.example {clusterId}/{name}
    ionoscloud_pg_user:
        subCategory: Database as a Service - Postgres
        description: Creates and manages DbaaS Postgres User objects.
        name: ionoscloud_pg_user
        title: ionoscloud_pg_user
        examples:
            - name: example_pg_user
              manifest: |-
                {
                  "cluster_id": "${ionoscloud_pg_cluster.example.id}",
                  "password": "${random_password.user_password.result}",
                  "username": "exampleuser"
                }
              references:
                cluster_id: ionoscloud_pg_cluster.example.id
                password: random_password.user_password.result
              dependencies:
                random_password.user_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
            - name: example
              manifest: '{}'
        argumentDocs:
            cluster_id: '- (Required)[string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.'
            is_system_user: '- (Computed)[bool] Describes whether this user is a system user or not. A system user cannot be updated or deleted.'
            password: '- (Required)[string] User password.'
            username: '- (Required)[string] Used for authentication. Updates to the value of the field force the cluster to be re-created.'
        importStatements:
            - terraform import ionoscloud_pg_user.example {clusterId}/{username}
    ionoscloud_private_crossconnect:
        subCategory: Compute Engine
        description: Creates and manages Cross Connections between virtual datacenters.
        name: ionoscloud_private_crossconnect
        title: private_crossconnect
        examples:
            - name: CrossConnectTestResource
              manifest: |-
                {
                  "description": "CrossConnectTestResource",
                  "name": "CrossConnectTestResource"
                }
              dependencies:
                ionoscloud_datacenter.dc1: |-
                    {
                      "location": "de/txl",
                      "name": "dc1"
                    }
                ionoscloud_datacenter.dc2: |-
                    {
                      "location": "de/txl",
                      "name": "dc2"
                    }
                ionoscloud_lan.dc1lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.dc1.id}",
                      "name": "dc1lan",
                      "pcc": "${ionoscloud_private_crossconnect.CrossConnectTestResource.id}",
                      "public": false
                    }
                ionoscloud_lan.dc2lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.dc2.id}",
                      "name": "dc2lan",
                      "pcc": "${ionoscloud_private_crossconnect.CrossConnectTestResource.id}",
                      "public": false
                    }
        argumentDocs:
            connectable datacenters: '- (Computed) A list containing all the connectable datacenters'
            datacenter_id: '- The id of the cross-connected datacenter'
            datacenter_name: '- The name of the cross-connected datacenter'
            description: '- (Optional)[string] A short description for the cross-connection.'
            id: '- The UUID of the connectable datacenter'
            lan_id: '- The id of the cross-connected LAN'
            lan_name: '- The name of the cross-connected LAN'
            location: '- The physical location of the connectable datacenter'
            name: '- (Required)[string] The name of the cross-connection.'
            peers: '- (Computed) Lists LAN''s joined to this cross connect'
        importStatements:
            - terraform import ionoscloud_private_crossconnect.demo {ionoscloud_private_crossconnect_uuid}
    ionoscloud_s3_bucket:
        subCategory: S3
        description: Creates and manages IonosCloud S3 Buckets.
        name: ionoscloud_s3_bucket
        title: s3_bucket
        examples:
            - name: example
              manifest: |-
                {
                  "force_destroy": true,
                  "name": "example",
                  "object_lock_enabled": true,
                  "region": "eu-central-3",
                  "tags": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "timeouts": [
                    {
                      "create": "10m",
                      "delete": "10m"
                    }
                  ]
                }
        argumentDocs:
            create: '- (Optional)[string] Time to wait for the bucket to be created. Default is 10m.'
            delete: '- (Optional)[string] Time to wait for the bucket to be deleted. Default is 10m.'
            force_destroy: '- (Optional)[bool] If true, the bucket and the contents of the bucket will be destroyed. Default is false.'
            id: '- (Computed) Name of the bucket'
            name: '- (Required)[string] The bucket name. [ 3 .. 63 ] characters'
            object_lock_enabled: '- (Optional)[bool] The object lock configuration status of the bucket. Must be true or false.'
            region: '- (Optional)[string] Specifies the Region where the bucket will be created. Please refer to the list of available regions'
            tags: '- (Optional) A mapping of tags to assign to the bucket.'
            timeouts: '- (Optional) Timeouts for this resource.'
        importStatements:
            - terraform import ionoscloud_s3_bucket.example example
    ionoscloud_s3_bucket_cors_configuration:
        subCategory: S3
        description: Manages Buckets cors_configuration on IonosCloud.
        name: ionoscloud_s3_bucket_cors_configuration
        title: s3_bucket_cors_configuration
        examples:
            - name: test
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "cors_rule": [
                    {
                      "allowed_headers": [
                        "*"
                      ],
                      "allowed_methods": [
                        "PUT",
                        "POST"
                      ],
                      "allowed_origins": [
                        "https://s3-website-test.hashicorp.com"
                      ],
                      "expose_headers": [
                        "ETag"
                      ],
                      "id": 1234,
                      "max_age_seconds": 3000
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            allowed_headers: '- (Optional)[list] Specifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header'
            allowed_methods: '- (Required)[list] An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, DELETE.'
            allowed_origins: '- (Required)[list] Specifies which origins are allowed to make requests to the resource.'
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            cors_rule: '- (Required)[block] A block of cors_rule as defined below.'
            expose_headers: '- (Optional)[list] Specifies which headers are exposed to the browser.'
            id: '- (Optional)[int] Container for the Contract Number of the owner'
            max_age_seconds: '- (Optional)[int] Specifies how long the results of a pre-flight request can be cached in seconds.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_cors_configuration.example example
    ionoscloud_s3_bucket_lifecycle_configuration:
        subCategory: S3
        description: Manages Buckets lifecycle configuration on IonosCloud.
        name: ionoscloud_s3_bucket_lifecycle_configuration
        title: s3_bucket_lifecycle_configuration
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "rule": [
                    {
                      "abort_incomplete_multipart_upload": [
                        {
                          "days_after_initiation": 1
                        }
                      ],
                      "expiration": [
                        {
                          "days": 90
                        }
                      ],
                      "id": "Logs delete",
                      "noncurrent_version_expiration": [
                        {
                          "noncurrent_days": 90
                        }
                      ],
                      "prefix": "/logs",
                      "status": "Enabled"
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            abort_incomplete_multipart_upload: '- (Optional)[block] Specifies the days since the initiation of an incomplete multipart upload that IONOS S3 Object Storage will wait before permanently removing all parts of the upload.'
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            date: '- (Optional)[string] Specifies the date after which you want the specific rule action to take effect.'
            days: '- (Optional)[int] Specifies the number of days after object creation when the object expires. Required if ''date'' is not specified.'
            days_after_initiation: '- (Optional)[int] Specifies the number of days after which IONOS S3 Object Storage aborts an incomplete multipart upload.'
            expiration: '- (Optional)[block]  A lifecycle rule for when an object expires.'
            expired_object_delete_marker: '- (Optional)[bool] Indicates whether IONOS S3 Object Storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no operation. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.'
            id: '- (Optional)[int] Container for the Contract Number of the owner'
            lifecycle_rule: '- (Required)[block] A block of lifecycle_rule as defined below.'
            noncurrent_days: '- (Optional)[int] Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.'
            noncurrent_version_expiration: '- (Optional)[block] A lifecycle rule for when non-current object versions expire.'
            prefix: '- (Required)[string] Prefix identifying one or more objects to which the rule applies.'
            status: '- (Required)[string] The lifecycle rule status. Valid values are Enabled or Disabled.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_lifecycle_configuration.example example
    ionoscloud_s3_bucket_object_lock_configuration:
        subCategory: S3
        description: Manages Buckets object_lock_configuration on IonosCloud.
        name: ionoscloud_s3_bucket_object_lock_configuration
        title: s3_bucket_object_lock_configuration
        examples:
            - name: test
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "object_lock_enabled": "Enabled",
                  "rule": [
                    {
                      "default_retention": [
                        {
                          "days": 1,
                          "mode": "GOVERNANCE"
                        }
                      ]
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example",
                      "object_lock_enabled": true
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            days: '- (Optional)[int] The default retention period of the bucket in days.'
            default_retention: '- (Required)[block] A block of default_retention as defined below.'
            mode: '- (Optional)[string] The default retention mode of the bucket. Can be GOVERNANCE or COMPLIANCE.'
            object_lock_enabled: '- (Required)[Optional] The object lock configuration status of the bucket. Must be Enabled.'
            rule: '- (Optional)[block] A block of rule as defined below.'
            years: '- (Optional)[int] The default retention period of the bucket in years.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_object_lock_configuration.example example
    ionoscloud_s3_bucket_policy:
        subCategory: S3
        description: Creates and manages IonosCloud S3 Buckets policies.
        name: ionoscloud_s3_bucket_policy
        title: s3_bucket_policy
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "policy": "${jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Sid = \"Delegate certain actions to another user\"\n        Action = [\n          \"s3:ListBucket\",\n          \"s3:PutObject\",\n          \"s3:GetObject\"\n        ]\n        Effect = \"Allow\"\n        Resource = [\n          \"arn:aws:s3:::example\",\n          \"arn:aws:s3:::example/*\"\n        ]\n        Condition = {\n          IpAddress = [\n            \"123.123.123.123/32\"\n          ]\n        }\n        Principal = [\n          \"arn:aws:iam:::user/31000000:9acd8251-2857-410e-b1fd-ca86462bdcec\"\n        ]\n      }\n    ]\n  })}"
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            policy: '- (Required)[string] The policy document. This is a JSON formatted string.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_policy.example example
    ionoscloud_s3_bucket_public_access_block:
        subCategory: S3
        description: Creates and manages IonosCloud S3 Public Access Block for buckets.
        name: ionoscloud_s3_bucket_public_access_block
        title: s3_bucket_public_access_block
        examples:
            - name: example
              manifest: |-
                {
                  "block_public_acls": false,
                  "block_public_policy": false,
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "ignore_public_acls": true,
                  "restrict_public_buckets": true
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
        argumentDocs:
            block_public_acls: '- (Optional)[bool] Indicates that access to the bucket via Access Control Lists (ACLs) that grant public access is blocked. In other words, ACLs that allow public access are not permitted.'
            block_public_policy: '- (Optional)[bool] Blocks public access to the bucket via bucket policies. Bucket policies that grant public access will not be allowed.'
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            ignore_public_acls: '- (Optional)[bool] Instructs the system to ignore any ACLs that grant public access. Even if ACLs are set to allow public access, they will be disregarded.'
            restrict_public_buckets: '- (Optional)[bool] Restricts access to buckets that have public policies. Buckets with policies that grant public access will have their access restricted.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_public_access_block.example example
    ionoscloud_s3_bucket_server_side_encryption_configuration:
        subCategory: S3
        description: Manages Buckets server side encryption configuration on IonosCloud.
        name: ionoscloud_s3_bucket_server_side_encryption_configuration
        title: s3_bucket_server_side_encryption_configuration
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "rule": [
                    {
                      "apply_server_side_encryption_by_default": [
                        {
                          "sse_algorithm": "AES256"
                        }
                      ]
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            apply_server_side_encryption_by_default: '- (Required)[block] Defines the default encryption settings.'
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            rule: '- (Required)[block] A block of rule as defined below.'
            sse_algorithm: '- (Required)[string] Server-side encryption algorithm to use. Valid values are ''AES256'''
        importStatements:
            - terraform import ionoscloud_s3_bucket_server_side_encryption_configuration.example example
    ionoscloud_s3_bucket_versioning:
        subCategory: S3
        description: Manages Buckets versioning on IonosCloud.
        name: ionoscloud_s3_bucket_versioning
        title: s3_bucket_versioning
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "versioning_configuration": [
                    {
                      "status": "Enabled"
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            mfa_delete: '- (Optional)[string] Specifies whether MFA delete is enabled or not. Can be Enabled or Disabled.'
            status: '- (Required)[string] The versioning state of the bucket. Can be Enabled or Suspended.'
            versioning_configuration: '- (Required)[block] A block of versioning_configuration as defined below.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_versioning.example example
    ionoscloud_s3_bucket_website_configuration:
        subCategory: S3
        description: Manages Buckets website configuration on IonosCloud.
        name: ionoscloud_s3_bucket_website_configuration
        title: s3_bucket_website_configuration
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "error_document": [
                    {
                      "key": "error.html"
                    }
                  ],
                  "index_document": [
                    {
                      "suffix": "index.html"
                    }
                  ],
                  "routing_rule": [
                    {
                      "condition": [
                        {
                          "key_prefix_equals": "docs/"
                        }
                      ],
                      "redirect": [
                        {
                          "replace_key_prefix_with": "documents/"
                        }
                      ]
                    }
                  ]
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example"
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored.'
            condition: '- (Required) A container for describing a condition that must be met for the specified redirect to apply.'
            error_document: '- (Optional) The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests'
            host_name: '- (Optional) Name of the host where requests will be redirected.'
            http_error_code_returned_equals: '- (Optional) The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.'
            http_redirect_code: '- (Optional) The HTTP redirect code to use on the response. Not required if one of the siblings is present.'
            index_document: '- (Optional) Container for the Suffix element.'
            key: '- (Required) The object key'
            key_prefix_equals: '- (Optional) The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.'
            protocol: '- (Optional) Protocol to use (http, https).'
            redirect: '- (Required) Container for the redirect information.'
            redirect_all_requests_to: '- (Optional) Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.'
            replace_key_prefix_with: '- (Optional) The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.'
            replace_key_with: '- (Optional) The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.'
            routing_rule: '- (Optional) A container for describing a condition that must be met for the specified redirect to apply.'
            suffix: '- (Required) A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.'
        importStatements:
            - terraform import ionoscloud_s3_bucket_website_configuration.example example
    ionoscloud_s3_key:
        subCategory: User Management
        description: Creates and manages IonosCloud S3 keys.
        name: ionoscloud_s3_key
        title: s3_key
        examples:
            - name: example
              manifest: |-
                {
                  "active": true,
                  "user_id": "${ionoscloud_user.example.id}"
                }
              references:
                user_id: ionoscloud_user.example.id
              dependencies:
                ionoscloud_user.example: |-
                    {
                      "administrator": false,
                      "email": "unique@email.com",
                      "first_name": "example",
                      "force_sec_auth": false,
                      "last_name": "example",
                      "password": "abc123-321CBA"
                    }
        argumentDocs:
            active: '- (Optional)[boolean] Whether the S3 is active / enabled or not - Please keep in mind this is only required on create. Default value in true'
            secret_key: '- (Computed)  The S3 Secret key.'
            user_id: '- (Required)[string] The UUID of the user owning the S3 Key.'
        importStatements:
            - terraform import ionoscloud_s3_key.demo {userId}/{s3KeyId}
    ionoscloud_s3_object:
        subCategory: S3
        description: Creates and manages IonosCloud S3 Objects.
        name: ionoscloud_s3_object
        title: s3_object
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "cache_control": "no-cache",
                  "content": "body",
                  "content_disposition": "attachment",
                  "content_encoding": "identity",
                  "content_language": "en-GB",
                  "content_type": "text/plain",
                  "expires": "2024-10-07T12:34:56Z",
                  "force_destroy": true,
                  "key": "object",
                  "metadata": {
                    "mk": "mv"
                  },
                  "object_lock_legal_hold": "ON",
                  "object_lock_mode": "GOVERNANCE",
                  "object_lock_retain_until_date": "2024-10-07T12:34:56Z",
                  "server_side_encryption": "AES256",
                  "tags": {
                    "tk": "tv"
                  },
                  "website_redirect": "https://www.ionos.com"
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example",
                      "object_lock_enabled": true
                    }
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.example.name}",
                  "key": "file-object",
                  "source": "path/to/file"
                }
              references:
                bucket: ionoscloud_s3_bucket.example.name
              dependencies:
                ionoscloud_s3_bucket.example: |-
                    {
                      "name": "example",
                      "object_lock_enabled": true
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.'
            cache_control: '- (Optional)[string] Specifies caching behavior along the request/reply chain.'
            content: '- (Optional)[string] Inline content of the object.'
            content_disposition: '- (Optional)[string] Specifies presentational information for the object.'
            content_encoding: '- (Optional)[string] Specifies what content encodings have been applied to the object.'
            content_language: '- (Optional)[string] The natural language or languages of the intended audience for the object.'
            content_type: '- (Optional)[string] A standard MIME type describing the format of the contents.'
            etag: '- (Computed)[string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.'
            expires: '- (Optional)[string] The date and time at which the object is no longer cacheable.'
            force_destroy: '- (Optional)[bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is false.'
            key: '- (Required)[string] The key of the object. Must be at least 1 character long.'
            metadata: '- (Optional)[map] A map of metadata to store with the object in IONOS S3 Object Storage. Metadata keys must be lowercase alphanumeric characters.'
            mfa: '- (Optional) [string]The concatenation of the authentication device''s serial number, a space, and the value displayed on your authentication device.'
            object_lock_legal_hold: '- (Optional)[string] Indicates whether a legal hold is in effect for the object. Valid values are ON and OFF.'
            object_lock_mode: '- (Optional)[string] The object lock mode that you want to apply to the object. Valid values are GOVERNANCE and COMPLIANCE.'
            object_lock_retain_until_date: '- (Optional)[string] The date and time when the object lock retention expires.Must be in RFC3999 format'
            request_payer: '- (Optional)[string] Confirms that the requester knows that they will be charged for the request.'
            server_side_encryption: '- (Optional)[string] The server-side encryption algorithm used when storing this object in IONOS S3 Object Storage. Valid value is AES256.'
            server_side_encryption_context: '- (Optional)[string] Specifies the IONOS S3 Object Storage Encryption Context for object encryption.'
            server_side_encryption_customer_algorithm: '- (Optional)[string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.'
            server_side_encryption_customer_key: '- (Optional)[string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.'
            server_side_encryption_customer_key_md5: '- (Optional)[string] Specifies the 128-bit MD5 digest of the encryption key.'
            source: '- (Optional)[string] The path to the file to upload.'
            storage_class: '- (Optional)[string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.'
            tags: '- (Optional)[map] The tag-set for the object.'
            version_id: '- (Computed)[string] The version of the object.'
            website_redirect: '- (Optional)[string] Redirects requests for this object to another object in the same bucket or to an external URL.'
        importStatements:
            - terraform import ionoscloud_s3_object.example example/object
    ionoscloud_s3_object_copy:
        subCategory: S3
        description: Creates a copy of an object that is already stored in IONOS S3 Object Storage.
        name: ionoscloud_s3_object_copy
        title: s3_object_copy
        examples:
            - name: example
              manifest: |-
                {
                  "bucket": "${ionoscloud_s3_bucket.target.name}",
                  "key": "example",
                  "source": "${ionoscloud_s3_bucket.source.name}/${ionoscloud_s3_object.source.key}"
                }
              references:
                bucket: ionoscloud_s3_bucket.target.name
              dependencies:
                ionoscloud_s3_bucket.source: |-
                    {
                      "name": "source"
                    }
                ionoscloud_s3_bucket.target: |-
                    {
                      "name": "target"
                    }
                ionoscloud_s3_object.source: |-
                    {
                      "bucket": "${ionoscloud_s3_bucket.source.name}",
                      "content": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                      "content_type": "application/octet-stream",
                      "key": "source_object"
                    }
        argumentDocs:
            bucket: '- (Required)[string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.'
            cache_control: '- (Optional)[string] Specifies caching behavior along the request/reply chain.'
            content_disposition: '- (Optional)[string] Specifies presentational information for the object.'
            content_encoding: '- (Optional)[string] Specifies what content encodings have been applied to the object.'
            content_language: '- (Optional)[string] The natural language or languages of the intended audience for the object.'
            content_type: '- (Optional)[string] A standard MIME type describing the format of the contents.'
            copy_source_if_match: '- (Optional)[string] Copies the object if its entity tag (ETag) matches the specified tag.'
            copy_source_if_modified_since: '- (Optional)[string] Copies the object if it has been modified since the specified time.'
            copy_source_if_none_match: '- (Optional)[string] Copies the object if its entity tag (ETag) is different than the specified ETag.'
            copy_source_if_unmodified_since: '- (Optional)[string] Copies the object if it hasn''t been modified since the specified time.'
            etag: '- (Computed)[string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.'
            expires: '- (Optional)[string] The date and time at which the object is no longer cacheable.'
            force_destroy: '- (Optional)[bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is false.'
            key: '- (Required)[string] The key of the object. Must be at least 1 character long.'
            last_modified: '- (Computed)[string] The date and time at which the object was last modified.'
            metadata: '- (Optional)[map] A map of metadata to store with the object in IONOS S3 Object Storage. Metadata keys must be lowercase alphanumeric characters.'
            metadata_directive: '- (Optional)[string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.'
            object_lock_legal_hold: '- (Optional)[string] Indicates whether a legal hold is in effect for the object. Valid values are ON and OFF.'
            object_lock_mode: '- (Optional)[string] The object lock mode that you want to apply to the object. Valid values are GOVERNANCE and COMPLIANCE.'
            object_lock_retain_until_date: '- (Optional)[string] The date and time when the object lock retention expires.Must be in RFC3999 format'
            server_side_encryption: '- (Optional)[string] The server-side encryption algorithm used when storing this object in IONOS S3 Object Storage. Valid value is AES256.'
            server_side_encryption_context: '- (Optional)[string] Specifies the IONOS S3 Object Storage Encryption Context for object encryption.'
            server_side_encryption_customer_algorithm: '- (Optional)[string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.'
            server_side_encryption_customer_key: '- (Optional)[string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.'
            server_side_encryption_customer_key_md5: '- (Optional)[string] Specifies the 128-bit MD5 digest of the encryption key.'
            source: '- (Optional)[string] The source of the object to be copied'
            source_customer_algorithm: '- (Optional)[string] Specifies the algorithm used for source object encryption. Valid value is AES256.'
            source_customer_key: '- (Optional)[string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.'
            source_customer_key_md5: '- (Optional)[string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.'
            storage_class: '- (Optional)[string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.'
            tagging_directive: '- (Optional)[string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.'
            tags: '- (Optional)[map] The tag-set for the object.'
            version_id: '- (Computed)[string] The version of the object.'
            website_redirect: '- (Optional)[string] Redirects requests for this object to another object in the same bucket or to an external URL.'
        importStatements: []
    ionoscloud_server:
        subCategory: Compute Engine
        description: Creates and manages IonosCloud Server objects.
        name: ionoscloud_server
        title: server
        examples:
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_1",
                  "cores": 1,
                  "cpu_family": "INTEL_XEON",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "${data.ionoscloud_image.example.name}",
                  "image_password": "${random_password.server_image_password.result}",
                  "label": [
                    {
                      "key": "labelkey1",
                      "value": "labelvalue1"
                    },
                    {
                      "key": "labelkey2",
                      "value": "labelvalue2"
                    }
                  ],
                  "name": "Server Example",
                  "nic": [
                    {
                      "dhcp": true,
                      "firewall": [
                        {
                          "name": "SSH",
                          "port_range_end": 22,
                          "port_range_start": 22,
                          "protocol": "TCP",
                          "source_ip": "${ionoscloud_ipblock.example.ips[2]}",
                          "source_mac": "00:0a:95:9d:68:17",
                          "target_ip": "${ionoscloud_ipblock.example.ips[3]}",
                          "type": "EGRESS"
                        }
                      ],
                      "firewall_active": true,
                      "firewall_type": "BIDIRECTIONAL",
                      "ips": [
                        "${ionoscloud_ipblock.example.ips[0]}",
                        "${ionoscloud_ipblock.example.ips[1]}"
                      ],
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "system"
                    }
                  ],
                  "ram": 1024,
                  "type": "ENTERPRISE",
                  "volume": [
                    {
                      "availability_zone": "ZONE_1",
                      "bus": "VIRTIO",
                      "disk_type": "SSD Standard",
                      "name": "system",
                      "size": 5,
                      "user_data": "foo"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_name: data.ionoscloud_image.example.name
                image_password: random_password.server_image_password.result
                nic.firewall.source_ip: ionoscloud_ipblock.example.ips[2]
                nic.firewall.target_ip: ionoscloud_ipblock.example.ips[3]
                nic.lan: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_1",
                  "cores": 1,
                  "cpu_family": "INTEL_XEON",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "ubuntu:latest",
                  "image_password": "${random_password.server_image_password.result}",
                  "name": "Resource Server Test",
                  "nic": [
                    {
                      "dhcp": true,
                      "dhcpv6": true,
                      "firewall": [
                        {
                          "name": "SSH",
                          "port_range_end": 22,
                          "port_range_start": 22,
                          "protocol": "TCP",
                          "source_ip": "${ionoscloud_ipblock.webserver_ipblock.ips[2]}",
                          "source_mac": "00:0a:95:9d:68:17",
                          "target_ip": "${ionoscloud_ipblock.webserver_ipblock.ips[3]}",
                          "type": "EGRESS"
                        }
                      ],
                      "firewall_active": true,
                      "firewall_type": "BIDIRECTIONAL",
                      "ips": [
                        "${ionoscloud_ipblock.webserver_ipblock.ips[0]}",
                        "${ionoscloud_ipblock.webserver_ipblock.ips[1]}"
                      ],
                      "ipv6_cidr_block": "${cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,24)}",
                      "ipv6_ips": [
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,24),10)}",
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,24),20)}",
                        "${cidrhost(cidrsubnet(ionoscloud_lan.example.ipv6_cidr_block,16,24),30)}"
                      ],
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "system"
                    }
                  ],
                  "ram": 1024,
                  "type": "ENTERPRISE",
                  "volume": [
                    {
                      "availability_zone": "ZONE_1",
                      "bus": "VIRTIO",
                      "disk_type": "SSD Standard",
                      "name": "system",
                      "size": 5,
                      "user_data": "foo"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_password: random_password.server_image_password.result
                nic.firewall.source_ip: ionoscloud_ipblock.webserver_ipblock.ips[2]
                nic.firewall.target_ip: ionoscloud_ipblock.webserver_ipblock.ips[3]
                nic.lan: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "us/las",
                      "name": "Resource Server Test"
                    }
                ionoscloud_ipblock.webserver_ipblock: |-
                    {
                      "location": "us/las",
                      "name": "webserver_ipblock",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "ipv6_cidr_block": "${cidrsubnet(ionoscloud_datacenter.example.ipv6_cidr_block,8,10)}",
                      "name": "public",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_2",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "ubuntu:latest",
                  "image_password": "${random_password.server_image_password.result}",
                  "name": "Server Example",
                  "nic": [
                    {
                      "dhcp": true,
                      "firewall_active": true,
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "Nic Example"
                    }
                  ],
                  "template_uuid": "${data.ionoscloud_template.example.id}",
                  "type": "CUBE",
                  "volume": [
                    {
                      "disk_type": "DAS",
                      "licence_type": "LINUX",
                      "name": "Volume Example"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_password: random_password.server_image_password.result
                nic.lan: ionoscloud_lan.example.id
                template_uuid: data.ionoscloud_template.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "location": "de/txl",
                      "name": "Datacenter Example"
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: test
              manifest: |-
                {
                  "cores": 1,
                  "cpu_family": "${ionoscloud_datacenter.cdrom.cpu_architecture[0].cpu_family}",
                  "datacenter_id": "${ionoscloud_datacenter.cdrom.id}",
                  "name": "ubuntu_latest_from_cdrom",
                  "nic": [
                    {
                      "dhcp": true,
                      "firewall_active": false,
                      "lan": 1
                    }
                  ],
                  "ram": 1024,
                  "type": "ENTERPRISE",
                  "volume": [
                    {
                      "disk_type": "HDD",
                      "licence_type": "OTHER",
                      "name": "hdd0",
                      "size": 50
                    }
                  ]
                }
              references:
                cpu_family: ionoscloud_datacenter.cdrom.cpu_architecture[0].cpu_family
                datacenter_id: ionoscloud_datacenter.cdrom.id
              dependencies:
                ionoscloud_datacenter.cdrom: |-
                    {
                      "description": "CDROM image test",
                      "location": "de/txl",
                      "name": "CDROM Test",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.public: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.cdrom.id}",
                      "name": "Uplink",
                      "public": true
                    }
        argumentDocs:
            availability_zone: '- (Optional)[string] The availability zone in which the server should exist. E.g: AUTO, ZONE_1, ZONE_2. This property is immutable.'
            boot_cdrom: '- DEPRECATED Please refer to ionoscloud_server_boot_device_selection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.'
            boot_image: '- (Optional)[string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.'
            boot_volume: '- (Computed) The associated boot volume.'
            cores: '- (Optional)(Computed)[integer] Number of server CPU cores.'
            cpu_family: '- (Optional)[string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            firewall: '- (Optional) Allows to define firewall rules inline in the server. See the Firewall section.'
            firewallrule_id: '- (Computed) The associated firewall rule.'
            firewallrule_ids: '- (Computed) The associated firewall rules.'
            image_name: '- (Optional)[string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.'
            image_password: '- (Optional)[string] Required if ssh_key_path is not provided.'
            inline_volume_ids: '- (Computed) A list with the IDs for the volumes that are defined inside the server resource.'
            key: '- (Required)[string] The key of the label.'
            label: '- (Optional)[set] A label can be seen as an object with only two required fields: key and value, both of the string type. Please check the example presented above to see how a label can be used in the plan. A server can have multiple labels.'
            licence_type: '- (Optional)[string] Sets the OS type of the server.'
            name: '- (Required)[string] The name of the server.'
            nic: '- (Optional) See the Nic section.'
            primary_ip: '- (Computed) The associated IP address.'
            primary_nic: '- (Computed) The associated NIC.'
            ram: '- (Optional)(Computed)[integer] The amount of memory for the server in MB.'
            ssh_key_path: '- (Optional)[list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if image_password is not provided. Does not support ~ expansion to homedir in the given path. This property is immutable.'
            ssh_keys: '- (Optional)[list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support ~ expansion to homedir in the given path.'
            template_uuid: '- (Optional)[string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource'
            type: '- (Optional)(Computed)[string] Server usages: ENTERPRISE or CUBE. This property is immutable.'
            value: '- (Required)[string] The value of the label.'
            vm_state: '- (Optional)[string] Sets the power state of the server. E.g: RUNNING, SHUTOFF or SUSPENDED. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.'
            volume: '- (Required) See the Volume section.'
        importStatements:
            - terraform import ionoscloud_server.myserver {datacenter uuid}/{server uuid}
            - terraform import ionoscloud_server.myserver {datacenter uuid}/{server uuid}/{primary nic id}/{firewall rule id}
    ionoscloud_server_boot_device_selection:
        subCategory: ""
        description: Manages the selection of boot devices for IonosCloud Server objects.
        name: ionoscloud_server_boot_device_selection
        title: ionoscloud_server_boot_device_selection
        examples:
            - name: example
              manifest: |-
                {
                  "boot_device_id": "${ionoscloud_volume.example.id}",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "server_id": "${ionoscloud_server.example.id}"
                }
              references:
                boot_device_id: ionoscloud_volume.example.id
                datacenter_id: ionoscloud_datacenter.example.id
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_2",
                      "cores": 2,
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "Nic Example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "availability_zone": "AUTO",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "Inline Updated",
                          "size": 20
                        }
                      ]
                    }
                ionoscloud_volume.example: |-
                    {
                      "availability_zone": "AUTO",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "disk_type": "HDD",
                      "image_name": "debian:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "External 1",
                      "server_id": "${ionoscloud_server.example.id}",
                      "size": 10
                    }
            - name: example
              manifest: |-
                {
                  "boot_device_id": "${ionoscloud_server.example.inline_volume_ids[0]}",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "server_id": "${ionoscloud_server.example.id}"
                }
              references:
                boot_device_id: ionoscloud_server.example.inline_volume_ids[0]
                datacenter_id: ionoscloud_datacenter.example.id
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_2",
                      "cores": 2,
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "Nic Example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "availability_zone": "AUTO",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "Inline Updated",
                          "size": 20
                        }
                      ]
                    }
                ionoscloud_volume.example: |-
                    {
                      "availability_zone": "AUTO",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "disk_type": "HDD",
                      "image_name": "debian:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "External 1",
                      "server_id": "${ionoscloud_server.example.id}",
                      "size": 10
                    }
            - name: example
              manifest: |-
                {
                  "boot_device_id": "${data.ionoscloud_image.example.id}",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "server_id": "${ionoscloud_server.example.inline_volume_ids[0]}"
                }
              references:
                boot_device_id: data.ionoscloud_image.example.id
                datacenter_id: ionoscloud_datacenter.example.id
                server_id: ionoscloud_server.example.inline_volume_ids[0]
              dependencies:
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_2",
                      "cores": 2,
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "Nic Example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "availability_zone": "AUTO",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "Inline Updated",
                          "size": 20
                        }
                      ]
                    }
                ionoscloud_volume.example: |-
                    {
                      "availability_zone": "AUTO",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "disk_type": "HDD",
                      "image_name": "debian:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "External 1",
                      "server_id": "${ionoscloud_server.example.id}",
                      "size": 10
                    }
            - name: example
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "server_id": "${ionoscloud_server.example.inline_volume_ids[0]}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                server_id: ionoscloud_server.example.inline_volume_ids[0]
              dependencies:
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_2",
                      "cores": 2,
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall_active": true,
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "Nic Example"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "availability_zone": "AUTO",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "Inline volume",
                          "size": 20
                        }
                      ]
                    }
                ionoscloud_volume.example: |-
                    {
                      "availability_zone": "AUTO",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "disk_type": "HDD",
                      "image_name": "debian:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "External 1",
                      "server_id": "${ionoscloud_server.example.id}",
                      "size": 10
                    }
        argumentDocs:
            boot_device_id: |-
                - (Optional)[string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
                Note: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from DCD.
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            server_id: '- (Required)[string] The ID of a server.'
        importStatements: []
    ionoscloud_share:
        subCategory: User Management
        description: Creates and manages share objects.
        name: ionoscloud_share
        title: share
        examples:
            - name: example
              manifest: |-
                {
                  "edit_privilege": true,
                  "group_id": "${ionoscloud_group.example.id}",
                  "resource_id": "${ionoscloud_datacenter.example.id}",
                  "share_privilege": false
                }
              references:
                group_id: ionoscloud_group.example.id
                resource_id: ionoscloud_datacenter.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_group.example: |-
                    {
                      "access_activity_log": true,
                      "create_backup_unit": true,
                      "create_datacenter": true,
                      "create_internet_access": true,
                      "create_k8s_cluster": true,
                      "create_pcc": true,
                      "create_snapshot": true,
                      "name": "Group Example",
                      "reserve_ip": true,
                      "s3_privilege": true
                    }
        argumentDocs:
            edit_privilege: '- (Optional)[Boolean] The group has permission to edit privileges on this resource.'
            group_id: '- (Required)[string] The ID of the specific group containing the resource to update.'
            resource_id: '- (Required)[string] The ID of the specific resource to update.'
            share_privilege: '- (Optional)[Boolean] The group has permission to share this resource.'
        importStatements:
            - terraform import ionoscloud_share.myshare {group uuid}/{resource uuid}
    ionoscloud_snapshot:
        subCategory: Compute Engine
        description: Creates and manages snapshot objects.
        name: ionoscloud_snapshot
        title: snapshot
        examples:
            - name: test_snapshot
              manifest: |-
                {
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "name": "Snapshot Example",
                  "volume_id": "${ionoscloud_server.example.boot_volume}"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                volume_id: ionoscloud_server.example.boot_volume
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "${data.ionoscloud_image.example.id}",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "ram": 1024,
                      "type": "ENTERPRISE",
                      "volume": [
                        {
                          "availability_zone": "ZONE_1",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "system",
                          "size": 5,
                          "user_data": "foo"
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            cpu_hot_plug: '- (Optional)(Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.'
            cpu_hot_unplug: '-  Is capable of CPU hot unplug (no reboot required)'
            datacenter_id: '- (Required)[string] The ID of the Virtual Data Center.'
            description: '- (Optional)(Computed)[string] Human readable description'
            disc_scsi_hot_plug: '-  Is capable of SCSI drive hot plug (no reboot required)'
            disc_scsi_hot_unplug: '-  Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.'
            disc_virtio_hot_plug: '- (Optional)(Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.'
            disc_virtio_hot_unplug: '- (Optional)(Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.'
            licence_type: '- (Optional)(Computed)[string] OS type of this Snapshot'
            location: '- Location of that image/snapshot'
            name: '- (Required)[string] The name of the snapshot.'
            nic_hot_plug: '- (Optional)(Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.'
            nic_hot_unplug: '- (Optional)(Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.'
            ram_hot_plug: '- (Optional)(Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.'
            ram_hot_unplug: '-  Is capable of memory hot unplug (no reboot required)'
            sec_auth_protection: '- Boolean value representing if the snapshot requires extra protection e.g. two factor protection'
            size: '- The size of the image in GB'
            volume_id: '- (Required)[string] The ID of the specific volume to take the snapshot from.'
        importStatements:
            - terraform import ionoscloud_snapshot.mysnapshot {snapshot uuid}
    ionoscloud_target_group:
        subCategory: Application Load Balancer
        description: Creates and manages IonosCloud Target Group.
        name: ionoscloud_target_group
        title: target_group
        examples:
            - name: example
              manifest: |-
                {
                  "algorithm": "ROUND_ROBIN",
                  "health_check": [
                    {
                      "check_interval": 50000,
                      "check_timeout": 5000,
                      "retries": 2
                    }
                  ],
                  "http_health_check": [
                    {
                      "match_type": "STATUS_CODE",
                      "method": "GET",
                      "negate": true,
                      "path": "/.",
                      "regex": true,
                      "response": "200"
                    }
                  ],
                  "name": "Target Group Example",
                  "protocol": "HTTP",
                  "protocol_version": "HTTP1",
                  "targets": [
                    {
                      "health_check_enabled": true,
                      "ip": "22.231.2.2",
                      "maintenance_enabled": false,
                      "port": "8080",
                      "proxy_protocol": "v2ssl",
                      "weight": "1"
                    },
                    {
                      "health_check_enabled": false,
                      "ip": "22.231.2.3",
                      "maintenance_enabled": false,
                      "port": "8081",
                      "proxy_protocol": "v2",
                      "weight": "124"
                    }
                  ]
                }
        argumentDocs:
            algorithm: '- (Required)[string] Balancing algorithm.'
            check_interval: '- (Optional)[int] The interval in milliseconds between consecutive health checks; default is 2000.'
            check_timeout: '- (Optional)[int] The maximum time in milliseconds to wait for a target to respond to a check. For target VMs with ''Check Interval'' set, the lesser of the two  values is used once the TCP connection is established.'
            health_check: '- (Optional) Health check attributes for Target Group.'
            health_check_enabled: '- (Optional)[bool] Makes the target available only if it accepts periodic health check TCP connection attempts; when turned off, the target is considered always available. The health check only consists of a connection attempt to the address and port of the target. Default is True.'
            http_health_check: '- (Optional) Http health check attributes for Target Group'
            ip: '- (Required)[string] The IP of the balanced target VM.'
            maintenance_enabled: '- (Optional)[bool] Maintenance mode prevents the target from receiving balanced traffic.'
            match_type: '- (Required)[string]'
            method: '- (Optional)[string] The method for the HTTP health check.'
            name: '- (Required)[string] The name of the target group.'
            negate: '- (Optional)[bool]'
            path: '- (Optional)[string] The path (destination URL) for the HTTP health check request; the default is /.'
            port: '- (Required)[int] The port of the balanced target service; valid range is 1 to 65535.'
            protocol: '- (Required)[string] Balancing protocol.'
            protocol_version: '- (Optional)[string] The forwarding protocol version. Value is ignored when protocol is not ''HTTP''.'
            proxy_protocol: '- (Optional)[string] The proxy protocol version. Accepted values are none, v1, v2, v2ssl. If unspecified, the default value of none is used.'
            regex: '- (Optional)[bool]'
            response: '- (Required)[string] The response returned by the request, depending on the match type.'
            retries: '- (Optional)[int] The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535, and default is three reconnection.'
            targets: '- (Required)[list] Array of items in the collection'
            weight: '- (Required)[int] Traffic is distributed in proportion to target weight, relative to the combined weight of all targets. A target with higher weight receives a greater share of traffic. Valid range is 0 to 256 and default is 1; targets with weight of 0 do not participate in load balancing but still accept persistent connections. It is best use values in the middle of the range to leave room for later adjustments.'
        importStatements:
            - terraform import ionoscloud_target_group.myTargetGroup {target group uuid}
    ionoscloud_user:
        subCategory: User Management
        description: Creates and manages user objects.
        name: ionoscloud_user
        title: user
        examples:
            - name: example
              manifest: |-
                {
                  "active": true,
                  "administrator": false,
                  "email": "unique@email.com",
                  "first_name": "example",
                  "force_sec_auth": false,
                  "group_ids": [
                    "${ionoscloud_group.group1.id}",
                    "${ionoscloud_group.group2.id}",
                    "${ionoscloud_group.group3.id}"
                  ],
                  "last_name": "example",
                  "password": "${random_password.user_password.result}"
                }
              references:
                password: random_password.user_password.result
              dependencies:
                ionoscloud_group.group1: |-
                    {
                      "access_activity_log": false,
                      "create_datacenter": true,
                      "create_k8s_cluster": true,
                      "create_snapshot": true,
                      "name": "group1",
                      "reserve_ip": true
                    }
                ionoscloud_group.group2: |-
                    {
                      "access_activity_log": false,
                      "create_datacenter": true,
                      "create_k8s_cluster": true,
                      "create_snapshot": true,
                      "name": "group2",
                      "reserve_ip": true
                    }
                ionoscloud_group.group3: |-
                    {
                      "access_activity_log": false,
                      "create_datacenter": true,
                      "create_snapshot": true,
                      "name": "group3",
                      "reserve_ip": true
                    }
                random_password.user_password: |-
                    {
                      "length": 16,
                      "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
                      "special": true
                    }
        argumentDocs:
            active: '- (Optional)[Boolean] Indicates if the user is active'
            administrator: '- (Required)[Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.'
            email: '- (Required)[string] An e-mail address for the user.'
            first_name: '- (Required)[string] A first name for the user.'
            force_sec_auth: '- (Required)[Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).'
            group_ids: '- (Optional)[Set] The groups that this user will be a member of'
            last_name: '- (Required)[string] A last name for the user.'
            password: '- (Required)[string] A password for the user.'
            s3_canonical_user_id: '- (Computed) Canonical (S3) id of the user for a given identity'
            sec_auth_active: '- (Optional)[Boolean] Indicates if secure authentication is active for the user or not. it can not be used in create requests - can be used in update'
        importStatements:
            - terraform import ionoscloud_user.myuser {user uuid}
    ionoscloud_vcpu_server:
        subCategory: Compute Engine
        description: Creates and manages IonosCloud VCPU Server objects.
        name: ionoscloud_vcpu_server
        title: ionoscloud_vcpu_server
        examples:
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_1",
                  "cores": 1,
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "image_name": "${data.ionoscloud_image.example.id}",
                  "image_password": "${random_password.server_image_password.result}",
                  "label": [
                    {
                      "key": "labelkey1",
                      "value": "labelvalue1"
                    },
                    {
                      "key": "labelkey2",
                      "value": "labelvalue2"
                    }
                  ],
                  "name": "VCPU Server Example",
                  "nic": [
                    {
                      "dhcp": true,
                      "firewall": [
                        {
                          "name": "SSH",
                          "port_range_end": 22,
                          "port_range_start": 22,
                          "protocol": "TCP",
                          "source_ip": "${ionoscloud_ipblock.example.ips[2]}",
                          "source_mac": "00:0a:95:9d:68:17",
                          "target_ip": "${ionoscloud_ipblock.example.ips[3]}",
                          "type": "EGRESS"
                        }
                      ],
                      "firewall_active": true,
                      "firewall_type": "BIDIRECTIONAL",
                      "ips": [
                        "${ionoscloud_ipblock.example.ips[0]}",
                        "${ionoscloud_ipblock.example.ips[1]}"
                      ],
                      "lan": "${ionoscloud_lan.example.id}",
                      "name": "system"
                    }
                  ],
                  "ram": 1024,
                  "volume": [
                    {
                      "availability_zone": "ZONE_1",
                      "bus": "VIRTIO",
                      "disk_type": "SSD Standard",
                      "name": "system",
                      "size": 5,
                      "user_data": "foo"
                    }
                  ]
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_name: data.ionoscloud_image.example.id
                image_password: random_password.server_image_password.result
                nic.firewall.source_ip: ionoscloud_ipblock.example.ips[2]
                nic.firewall.target_ip: ionoscloud_ipblock.example.ips[3]
                nic.lan: ionoscloud_lan.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "de/txl",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            availability_zone: '- (Optional)[string] The availability zone in which the server should exist. E.g: AUTO, ZONE_1, ZONE_2. This property is immutable.'
            boot_cdrom: '- DEPRECATED Please refer to ionoscloud_server_boot_device_selection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.'
            boot_image: '- (Optional)[string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.'
            boot_volume: '- (Computed) The associated boot volume.'
            cores: '- (Optional)[integer] Number of server CPU cores.'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            firewall: '- (Optional) Allows to define firewall rules inline in the server. See the Firewall section.'
            firewallrule_id: '- (Computed) The associated firewall rule.'
            firewallrule_ids: '- (Computed) The associated firewall rules.'
            image_name: '- (Optional)[string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.'
            image_password: '- (Optional)[string] The password for the image.'
            inline_volume_ids: '- (Computed) A list with the IDs for the volumes that are defined inside the server resource.'
            label: '- (Optional) A label can be seen as an object with only two required fields: key and value, both of the string type. Please check the example presented above to see how a label can be used in the plan. A server can have multiple labels.'
            licence_type: '- (Optional)[string] Sets the OS type of the server.'
            name: '- (Required)[string] The name of the server.'
            nic: '- (Optional) See the Nic section.'
            primary_ip: '- (Computed) The associated IP address.'
            primary_nic: '- (Computed) The associated NIC.'
            ram: '- (Optional)[integer] The amount of memory for the server in MB.'
            ssh_keys: '- (Optional)[list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support ~ expansion to homedir in the given path.'
            volume: '- (Required) See the Volume section.'
        importStatements:
            - terraform import ionoscloud_vcpu_server.myserver {datacenter uuid}/{server uuid}
            - terraform import ionoscloud_vcpu_server.myserver {datacenter uuid}/{server uuid}/{primary nic id}/{firewall rule id}
    ionoscloud_volume:
        subCategory: Compute Engine
        description: Creates and manages IonosCloud Volume objects.
        name: ionoscloud_volume
        title: volume
        examples:
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_1",
                  "bus": "VIRTIO",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "disk_type": "SSD Standard",
                  "image_name": "${data.ionoscloud_image.example.name}",
                  "image_password": "${random_password.volume_image_password.result}",
                  "name": "Volume Example",
                  "server_id": "${ionoscloud_server.example.id}",
                  "size": 5,
                  "user_data": "foo"
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                image_name: data.ionoscloud_image.example.name
                image_password: random_password.volume_image_password.result
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "${data.ionoscloud_image.example.name}",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall": [
                            {
                              "name": "SSH",
                              "port_range_end": 22,
                              "port_range_start": 22,
                              "protocol": "TCP",
                              "source_ip": "${ionoscloud_ipblock.example.ips[2]}",
                              "source_mac": "00:0a:95:9d:68:17",
                              "target_ip": "${ionoscloud_ipblock.example.ips[3]}",
                              "type": "EGRESS"
                            }
                          ],
                          "firewall_active": true,
                          "firewall_type": "BIDIRECTIONAL",
                          "ips": [
                            "${ionoscloud_ipblock.example.ips[0]}",
                            "${ionoscloud_ipblock.example.ips[1]}"
                          ],
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "system"
                        }
                      ],
                      "ram": 1024,
                      "type": "ENTERPRISE",
                      "volume": [
                        {
                          "availability_zone": "ZONE_1",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "system",
                          "size": 5,
                          "user_data": "foo"
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
                random_password.volume_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
            - name: example
              manifest: |-
                {
                  "availability_zone": "ZONE_1",
                  "bus": "VIRTIO",
                  "datacenter_id": "${ionoscloud_datacenter.example.id}",
                  "disk_type": "SSD Standard",
                  "licence_type": "OTHER",
                  "name": "Another Volume Example",
                  "server_id": "${ionoscloud_server.example.id}",
                  "size": 5
                }
              references:
                datacenter_id: ionoscloud_datacenter.example.id
                server_id: ionoscloud_server.example.id
              dependencies:
                ionoscloud_datacenter.example: |-
                    {
                      "description": "Datacenter Description",
                      "location": "us/las",
                      "name": "Datacenter Example",
                      "sec_auth_protection": false
                    }
                ionoscloud_ipblock.example: |-
                    {
                      "location": "${ionoscloud_datacenter.example.location}",
                      "name": "IP Block Example",
                      "size": 4
                    }
                ionoscloud_lan.example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "name": "Lan Example",
                      "public": true
                    }
                ionoscloud_server.example: |-
                    {
                      "availability_zone": "ZONE_1",
                      "cores": 1,
                      "cpu_family": "INTEL_XEON",
                      "datacenter_id": "${ionoscloud_datacenter.example.id}",
                      "image_name": "${data.ionoscloud_image.example.name}",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "Server Example",
                      "nic": [
                        {
                          "dhcp": true,
                          "firewall": [
                            {
                              "name": "SSH",
                              "port_range_end": 22,
                              "port_range_start": 22,
                              "protocol": "TCP",
                              "source_ip": "${ionoscloud_ipblock.example.ips[2]}",
                              "source_mac": "00:0a:95:9d:68:17",
                              "target_ip": "${ionoscloud_ipblock.example.ips[3]}",
                              "type": "EGRESS"
                            }
                          ],
                          "firewall_active": true,
                          "firewall_type": "BIDIRECTIONAL",
                          "ips": [
                            "${ionoscloud_ipblock.example.ips[0]}",
                            "${ionoscloud_ipblock.example.ips[1]}"
                          ],
                          "lan": "${ionoscloud_lan.example.id}",
                          "name": "system"
                        }
                      ],
                      "ram": 1024,
                      "type": "ENTERPRISE",
                      "volume": [
                        {
                          "availability_zone": "ZONE_1",
                          "bus": "VIRTIO",
                          "disk_type": "SSD Standard",
                          "name": "system",
                          "size": 5,
                          "user_data": "foo"
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
                random_password.volume_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            availability_zone: '- (Optional)[string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable'
            backup_unit_id: '- (Optional)[string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either ''public image'' or ''imageAlias'' in conjunction with this property.'
            boot_server: '- (Computed)[string] The UUID of the attached server.'
            bus: '- (Optional)[Boolean] The bus type of the volume: VIRTIO or IDE.'
            cpu_hot_plug: '- (Computed)[string] Is capable of CPU hot plug (no reboot required)'
            datacenter_id: '- (Required)[string] The ID of a Virtual Data Center.'
            device_number: '- (Computed) The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.'
            disc_virtio_hot_plug: '- (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required)'
            disc_virtio_hot_unplug: '- (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.'
            disk_type: '- (Required)[string] The volume type: HDD or SSD. This property is immutable.'
            image: '- (Computed) The image or snapshot UUID.'
            image_alias: '- (Computed) The image alias.'
            image_name: '- (Optional)[string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.'
            image_password: '- (Optional)[string] Required if sshkey_path is not provided.'
            licence_type: '- (Optional)[string] Required if image_name is not provided.'
            name: '- (Optional)[string] The name of the volume.'
            nic_hot_plug: '- (Computed)[string] Is capable of nic hot plug (no reboot required)'
            nic_hot_unplug: '- (Computed)[string] Is capable of nic hot unplug (no reboot required)'
            pci_slot: '- (Computed) The PCI slot number of the storage volume. Null for volumes not mounted to any VM.'
            ram_hot_plug: '- (Computed)[string] Is capable of memory hot plug (no reboot required)'
            server_id: '- (Required)[string] The ID of a server.'
            size: '-  (Required)[integer] The size of the volume in GB.'
            ssh_key_path: '-  (Optional)[list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if image_password is not provided. This property is immutable.'
            ssh_keys: '-  (Optional)[list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if image_password is not provided. This property is immutable.'
            sshkey: '- (Computed) The associated public SSH key.'
            user_data: '- (Optional)[string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.'
        importStatements:
            - terraform import ionoscloud_volume.myvolume {datacenter uuid}/{server uuid}/{volume uuid}
    ionoscloud_vpn_ipsec_gateway:
        subCategory: VPN
        description: IPSec Gateway
        name: ionoscloud_vpn_ipsec_gateway
        title: ionoscloud_vpn_ipsec_gateway
        examples:
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "ipv4_cidr": "192.168.100.10/24",
                      "lan_id": "${ionoscloud_lan.test_lan.id}"
                    }
                  ],
                  "description": "This gateway connects site A to VDC X.",
                  "gateway_ip": "${ionoscloud_ipblock.test_ipblock.ips[0]}",
                  "location": "de/fra",
                  "name": "ipsec_gateway_basic",
                  "version": "IKEv2"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.test_datacenter.id
                connections.lan_id: ionoscloud_lan.test_lan.id
                gateway_ip: ionoscloud_ipblock.test_ipblock.ips[0]
              dependencies:
                ionoscloud_datacenter.test_datacenter: |-
                    {
                      "location": "de/fra",
                      "name": "test_vpn_gateway_basic"
                    }
                ionoscloud_ipblock.test_ipblock: |-
                    {
                      "location": "de/fra",
                      "name": "test_ipblock_basic",
                      "size": 1
                    }
                ionoscloud_lan.test_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "name": "test_lan_basic",
                      "public": false
                    }
            - name: example
              manifest: |-
                {
                  "connections": [
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "ipv4_cidr": "${local.ipv4_cidr_block}",
                      "ipv6_cidr": "${local.ipv6_cidr_block}",
                      "lan_id": "${ionoscloud_lan.test_lan.id}"
                    }
                  ],
                  "description": "This gateway connects site A to VDC X.",
                  "gateway_ip": "${ionoscloud_ipblock.test_ipblock.ips[0]}",
                  "location": "de/fra",
                  "name": "ipsec-gateway",
                  "version": "IKEv2"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.test_datacenter.id
                connections.ipv4_cidr: local.ipv4_cidr_block
                connections.ipv6_cidr: local.ipv6_cidr_block
                connections.lan_id: ionoscloud_lan.test_lan.id
                gateway_ip: ionoscloud_ipblock.test_ipblock.ips[0]
              dependencies:
                ionoscloud_datacenter.test_datacenter: |-
                    {
                      "location": "de/fra",
                      "name": "vpn_gateway_test"
                    }
                ionoscloud_ipblock.test_ipblock: |-
                    {
                      "location": "de/fra",
                      "name": "test_ipblock",
                      "size": 1
                    }
                ionoscloud_lan.test_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "ipv6_cidr_block": "${local.lan_ipv6_cidr_block}",
                      "name": "test_lan",
                      "public": false
                    }
                ionoscloud_server.test_server: |-
                    {
                      "cores": 1,
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "test_server",
                      "nic": [
                        {
                          "dhcp": true,
                          "dhcpv6": false,
                          "firewall_active": false,
                          "ipv6_cidr_block": "${local.ipv6_cidr_block}",
                          "lan": "${ionoscloud_lan.test_lan.id}",
                          "name": "test_nic"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "HDD",
                          "licence_type": "OTHER",
                          "name": "test_volume",
                          "size": 10
                        }
                      ]
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            connections: |-
                - (Required)[list] The network connection for your gateway. Note: all connections must belong to the
                same datacenter. Minimum items: 1. Maximum items: 10.
            datacenter_id: '- (Required)[string] The datacenter to connect your VPN Gateway to.'
            description: '- (Optional)[string] The human-readable description of the IPSec Gateway.'
            gateway_ip: |-
                - (Required)[string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
                the same datacenter as the connections.
            ipv4_cidr: |-
                - (Required)[string] Describes the private ipv4 subnet in your LAN that should be accessible by the
                VPN Gateway. Note: this should be the subnet already assigned to the LAN
            ipv6_cidr: |-
                - (Optional)[string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
                Gateway. Note: this should be the subnet already assigned to the LAN
            lan_id: '- (Required)[string] The numeric LAN ID to connect your VPN Gateway to.'
            location: |-
                - (Required)[string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
                gb/lhr, us/ewr, us/las, us/mci, fr/par
            name: '- (Required)[string] The name of the IPSec Gateway.'
            version: |-
                - (Required)[string] The IKE version that is permitted for the VPN tunnels. Default: IKEv2. Possible
                values: IKEv2.
        importStatements: []
    ionoscloud_vpn_ipsec_tunnel:
        subCategory: VPN
        description: IPSec Gateway Tunnel
        name: ionoscloud_vpn_ipsec_tunnel
        title: ionoscloud_vpn_ipsec_tunnel
        examples:
            - name: example
              manifest: |-
                {
                  "auth": [
                    {
                      "method": "PSK",
                      "psk_key": "X2wosbaw74M8hQGbK3jCCaEusR6CCFRa"
                    }
                  ],
                  "cloud_network_cidrs": [
                    "0.0.0.0/0"
                  ],
                  "description": "Allows local subnet X to connect to virtual network Y.",
                  "esp": [
                    {
                      "diffie_hellman_group": "16-MODP4096",
                      "encryption_algorithm": "AES256",
                      "integrity_algorithm": "SHA256",
                      "lifetime": 3600
                    }
                  ],
                  "gateway_id": "${ionoscloud_vpn_ipsec_gateway.example.id}",
                  "ike": [
                    {
                      "diffie_hellman_group": "16-MODP4096",
                      "encryption_algorithm": "AES256",
                      "integrity_algorithm": "SHA256",
                      "lifetime": 86400
                    }
                  ],
                  "location": "de/fra",
                  "name": "example-tunnel",
                  "peer_network_cidrs": [
                    "1.2.3.4/32"
                  ],
                  "remote_host": "vpn.mycompany.com"
                }
              references:
                gateway_id: ionoscloud_vpn_ipsec_gateway.example.id
              dependencies:
                ionoscloud_datacenter.test_datacenter: |-
                    {
                      "location": "de/fra",
                      "name": "test_vpn_gateway_basic"
                    }
                ionoscloud_ipblock.test_ipblock: |-
                    {
                      "location": "de/fra",
                      "name": "test_ipblock_basic",
                      "size": 1
                    }
                ionoscloud_lan.test_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "name": "test_lan_basic",
                      "public": false
                    }
                ionoscloud_vpn_ipsec_gateway.example: |-
                    {
                      "connections": [
                        {
                          "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                          "ipv4_cidr": "192.168.100.10/24",
                          "lan_id": "${ionoscloud_lan.test_lan.id}"
                        }
                      ],
                      "description": "This gateway connects site A to VDC X.",
                      "gateway_ip": "${ionoscloud_ipblock.test_ipblock.ips[0]}",
                      "location": "de/fra",
                      "name": "ipsec_gateway_basic",
                      "version": "IKEv2"
                    }
            - name: example
              manifest: |-
                {
                  "auth": [
                    {
                      "method": "PSK",
                      "psk_key": "X2wosbaw74M8hQGbK3jCCaEusR6CCFRa"
                    }
                  ],
                  "cloud_network_cidrs": [
                    "0.0.0.0/0"
                  ],
                  "description": "Allows local subnet X to connect to virtual network Y.",
                  "esp": [
                    {
                      "diffie_hellman_group": "16-MODP4096",
                      "encryption_algorithm": "AES256",
                      "integrity_algorithm": "SHA256",
                      "lifetime": 3600
                    }
                  ],
                  "gateway_id": "${ionoscloud_vpn_ipsec_gateway.example.id}",
                  "ike": [
                    {
                      "diffie_hellman_group": "16-MODP4096",
                      "encryption_algorithm": "AES256",
                      "integrity_algorithm": "SHA256",
                      "lifetime": 86400
                    }
                  ],
                  "location": "de/fra",
                  "name": "example-tunnel",
                  "peer_network_cidrs": [
                    "1.2.3.4/32"
                  ],
                  "remote_host": "vpn.mycompany.com"
                }
              references:
                gateway_id: ionoscloud_vpn_ipsec_gateway.example.id
              dependencies:
                ionoscloud_datacenter.test_datacenter: |-
                    {
                      "location": "de/fra",
                      "name": "vpn_gateway_test"
                    }
                ionoscloud_ipblock.test_ipblock: |-
                    {
                      "location": "de/fra",
                      "name": "test_ipblock",
                      "size": 1
                    }
                ionoscloud_lan.test_lan: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "ipv6_cidr_block": "${local.lan_ipv6_cidr_block}",
                      "name": "test_lan",
                      "public": false
                    }
                ionoscloud_server.test_server: |-
                    {
                      "cores": 1,
                      "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                      "image_name": "ubuntu:latest",
                      "image_password": "${random_password.server_image_password.result}",
                      "name": "test_server",
                      "nic": [
                        {
                          "dhcp": true,
                          "dhcpv6": false,
                          "firewall_active": false,
                          "ipv6_cidr_block": "${local.ipv6_cidr_block}",
                          "lan": "${ionoscloud_lan.test_lan.id}",
                          "name": "test_nic"
                        }
                      ],
                      "ram": 2048,
                      "volume": [
                        {
                          "disk_type": "HDD",
                          "licence_type": "OTHER",
                          "name": "test_volume",
                          "size": 10
                        }
                      ]
                    }
                ionoscloud_vpn_ipsec_gateway.example: |-
                    {
                      "connections": [
                        {
                          "datacenter_id": "${ionoscloud_datacenter.test_datacenter.id}",
                          "ipv4_cidr": "${local.ipv4_cidr_block}",
                          "ipv6_cidr": "${local.ipv6_cidr_block}",
                          "lan_id": "${ionoscloud_lan.test_lan.id}"
                        }
                      ],
                      "description": "This gateway connects site A to VDC X.",
                      "gateway_ip": "${ionoscloud_ipblock.test_ipblock.ips[0]}",
                      "location": "de/fra",
                      "name": "ipsec-gateway",
                      "version": "IKEv2"
                    }
                random_password.server_image_password: |-
                    {
                      "length": 16,
                      "special": false
                    }
        argumentDocs:
            auth: |-
                - (Required)[string] Properties with all data needed to define IPSec Authentication. Minimum items: 1. Maximum
                items: 1.
            cloud_network_cidrs: |-
                - (Required)[list] The network CIDRs on the "Left" side that are allowed to connect to the IPSec
                tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1.
                Maximum items: 20.
            description: '- (Optional)[string] The human-readable description of your IPSec Gateway Tunnel.'
            diffie_hellman_group: |-
                - (Optional)[string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
                values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
                Default value: 16-MODP4096.
            encryption_algorithm: |-
                - (Optional)[string] The encryption algorithm to use for IPSec Encryption. Possible
                values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
                AES256-CCM-12. Default value: AES256.
            esp: '- (Required)[list] Settings for the IPSec SA (ESP) phase. Minimum items: 1. Maximum items: 1.'
            gateway_id: '- (Required)[string] The ID of the IPSec Gateway that the tunnel belongs to.'
            ike: '- (Required)[list] Settings for the initial security exchange phase. Minimum items: 1. Maximum items: 1.'
            integrity_algorithm: |-
                - (Optional)[string] The integrity algorithm to use for IPSec Encryption. Possible
                values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
            lifetime: |-
                - (Optional)[string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
                Default value: 86400.
            location: |-
                - (Required)[string] The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit,
                gb/lhr, us/ewr, us/las, us/mci, fr/par
            method: |-
                - (Optional)[string] The authentication method to use for IPSec Authentication. Possible values: PSK.
                Default value: PSK.
            name: '- (Required)[string] The name of the IPSec Gateway Tunnel.'
            peer_network_cidrs: |-
                - (Required)[list] The network CIDRs on the "Right" side that are allowed to connect to the IPSec
                tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1. Maximum items: 20.
            psk_key: |-
                - (Optional)[string] The pre-shared key to use for IPSec Authentication. Note: Required if method is
                PSK.
            remote_host: '- (Required)[string] The remote peer host fully qualified domain name or public IPV4 IP to connect to.'
        importStatements: []
    ionoscloud_vpn_wireguard_gateway:
        subCategory: VPN
        description: Creates and manages IonosCloud VPN Wireguard Gateway objects.
        name: ionoscloud_vpn_wireguard_gateway
        title: vpn_wireguard_gateway
        examples:
            - name: gateway
              manifest: |-
                {
                  "connections": [
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "ipv4_cidr": "192.168.1.108/24",
                      "lan_id": "${ionoscloud_lan.lan_example.id}"
                    }
                  ],
                  "description": "description",
                  "gateway_ip": "${ionoscloud_ipblock.ipblock_example.ips[0]}",
                  "interface_ipv4_cidr": "192.168.1.100/24",
                  "location": "de/fra",
                  "name": "gateway_example",
                  "private_key": "private"
                }
              references:
                connections.datacenter_id: ionoscloud_datacenter.datacenter_example.id
                connections.lan_id: ionoscloud_lan.lan_example.id
                gateway_ip: ionoscloud_ipblock.ipblock_example.ips[0]
              dependencies:
                ionoscloud_datacenter.datacenter_example: |-
                    {
                      "location": "de/fra",
                      "name": "datacenter_example"
                    }
                ionoscloud_ipblock.ipblock_example: |-
                    {
                      "location": "de/fra",
                      "name": "ipblock_example",
                      "size": 1
                    }
                ionoscloud_lan.lan_example: |-
                    {
                      "datacenter_id": "${ionoscloud_datacenter.datacenter_example.id}",
                      "name": "lan_example"
                    }
        argumentDocs:
            connections: '- (Required)[Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.'
            datacenter_id: '- (Required)[String] The ID of the datacenter where the WireGuard Gateway is located.'
            description: '- (Optional)[String] A description of the WireGuard Gateway.'
            endpoint: '- (Optional, Block) The endpoint configuration for the WireGuard Gateway. This block supports fields documented below.'
            gateway_ip: '- (Required)[String] The IP address of the WireGuard Gateway.'
            interface_ipv4_cidr: '- (Optional)[String] The IPv4 CIDR for the WireGuard Gateway interface.'
            interface_ipv6_cidr: '- (Optional)[String] The IPv6 CIDR for the WireGuard Gateway interface.'
            ipv4_cidr: '- (Required)[String] The IPv4 CIDR for the WireGuard Gateway connection.'
            ipv6_cidr: '- (Optional)[String] The IPv6 CIDR for the WireGuard Gateway connection.'
            lan_id: '- (Required)[String] The ID of the LAN where the WireGuard Gateway is connected.'
            location: '- (Required)[String] The location of the WireGuard Gateway.'
            name: '- (Required)[String] The name of the WireGuard Gateway.'
            private_key: '- (Required)[String] The private key for the WireGuard Gateway. To be created with the wg utility.'
            public_key: '- (Computed)[String] The public key for the WireGuard Gateway.'
            status: '- (Computed)[String] The current status of the WireGuard Gateway.'
        importStatements:
            - terraform import ionoscloud_vpn_wireguard_gateway.example_gateway location:id
    ionoscloud_vpn_wireguard_peer:
        subCategory: VPN
        description: Creates and manages IonosCloud VPN Wireguard Gateway Peer objects.
        name: ionoscloud_vpn_wireguard_peer
        title: vpn_wireguard_peer
        examples:
            - name: example
              manifest: |-
                {
                  "allowed_ips": [
                    "10.0.0.0/8",
                    "192.168.1.0/24"
                  ],
                  "description": "An example WireGuard peer",
                  "endpoint": [
                    {
                      "host": "1.2.3.4",
                      "port": 51820
                    }
                  ],
                  "gateway_id": "your gateway id here",
                  "location": "de/fra",
                  "name": "example-gateway",
                  "public_key": "examplePublicKey=="
                }
        argumentDocs:
            allowed_ips: '- (Required)[list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.'
            description: '- (Optional)[string] A description of the WireGuard Gateway.'
            endpoint: '- (Optional)[block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:'
            gateway_id: '- (Required)[string] The ID of the WireGuard Gateway that the Peer will connect to.'
            host: '- (Required)[string] The hostname or IPV4 address that the WireGuard Server will connect to.'
            location: '- (Required)[string] The location of the WireGuard Gateway.'
            name: '- (Required)[string] The human-readable name of the WireGuard Gateway.'
            port: '- (Optional)[int] The port that the WireGuard Server will connect to. Defaults to 51820.'
            public_key: '- (Required)[string] The public key for the WireGuard Gateway.'
            status: '- The current status of the WireGuard Gateway Peer.'
        importStatements:
            - terraform import ionoscloud_vpn_wireguard_peer.example <gateway_id>:<peer_id>
