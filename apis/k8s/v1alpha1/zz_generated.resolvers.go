// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	v1alpha11 "github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1"
	v1alpha1 "github.com/ionos-cloud/provider-upjet-ionoscloud/apis/objectstorage/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Cluster.
func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.S3Buckets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Buckets[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.S3Buckets[i3].NameRef,
			Selector:     mg.Spec.ForProvider.S3Buckets[i3].NameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Buckets[i3].Name")
		}
		mg.Spec.ForProvider.S3Buckets[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Buckets[i3].NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.S3Buckets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.S3Buckets[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.S3Buckets[i3].NameRef,
			Selector:     mg.Spec.InitProvider.S3Buckets[i3].NameSelector,
			To: reference.To{
				List:    &v1alpha1.BucketList{},
				Managed: &v1alpha1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.S3Buckets[i3].Name")
		}
		mg.Spec.InitProvider.S3Buckets[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.S3Buckets[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this NodePool.
func (mg *NodePool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DatacenterIDRef,
		Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha11.DatacenterList{},
			Managed: &v1alpha11.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.K8SClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.K8SClusterIDRef,
		Selector:     mg.Spec.ForProvider.K8SClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.K8SClusterID")
	}
	mg.Spec.ForProvider.K8SClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.K8SClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.K8SVersion),
		Extract:      resource.ExtractParamPath("k8s_version", false),
		Reference:    mg.Spec.ForProvider.K8SVersionRef,
		Selector:     mg.Spec.ForProvider.K8SVersionSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.K8SVersion")
	}
	mg.Spec.ForProvider.K8SVersion = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.K8SVersionRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Lans); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Lans[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Lans[i3].IDRef,
			Selector:     mg.Spec.ForProvider.Lans[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha11.LanList{},
				Managed: &v1alpha11.Lan{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Lans[i3].ID")
		}
		mg.Spec.ForProvider.Lans[i3].ID = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Lans[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DatacenterIDRef,
		Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha11.DatacenterList{},
			Managed: &v1alpha11.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.K8SClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.K8SClusterIDRef,
		Selector:     mg.Spec.InitProvider.K8SClusterIDSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.K8SClusterID")
	}
	mg.Spec.InitProvider.K8SClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.K8SClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.K8SVersion),
		Extract:      resource.ExtractParamPath("k8s_version", false),
		Reference:    mg.Spec.InitProvider.K8SVersionRef,
		Selector:     mg.Spec.InitProvider.K8SVersionSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.K8SVersion")
	}
	mg.Spec.InitProvider.K8SVersion = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.K8SVersionRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Lans); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Lans[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Lans[i3].IDRef,
			Selector:     mg.Spec.InitProvider.Lans[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha11.LanList{},
				Managed: &v1alpha11.Lan{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Lans[i3].ID")
		}
		mg.Spec.InitProvider.Lans[i3].ID = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Lans[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}
