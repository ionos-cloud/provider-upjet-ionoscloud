// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsRecordInitParameters struct {

	// [string] The content of the DNS Record.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// [bool] Indicates if the DNS Record is active or not. Default is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// [string] The name of the DNS Record.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [int] The priority for the DNS Record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// [int] Time to live for the DNS Record. Default is 3600.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// [string] The type of the DNS Record, can have one of these values: A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC. More details about types can be found here.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// [string] The DNS Zone ID in which the DNS Record will be created.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/dns/v1alpha1.DnsZone
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a DnsZone in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a DnsZone in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type DnsRecordObservation struct {

	// [string] The content of the DNS Record.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// [bool] Indicates if the DNS Record is active or not. Default is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Fully qualified domain name
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The name of the DNS Record.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [int] The priority for the DNS Record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// [int] Time to live for the DNS Record. Default is 3600.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// [string] The type of the DNS Record, can have one of these values: A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC. More details about types can be found here.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DnsRecordParameters struct {

	// [string] The content of the DNS Record.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// [bool] Indicates if the DNS Record is active or not. Default is true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// [string] The name of the DNS Record.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [int] The priority for the DNS Record.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// [int] Time to live for the DNS Record. Default is 3600.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// [string] The type of the DNS Record, can have one of these values: A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC. More details about types can be found here.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// [string] The DNS Zone ID in which the DNS Record will be created.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/dns/v1alpha1.DnsZone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a DnsZone in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a DnsZone in dns to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// DnsRecordSpec defines the desired state of DnsRecord
type DnsRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsRecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DnsRecordInitParameters `json:"initProvider,omitempty"`
}

// DnsRecordStatus defines the observed state of DnsRecord.
type DnsRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DnsRecord is the Schema for the DnsRecords API. Creates and manages DNS Record objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type DnsRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   DnsRecordSpec   `json:"spec"`
	Status DnsRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsRecordList contains a list of DnsRecords
type DnsRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsRecord `json:"items"`
}

// Repository type metadata.
var (
	DnsRecord_Kind             = "DnsRecord"
	DnsRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsRecord_Kind}.String()
	DnsRecord_KindAPIVersion   = DnsRecord_Kind + "." + CRDGroupVersion.String()
	DnsRecord_GroupVersionKind = CRDGroupVersion.WithKind(DnsRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsRecord{}, &DnsRecordList{})
}
