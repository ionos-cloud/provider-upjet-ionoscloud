// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionsInitParameters struct {

	// The ID of the datacenter where the Network File Storage cluster is located.
	// The datacenter to connect your instance to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	// The IP address and subnet for your instance.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The Private LAN to which the Network File Storage cluster must be connected.
	// The numeric LAN ID to connect your instance to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Lan
	Lan *string `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.Reference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.Selector `json:"lanSelector,omitempty" tf:"-"`
}

type ConnectionsObservation struct {

	// The ID of the datacenter where the Network File Storage cluster is located.
	// The datacenter to connect your instance to.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	// The IP address and subnet for your instance.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The Private LAN to which the Network File Storage cluster must be connected.
	// The numeric LAN ID to connect your instance to.
	Lan *string `json:"lan,omitempty" tf:"lan,omitempty"`
}

type ConnectionsParameters struct {

	// The ID of the datacenter where the Network File Storage cluster is located.
	// The datacenter to connect your instance to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	// The IP address and subnet for your instance.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// The Private LAN to which the Network File Storage cluster must be connected.
	// The numeric LAN ID to connect your instance to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Lan
	// +kubebuilder:validation:Optional
	Lan *string `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.Reference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.Selector `json:"lanSelector,omitempty" tf:"-"`
}

type NFSClusterInitParameters struct {

	// A list of connections for the Network File Storage cluster. You can specify only one connection. Connections are immutable. Each connection supports the following:
	// The network connections for the Network File Storage Cluster.
	Connections *ConnectionsInitParameters `json:"connections,omitempty" tf:"connections,omitempty"`

	// The location where the Network File Storage cluster is located.
	// The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl'
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The NFS configuration for the Network File Storage cluster. Each NFS configuration supports the following:
	NFS *NFSInitParameters `json:"nfs,omitempty" tf:"nfs,omitempty"`

	// The name of the Network File Storage cluster.
	// The name of the Network File Storage Cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is 2. The minimum value is 2 and the maximum value is 42.
	// The size of the Network File Storage Cluster. Minimum size is 2.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type NFSClusterObservation struct {

	// A list of connections for the Network File Storage cluster. You can specify only one connection. Connections are immutable. Each connection supports the following:
	// The network connections for the Network File Storage Cluster.
	Connections *ConnectionsObservation `json:"connections,omitempty" tf:"connections,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The location where the Network File Storage cluster is located.
	// The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl'
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The NFS configuration for the Network File Storage cluster. Each NFS configuration supports the following:
	NFS *NFSObservation `json:"nfs,omitempty" tf:"nfs,omitempty"`

	// The name of the Network File Storage cluster.
	// The name of the Network File Storage Cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is 2. The minimum value is 2 and the maximum value is 42.
	// The size of the Network File Storage Cluster. Minimum size is 2.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type NFSClusterParameters struct {

	// A list of connections for the Network File Storage cluster. You can specify only one connection. Connections are immutable. Each connection supports the following:
	// The network connections for the Network File Storage Cluster.
	// +kubebuilder:validation:Optional
	Connections *ConnectionsParameters `json:"connections,omitempty" tf:"connections,omitempty"`

	// The location where the Network File Storage cluster is located.
	// The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl'
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The NFS configuration for the Network File Storage cluster. Each NFS configuration supports the following:
	// +kubebuilder:validation:Optional
	NFS *NFSParameters `json:"nfs,omitempty" tf:"nfs,omitempty"`

	// The name of the Network File Storage cluster.
	// The name of the Network File Storage Cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is 2. The minimum value is 2 and the maximum value is 42.
	// The size of the Network File Storage Cluster. Minimum size is 2.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type NFSInitParameters struct {

	// The minimum supported version of the NFS cluster. Supported values: 4.2. Default is 4.2.
	// The minimum Network File Storage version
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`
}

type NFSObservation struct {

	// The minimum supported version of the NFS cluster. Supported values: 4.2. Default is 4.2.
	// The minimum Network File Storage version
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`
}

type NFSParameters struct {

	// The minimum supported version of the NFS cluster. Supported values: 4.2. Default is 4.2.
	// The minimum Network File Storage version
	// +kubebuilder:validation:Optional
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`
}

// NFSClusterSpec defines the desired state of NFSCluster
type NFSClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NFSClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NFSClusterInitParameters `json:"initProvider,omitempty"`
}

// NFSClusterStatus defines the observed state of NFSCluster.
type NFSClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NFSClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NFSCluster is the Schema for the NFSClusters API. Creates and manages Network File Storage (NFS) Cluster objects
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type NFSCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connections) || (has(self.initProvider) && has(self.initProvider.connections))",message="spec.forProvider.connections is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   NFSClusterSpec   `json:"spec"`
	Status NFSClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NFSClusterList contains a list of NFSClusters
type NFSClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NFSCluster `json:"items"`
}

// Repository type metadata.
var (
	NFSCluster_Kind             = "NFSCluster"
	NFSCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NFSCluster_Kind}.String()
	NFSCluster_KindAPIVersion   = NFSCluster_Kind + "." + CRDGroupVersion.String()
	NFSCluster_GroupVersionKind = CRDGroupVersion.WithKind(NFSCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&NFSCluster{}, &NFSClusterList{})
}
