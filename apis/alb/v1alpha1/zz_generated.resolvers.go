// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	v1alpha11 "github.com/ionos-cloud/provider-upjet-ionoscloud/apis/certificatemanager/v1alpha1"
	v1alpha1 "github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Loadbalancer.
func (mg *Loadbalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DatacenterIDRef,
		Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha1.DatacenterList{},
			Managed: &v1alpha1.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.ListenerLan),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ListenerLanRef,
		Selector:     mg.Spec.ForProvider.ListenerLanSelector,
		To: reference.To{
			List:    &v1alpha1.LanList{},
			Managed: &v1alpha1.Lan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ListenerLan")
	}
	mg.Spec.ForProvider.ListenerLan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ListenerLanRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.TargetLan),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TargetLanRef,
		Selector:     mg.Spec.ForProvider.TargetLanSelector,
		To: reference.To{
			List:    &v1alpha1.LanList{},
			Managed: &v1alpha1.Lan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetLan")
	}
	mg.Spec.ForProvider.TargetLan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetLanRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DatacenterIDRef,
		Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha1.DatacenterList{},
			Managed: &v1alpha1.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.ListenerLan),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ListenerLanRef,
		Selector:     mg.Spec.InitProvider.ListenerLanSelector,
		To: reference.To{
			List:    &v1alpha1.LanList{},
			Managed: &v1alpha1.Lan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ListenerLan")
	}
	mg.Spec.InitProvider.ListenerLan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ListenerLanRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.TargetLan),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TargetLanRef,
		Selector:     mg.Spec.InitProvider.TargetLanSelector,
		To: reference.To{
			List:    &v1alpha1.LanList{},
			Managed: &v1alpha1.Lan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetLan")
	}
	mg.Spec.InitProvider.TargetLan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetLanRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoadbalancerForwardingrule.
func (mg *LoadbalancerForwardingrule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationLoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ApplicationLoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationLoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerList{},
			Managed: &Loadbalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationLoadbalancerID")
	}
	mg.Spec.ForProvider.ApplicationLoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationLoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DatacenterIDRef,
		Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha1.DatacenterList{},
			Managed: &v1alpha1.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ServerCertificates),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.ForProvider.ServerCertificatesRefs,
		Selector:      mg.Spec.ForProvider.ServerCertificatesSelector,
		To: reference.To{
			List:    &v1alpha11.CertificateList{},
			Managed: &v1alpha11.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerCertificates")
	}
	mg.Spec.ForProvider.ServerCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServerCertificatesRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationLoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ApplicationLoadbalancerIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationLoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerList{},
			Managed: &Loadbalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationLoadbalancerID")
	}
	mg.Spec.InitProvider.ApplicationLoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationLoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DatacenterIDRef,
		Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
		To: reference.To{
			List:    &v1alpha1.DatacenterList{},
			Managed: &v1alpha1.Datacenter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ServerCertificates),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.InitProvider.ServerCertificatesRefs,
		Selector:      mg.Spec.InitProvider.ServerCertificatesSelector,
		To: reference.To{
			List:    &v1alpha11.CertificateList{},
			Managed: &v1alpha11.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerCertificates")
	}
	mg.Spec.InitProvider.ServerCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServerCertificatesRefs = mrsp.ResolvedReferences

	return nil
}
