// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPFailoverInitParameters struct {
}

type IPFailoverObservation struct {
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	NicUUID *string `json:"nicUuid,omitempty" tf:"nic_uuid,omitempty"`
}

type IPFailoverParameters struct {
}

type LanInitParameters struct {

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// (Computed) IP failover configurations for lan
	IPFailover []IPFailoverInitParameters `json:"ipFailover,omitempty" tf:"ip_failover,omitempty"`

	// (Computed, Optional) Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be explicitly supplied.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [string] The name of the LAN.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [String] The unique id of a ionoscloud_private_crossconnect resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Crossconnect
	Pcc *string `json:"pcc,omitempty" tf:"pcc,omitempty"`

	// Reference to a Crossconnect in compute to populate pcc.
	// +kubebuilder:validation:Optional
	PccRef *v1.Reference `json:"pccRef,omitempty" tf:"-"`

	// Selector for a Crossconnect in compute to populate pcc.
	// +kubebuilder:validation:Optional
	PccSelector *v1.Selector `json:"pccSelector,omitempty" tf:"-"`

	// [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type LanObservation struct {

	// [string] The ID of a Virtual Data Center.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) IP failover configurations for lan
	IPFailover []IPFailoverObservation `json:"ipFailover,omitempty" tf:"ip_failover,omitempty"`

	// (Computed)[String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
	// For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
	IPv4CidrBlock *string `json:"ipv4CidrBlock,omitempty" tf:"ipv4_cidr_block,omitempty"`

	// (Computed, Optional) Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be explicitly supplied.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [string] The name of the LAN.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [String] The unique id of a ionoscloud_private_crossconnect resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
	Pcc *string `json:"pcc,omitempty" tf:"pcc,omitempty"`

	// [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type LanParameters struct {

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// (Computed) IP failover configurations for lan
	// +kubebuilder:validation:Optional
	IPFailover []IPFailoverParameters `json:"ipFailover,omitempty" tf:"ip_failover,omitempty"`

	// (Computed, Optional) Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be explicitly supplied.
	// +kubebuilder:validation:Optional
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [string] The name of the LAN.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [String] The unique id of a ionoscloud_private_crossconnect resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Crossconnect
	// +kubebuilder:validation:Optional
	Pcc *string `json:"pcc,omitempty" tf:"pcc,omitempty"`

	// Reference to a Crossconnect in compute to populate pcc.
	// +kubebuilder:validation:Optional
	PccRef *v1.Reference `json:"pccRef,omitempty" tf:"-"`

	// Selector for a Crossconnect in compute to populate pcc.
	// +kubebuilder:validation:Optional
	PccSelector *v1.Selector `json:"pccSelector,omitempty" tf:"-"`

	// [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
	// +kubebuilder:validation:Optional
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

// LanSpec defines the desired state of Lan
type LanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LanParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LanInitParameters `json:"initProvider,omitempty"`
}

// LanStatus defines the observed state of Lan.
type LanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Lan is the Schema for the Lans API. Creates and manages LAN objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type Lan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LanSpec   `json:"spec"`
	Status            LanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LanList contains a list of Lans
type LanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Lan `json:"items"`
}

// Repository type metadata.
var (
	Lan_Kind             = "Lan"
	Lan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Lan_Kind}.String()
	Lan_KindAPIVersion   = Lan_Kind + "." + CRDGroupVersion.String()
	Lan_GroupVersionKind = CRDGroupVersion.WithKind(Lan_Kind)
)

func init() {
	SchemeBuilder.Register(&Lan{}, &LanList{})
}
