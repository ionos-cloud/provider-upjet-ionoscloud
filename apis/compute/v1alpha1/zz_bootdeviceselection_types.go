// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BootDeviceSelectionInitParameters struct {

	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// Note: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from DCD.
	// ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server will boot from PXE
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Volume
	BootDeviceID *string `json:"bootDeviceId,omitempty" tf:"boot_device_id,omitempty"`

	// Reference to a Volume in compute to populate bootDeviceId.
	// +kubebuilder:validation:Optional
	BootDeviceIDRef *v1.Reference `json:"bootDeviceIdRef,omitempty" tf:"-"`

	// Selector for a Volume in compute to populate bootDeviceId.
	// +kubebuilder:validation:Optional
	BootDeviceIDSelector *v1.Selector `json:"bootDeviceIdSelector,omitempty" tf:"-"`

	// [string] The ID of a Virtual Data Center.
	// ID of the Datacenter that holds the server for which the boot volume is selected
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [string] The ID of a server.
	// ID of the Server for which the boot device will be selected.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Server
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`
}

type BootDeviceSelectionObservation struct {

	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// Note: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from DCD.
	// ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server will boot from PXE
	BootDeviceID *string `json:"bootDeviceId,omitempty" tf:"boot_device_id,omitempty"`

	// [string] The ID of a Virtual Data Center.
	// ID of the Datacenter that holds the server for which the boot volume is selected
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// ID of the first attached volume of the Server, which will be the default boot volume.
	DefaultBootVolumeID *string `json:"defaultBootVolumeId,omitempty" tf:"default_boot_volume_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The ID of a server.
	// ID of the Server for which the boot device will be selected.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

type BootDeviceSelectionParameters struct {

	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// Note: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from DCD.
	// ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server will boot from PXE
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Volume
	// +kubebuilder:validation:Optional
	BootDeviceID *string `json:"bootDeviceId,omitempty" tf:"boot_device_id,omitempty"`

	// Reference to a Volume in compute to populate bootDeviceId.
	// +kubebuilder:validation:Optional
	BootDeviceIDRef *v1.Reference `json:"bootDeviceIdRef,omitempty" tf:"-"`

	// Selector for a Volume in compute to populate bootDeviceId.
	// +kubebuilder:validation:Optional
	BootDeviceIDSelector *v1.Selector `json:"bootDeviceIdSelector,omitempty" tf:"-"`

	// [string] The ID of a Virtual Data Center.
	// ID of the Datacenter that holds the server for which the boot volume is selected
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [string] The ID of a server.
	// ID of the Server for which the boot device will be selected.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Server
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`
}

// BootDeviceSelectionSpec defines the desired state of BootDeviceSelection
type BootDeviceSelectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BootDeviceSelectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BootDeviceSelectionInitParameters `json:"initProvider,omitempty"`
}

// BootDeviceSelectionStatus defines the observed state of BootDeviceSelection.
type BootDeviceSelectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BootDeviceSelectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BootDeviceSelection is the Schema for the BootDeviceSelections API. Manages the selection of boot devices for IonosCloud Server objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type BootDeviceSelection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BootDeviceSelectionSpec   `json:"spec"`
	Status            BootDeviceSelectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BootDeviceSelectionList contains a list of BootDeviceSelections
type BootDeviceSelectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BootDeviceSelection `json:"items"`
}

// Repository type metadata.
var (
	BootDeviceSelection_Kind             = "BootDeviceSelection"
	BootDeviceSelection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BootDeviceSelection_Kind}.String()
	BootDeviceSelection_KindAPIVersion   = BootDeviceSelection_Kind + "." + CRDGroupVersion.String()
	BootDeviceSelection_GroupVersionKind = CRDGroupVersion.WithKind(BootDeviceSelection_Kind)
)

func init() {
	SchemeBuilder.Register(&BootDeviceSelection{}, &BootDeviceSelectionList{})
}
