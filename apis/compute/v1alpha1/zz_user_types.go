// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// [Boolean] Indicates if the user is active
	// Indicates if the user is active
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	Administrator *bool `json:"administrator,omitempty" tf:"administrator,omitempty"`

	// [string] An e-mail address for the user.
	// Email address of the user
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [string] A first name for the user.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth *bool `json:"forceSecAuth,omitempty" tf:"force_sec_auth,omitempty"`

	// [Set] The groups that this user will be a member of
	// Ids of the groups that the user is a member of
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// [string] A last name for the user.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// [string] A password for the user.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type UserObservation struct {

	// [Boolean] Indicates if the user is active
	// Indicates if the user is active
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	Administrator *bool `json:"administrator,omitempty" tf:"administrator,omitempty"`

	// [string] An e-mail address for the user.
	// Email address of the user
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [string] A first name for the user.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth *bool `json:"forceSecAuth,omitempty" tf:"force_sec_auth,omitempty"`

	// [Set] The groups that this user will be a member of
	// Ids of the groups that the user is a member of
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] A last name for the user.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (Computed) Canonical (IONOS Object Storage) id of the user for a given identity
	S3CanonicalUserID *string `json:"s3CanonicalUserId,omitempty" tf:"s3_canonical_user_id,omitempty"`

	// [Boolean] Indicates if secure authentication is active for the user or not. it can not be used in create requests - can be used in update
	// Indicates if secure (two-factor) authentication is active for the user. It can not be used in create requests - can be used in update.
	SecAuthActive *bool `json:"secAuthActive,omitempty" tf:"sec_auth_active,omitempty"`
}

type UserParameters struct {

	// [Boolean] Indicates if the user is active
	// Indicates if the user is active
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
	// +kubebuilder:validation:Optional
	Administrator *bool `json:"administrator,omitempty" tf:"administrator,omitempty"`

	// [string] An e-mail address for the user.
	// Email address of the user
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [string] A first name for the user.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
	// Indicates if secure (two-factor) authentication is forced for the user
	// +kubebuilder:validation:Optional
	ForceSecAuth *bool `json:"forceSecAuth,omitempty" tf:"force_sec_auth,omitempty"`

	// [Set] The groups that this user will be a member of
	// Ids of the groups that the user is a member of
	// +kubebuilder:validation:Optional
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// [string] A last name for the user.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// [string] A password for the user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. Creates and manages user objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firstName) || (has(self.initProvider) && has(self.initProvider.firstName))",message="spec.forProvider.firstName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lastName) || (has(self.initProvider) && has(self.initProvider.lastName))",message="spec.forProvider.lastName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
