// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteInitParameters struct {

	// [string] The ID of the API Gateway that the route belongs to.
	// The ID of the API Gateway that the route belongs to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/apigateway/v1alpha1.Apigateway
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a Apigateway in apigateway to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a Apigateway in apigateway to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: GET,
	// POST, PUT, DELETE, PATCH, OPTIONS, HEAD, CONNECT, TRACE.
	// The HTTP methods that the route should match.
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	// The name of the API Gateway Route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The paths that the route should match. Minimum items: 1.
	// The paths that the route should match.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: http.
	// This field specifies the protocol used by the ingress to route traffic to the backend service.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams []UpstreamsInitParameters `json:"upstreams,omitempty" tf:"upstreams,omitempty"`

	// [bool] To enable websocket support. Default value: false.
	// To enable websocket support.
	Websocket *bool `json:"websocket,omitempty" tf:"websocket,omitempty"`
}

type RouteObservation struct {

	// [string] The ID of the API Gateway that the route belongs to.
	// The ID of the API Gateway that the route belongs to.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// (Computed)[string] The ID of the API Gateway Route.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: GET,
	// POST, PUT, DELETE, PATCH, OPTIONS, HEAD, CONNECT, TRACE.
	// The HTTP methods that the route should match.
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	// The name of the API Gateway Route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The paths that the route should match. Minimum items: 1.
	// The paths that the route should match.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: http.
	// This field specifies the protocol used by the ingress to route traffic to the backend service.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams []UpstreamsObservation `json:"upstreams,omitempty" tf:"upstreams,omitempty"`

	// [bool] To enable websocket support. Default value: false.
	// To enable websocket support.
	Websocket *bool `json:"websocket,omitempty" tf:"websocket,omitempty"`
}

type RouteParameters struct {

	// [string] The ID of the API Gateway that the route belongs to.
	// The ID of the API Gateway that the route belongs to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/apigateway/v1alpha1.Apigateway
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a Apigateway in apigateway to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a Apigateway in apigateway to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: GET,
	// POST, PUT, DELETE, PATCH, OPTIONS, HEAD, CONNECT, TRACE.
	// The HTTP methods that the route should match.
	// +kubebuilder:validation:Optional
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	// The name of the API Gateway Route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The paths that the route should match. Minimum items: 1.
	// The paths that the route should match.
	// +kubebuilder:validation:Optional
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: http.
	// This field specifies the protocol used by the ingress to route traffic to the backend service.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Upstreams information of the API Gateway Route. Minimum items: 1.
	// +kubebuilder:validation:Optional
	Upstreams []UpstreamsParameters `json:"upstreams,omitempty" tf:"upstreams,omitempty"`

	// [bool] To enable websocket support. Default value: false.
	// To enable websocket support.
	// +kubebuilder:validation:Optional
	Websocket *bool `json:"websocket,omitempty" tf:"websocket,omitempty"`
}

type UpstreamsInitParameters struct {

	// [string] The host of the upstream.
	// The host of the upstream.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// [string] The load balancer algorithm. Default value: roundrobin.
	// The load balancer algorithm.
	Loadbalancer *string `json:"loadbalancer,omitempty" tf:"loadbalancer,omitempty"`

	// [int] The port of the upstream. Default value: 80.
	// The port of the upstream.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// [string] The target URL of the upstream. Default value: http.
	// The target URL of the upstream.
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// [int] Weight with which to split traffic to the upstream. Default value: 100.
	// Weight with which to split traffic to the upstream.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type UpstreamsObservation struct {

	// [string] The host of the upstream.
	// The host of the upstream.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// [string] The load balancer algorithm. Default value: roundrobin.
	// The load balancer algorithm.
	Loadbalancer *string `json:"loadbalancer,omitempty" tf:"loadbalancer,omitempty"`

	// [int] The port of the upstream. Default value: 80.
	// The port of the upstream.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// [string] The target URL of the upstream. Default value: http.
	// The target URL of the upstream.
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// [int] Weight with which to split traffic to the upstream. Default value: 100.
	// Weight with which to split traffic to the upstream.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type UpstreamsParameters struct {

	// [string] The host of the upstream.
	// The host of the upstream.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// [string] The load balancer algorithm. Default value: roundrobin.
	// The load balancer algorithm.
	// +kubebuilder:validation:Optional
	Loadbalancer *string `json:"loadbalancer,omitempty" tf:"loadbalancer,omitempty"`

	// [int] The port of the upstream. Default value: 80.
	// The port of the upstream.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// [string] The target URL of the upstream. Default value: http.
	// The target URL of the upstream.
	// +kubebuilder:validation:Optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// [int] Weight with which to split traffic to the upstream. Default value: 100.
	// Weight with which to split traffic to the upstream.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// RouteSpec defines the desired state of Route
type RouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouteInitParameters `json:"initProvider,omitempty"`
}

// RouteStatus defines the observed state of Route.
type RouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Route is the Schema for the Routes API. Creates and manages IonosCloud API Gateway Route objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.methods) || (has(self.initProvider) && has(self.initProvider.methods))",message="spec.forProvider.methods is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.paths) || (has(self.initProvider) && has(self.initProvider.paths))",message="spec.forProvider.paths is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.upstreams) || (has(self.initProvider) && has(self.initProvider.upstreams))",message="spec.forProvider.upstreams is a required parameter"
	Spec   RouteSpec   `json:"spec"`
	Status RouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteList contains a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

// Repository type metadata.
var (
	Route_Kind             = "Route"
	Route_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Route_Kind}.String()
	Route_KindAPIVersion   = Route_Kind + "." + CRDGroupVersion.String()
	Route_GroupVersionKind = CRDGroupVersion.WithKind(Route_Kind)
)

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
