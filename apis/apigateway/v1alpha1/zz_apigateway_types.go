// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApigatewayInitParameters struct {

	// [list] Custom domains for the API Gateway, a list that contains elements with the following structure:
	// Custom domains for the API Gateway.
	CustomDomains []CustomDomainsInitParameters `json:"customDomains,omitempty" tf:"custom_domains,omitempty"`

	// [bool] Enable or disable logging. Defaults to false. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	// Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// [bool] Enable or disable metrics. Defaults to false.
	// Enable or disable metrics.
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// [string] The name of the API Gateway.
	// The name of the API Gateway.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ApigatewayObservation struct {

	// [list] Custom domains for the API Gateway, a list that contains elements with the following structure:
	// Custom domains for the API Gateway.
	CustomDomains []CustomDomainsObservation `json:"customDomains,omitempty" tf:"custom_domains,omitempty"`

	// (Computed)[string] The ID of the API Gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [bool] Enable or disable logging. Defaults to false. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	// Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// [bool] Enable or disable metrics. Defaults to false.
	// Enable or disable metrics.
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// [string] The name of the API Gateway.
	// The name of the API Gateway.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Computed)[string] The public endpoint of the API Gateway.
	// The public endpoint of the API Gateway.
	PublicEndpoint *string `json:"publicEndpoint,omitempty" tf:"public_endpoint,omitempty"`
}

type ApigatewayParameters struct {

	// [list] Custom domains for the API Gateway, a list that contains elements with the following structure:
	// Custom domains for the API Gateway.
	// +kubebuilder:validation:Optional
	CustomDomains []CustomDomainsParameters `json:"customDomains,omitempty" tf:"custom_domains,omitempty"`

	// [bool] Enable or disable logging. Defaults to false. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	// Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
	// +kubebuilder:validation:Optional
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// [bool] Enable or disable metrics. Defaults to false.
	// Enable or disable metrics.
	// +kubebuilder:validation:Optional
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// [string] The name of the API Gateway.
	// The name of the API Gateway.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CustomDomainsInitParameters struct {

	// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
	// The certificate ID for the domain.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// [string] The name of the API Gateway.
	// The domain name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CustomDomainsObservation struct {

	// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
	// The certificate ID for the domain.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// [string] The name of the API Gateway.
	// The domain name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CustomDomainsParameters struct {

	// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
	// The certificate ID for the domain.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// [string] The name of the API Gateway.
	// The domain name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

// ApigatewaySpec defines the desired state of Apigateway
type ApigatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApigatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApigatewayInitParameters `json:"initProvider,omitempty"`
}

// ApigatewayStatus defines the observed state of Apigateway.
type ApigatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApigatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Apigateway is the Schema for the Apigateways API. API Gateway is an application that acts as a "front door" for backend services and APIs, handling client requests and routing them to the appropriate backend.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type Apigateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ApigatewaySpec   `json:"spec"`
	Status ApigatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApigatewayList contains a list of Apigateways
type ApigatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Apigateway `json:"items"`
}

// Repository type metadata.
var (
	Apigateway_Kind             = "Apigateway"
	Apigateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Apigateway_Kind}.String()
	Apigateway_KindAPIVersion   = Apigateway_Kind + "." + CRDGroupVersion.String()
	Apigateway_GroupVersionKind = CRDGroupVersion.WithKind(Apigateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Apigateway{}, &ApigatewayList{})
}
