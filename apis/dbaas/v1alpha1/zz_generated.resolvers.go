// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this MariadbCluster.
func (mg *MariadbCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Connections); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Connections[i3].DatacenterID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Connections[i3].DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.Connections[i3].DatacenterIDSelector,
			To: reference.To{
				List:    &v1alpha1.DatacenterList{},
				Managed: &v1alpha1.Datacenter{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Connections[i3].DatacenterID")
		}
		mg.Spec.ForProvider.Connections[i3].DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Connections[i3].DatacenterIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Connections); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Connections[i3].LanID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Connections[i3].LanIDRef,
			Selector:     mg.Spec.ForProvider.Connections[i3].LanIDSelector,
			To: reference.To{
				List:    &v1alpha1.LanList{},
				Managed: &v1alpha1.Lan{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Connections[i3].LanID")
		}
		mg.Spec.ForProvider.Connections[i3].LanID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Connections[i3].LanIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Connections); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Connections[i3].DatacenterID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Connections[i3].DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.Connections[i3].DatacenterIDSelector,
			To: reference.To{
				List:    &v1alpha1.DatacenterList{},
				Managed: &v1alpha1.Datacenter{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Connections[i3].DatacenterID")
		}
		mg.Spec.InitProvider.Connections[i3].DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Connections[i3].DatacenterIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Connections); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Connections[i3].LanID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Connections[i3].LanIDRef,
			Selector:     mg.Spec.InitProvider.Connections[i3].LanIDSelector,
			To: reference.To{
				List:    &v1alpha1.LanList{},
				Managed: &v1alpha1.Lan{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Connections[i3].LanID")
		}
		mg.Spec.InitProvider.Connections[i3].LanID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Connections[i3].LanIDRef = rsp.ResolvedReference

	}

	return nil
}
