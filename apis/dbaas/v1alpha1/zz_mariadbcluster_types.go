// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionsInitParameters struct {

	// [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See Private IPs and Configuring the network.
	// The IP and subnet for your cluster.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// [true] The datacenter to connect your cluster to.
	// The datacenter to connect your cluster to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [true] The numeric LAN ID to connect your cluster to.
	// The numeric LAN ID to connect your cluster to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Lan
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// Reference to a Lan in compute to populate lanId.
	// +kubebuilder:validation:Optional
	LanIDRef *v1.Reference `json:"lanIdRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lanId.
	// +kubebuilder:validation:Optional
	LanIDSelector *v1.Selector `json:"lanIdSelector,omitempty" tf:"-"`
}

type ConnectionsObservation struct {

	// [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See Private IPs and Configuring the network.
	// The IP and subnet for your cluster.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// [true] The datacenter to connect your cluster to.
	// The datacenter to connect your cluster to.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// [true] The numeric LAN ID to connect your cluster to.
	// The numeric LAN ID to connect your cluster to.
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`
}

type ConnectionsParameters struct {

	// [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See Private IPs and Configuring the network.
	// The IP and subnet for your cluster.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// [true] The datacenter to connect your cluster to.
	// The datacenter to connect your cluster to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [true] The numeric LAN ID to connect your cluster to.
	// The numeric LAN ID to connect your cluster to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/compute/v1alpha1.Lan
	// +kubebuilder:validation:Optional
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// Reference to a Lan in compute to populate lanId.
	// +kubebuilder:validation:Optional
	LanIDRef *v1.Reference `json:"lanIdRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lanId.
	// +kubebuilder:validation:Optional
	LanIDSelector *v1.Selector `json:"lanIdSelector,omitempty" tf:"-"`
}

type CredentialsInitParameters struct {

	// [string] The password for a MariaDB user.
	// The password for a MariaDB user.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// [string] The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	// The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CredentialsObservation struct {

	// [string] The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	// The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CredentialsParameters struct {

	// [string] The password for a MariaDB user.
	// The password for a MariaDB user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// [string] The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	// The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type MaintenanceWindowInitParameters struct {

	// [string] The name of the week day.
	// The name of the week day.
	DayOfTheWeek *string `json:"dayOfTheWeek,omitempty" tf:"day_of_the_week,omitempty"`

	// [string] Start of the maintenance window in UTC time.
	// Start of the maintenance window in UTC time.
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceWindowObservation struct {

	// [string] The name of the week day.
	// The name of the week day.
	DayOfTheWeek *string `json:"dayOfTheWeek,omitempty" tf:"day_of_the_week,omitempty"`

	// [string] Start of the maintenance window in UTC time.
	// Start of the maintenance window in UTC time.
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceWindowParameters struct {

	// [string] The name of the week day.
	// The name of the week day.
	// +kubebuilder:validation:Optional
	DayOfTheWeek *string `json:"dayOfTheWeek" tf:"day_of_the_week,omitempty"`

	// [string] Start of the maintenance window in UTC time.
	// Start of the maintenance window in UTC time.
	// +kubebuilder:validation:Optional
	Time *string `json:"time" tf:"time,omitempty"`
}

type MariadbClusterInitParameters struct {

	// The network connection for your cluster. Only one connection is allowed.
	// The network connection for your cluster. Only one connection is allowed.
	Connections *ConnectionsInitParameters `json:"connections,omitempty" tf:"connections,omitempty"`

	// [int] The number of CPU cores per instance.
	// The number of CPU cores per instance.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Credentials for the database user to be created.
	// Credentials for the database user to be created.
	Credentials []CredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// [string] The friendly name of your cluster.
	// The friendly name of your cluster.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// [int] The total number of instances in the cluster (one primary and n-1 secondary).
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// [string] The location in which the cluster will be created. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".
	// The cluster location
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (Computed) A weekly 4 hour-long window, during which maintenance might occur
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *MaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// [string] The MariaDB version of your cluster.
	// The MariaDB version of your cluster.
	MariadbVersion *string `json:"mariadbVersion,omitempty" tf:"mariadb_version,omitempty"`

	// [int] The amount of memory per instance in gigabytes (GB).
	// The amount of memory per instance in gigabytes (GB).
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// [int] The amount of storage per instance in gigabytes (GB).
	// The amount of storage per instance in gigabytes (GB).
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`
}

type MariadbClusterObservation struct {

	// The network connection for your cluster. Only one connection is allowed.
	// The network connection for your cluster. Only one connection is allowed.
	Connections *ConnectionsObservation `json:"connections,omitempty" tf:"connections,omitempty"`

	// [int] The number of CPU cores per instance.
	// The number of CPU cores per instance.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Credentials for the database user to be created.
	// Credentials for the database user to be created.
	Credentials []CredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (Computed)[string] The DNS name pointing to your cluster.
	// The DNS name pointing to your cluster.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// [string] The friendly name of your cluster.
	// The friendly name of your cluster.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [int] The total number of instances in the cluster (one primary and n-1 secondary).
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// [string] The location in which the cluster will be created. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".
	// The cluster location
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (Computed) A weekly 4 hour-long window, during which maintenance might occur
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *MaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// [string] The MariaDB version of your cluster.
	// The MariaDB version of your cluster.
	MariadbVersion *string `json:"mariadbVersion,omitempty" tf:"mariadb_version,omitempty"`

	// [int] The amount of memory per instance in gigabytes (GB).
	// The amount of memory per instance in gigabytes (GB).
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// [int] The amount of storage per instance in gigabytes (GB).
	// The amount of storage per instance in gigabytes (GB).
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`
}

type MariadbClusterParameters struct {

	// The network connection for your cluster. Only one connection is allowed.
	// The network connection for your cluster. Only one connection is allowed.
	// +kubebuilder:validation:Optional
	Connections *ConnectionsParameters `json:"connections,omitempty" tf:"connections,omitempty"`

	// [int] The number of CPU cores per instance.
	// The number of CPU cores per instance.
	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Credentials for the database user to be created.
	// Credentials for the database user to be created.
	// +kubebuilder:validation:Optional
	Credentials []CredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// [string] The friendly name of your cluster.
	// The friendly name of your cluster.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// [int] The total number of instances in the cluster (one primary and n-1 secondary).
	// The total number of instances in the cluster (one primary and n-1 secondary).
	// +kubebuilder:validation:Optional
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// [string] The location in which the cluster will be created. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".
	// The cluster location
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (Computed) A weekly 4 hour-long window, during which maintenance might occur
	// A weekly 4 hour-long window, during which maintenance might occur.
	// +kubebuilder:validation:Optional
	MaintenanceWindow *MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// [string] The MariaDB version of your cluster.
	// The MariaDB version of your cluster.
	// +kubebuilder:validation:Optional
	MariadbVersion *string `json:"mariadbVersion,omitempty" tf:"mariadb_version,omitempty"`

	// [int] The amount of memory per instance in gigabytes (GB).
	// The amount of memory per instance in gigabytes (GB).
	// +kubebuilder:validation:Optional
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// [int] The amount of storage per instance in gigabytes (GB).
	// The amount of storage per instance in gigabytes (GB).
	// +kubebuilder:validation:Optional
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`
}

// MariadbClusterSpec defines the desired state of MariadbCluster
type MariadbClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MariadbClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MariadbClusterInitParameters `json:"initProvider,omitempty"`
}

// MariadbClusterStatus defines the observed state of MariadbCluster.
type MariadbClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MariadbClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MariadbCluster is the Schema for the MariadbClusters API. Creates and manages DBaaS MariaDB Cluster objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type MariadbCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connections) || (has(self.initProvider) && has(self.initProvider.connections))",message="spec.forProvider.connections is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cores) || (has(self.initProvider) && has(self.initProvider.cores))",message="spec.forProvider.cores is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.credentials) || (has(self.initProvider) && has(self.initProvider.credentials))",message="spec.forProvider.credentials is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instances) || (has(self.initProvider) && has(self.initProvider.instances))",message="spec.forProvider.instances is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mariadbVersion) || (has(self.initProvider) && has(self.initProvider.mariadbVersion))",message="spec.forProvider.mariadbVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ram) || (has(self.initProvider) && has(self.initProvider.ram))",message="spec.forProvider.ram is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageSize) || (has(self.initProvider) && has(self.initProvider.storageSize))",message="spec.forProvider.storageSize is a required parameter"
	Spec   MariadbClusterSpec   `json:"spec"`
	Status MariadbClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbClusterList contains a list of MariadbClusters
type MariadbClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MariadbCluster `json:"items"`
}

// Repository type metadata.
var (
	MariadbCluster_Kind             = "MariadbCluster"
	MariadbCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MariadbCluster_Kind}.String()
	MariadbCluster_KindAPIVersion   = MariadbCluster_Kind + "." + CRDGroupVersion.String()
	MariadbCluster_GroupVersionKind = CRDGroupVersion.WithKind(MariadbCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&MariadbCluster{}, &MariadbClusterList{})
}
