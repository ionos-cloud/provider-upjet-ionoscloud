// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationsInitParameters struct {

	// [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
	// Defines the number of days a log record should be kept in loki. Works with loki destination type only. Possible values are: 7, 14, 30.
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`

	// [string] The internal output stream to send logs to.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationsObservation struct {

	// [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
	// Defines the number of days a log record should be kept in loki. Works with loki destination type only. Possible values are: 7, 14, 30.
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`

	// [string] The internal output stream to send logs to.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationsParameters struct {

	// [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
	// Defines the number of days a log record should be kept in loki. Works with loki destination type only. Possible values are: 7, 14, 30.
	// +kubebuilder:validation:Optional
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`

	// [string] The internal output stream to send logs to.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LogInitParameters struct {

	// [list] The configuration of the logs datastore, a list that contains elements with the following structure:
	// The internal output stream to send logs to. Possible values are: loki.
	Destinations []DestinationsInitParameters `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// [string] "Protocol to use as intake. Possible values are: http, tcp."
	// Protocol to use as intake. Possible values are: http, tcp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// [string] The source parser to be used.
	// The source parser to be used
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	// The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogObservation struct {

	// [list] The configuration of the logs datastore, a list that contains elements with the following structure:
	// The internal output stream to send logs to. Possible values are: loki.
	Destinations []DestinationsObservation `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// [string] "Protocol to use as intake. Possible values are: http, tcp."
	// Protocol to use as intake. Possible values are: http, tcp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (Computed)[bool]
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// [string] The source parser to be used.
	// The source parser to be used
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	// The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogParameters struct {

	// [list] The configuration of the logs datastore, a list that contains elements with the following structure:
	// The internal output stream to send logs to. Possible values are: loki.
	// +kubebuilder:validation:Optional
	Destinations []DestinationsParameters `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// [string] "Protocol to use as intake. Possible values are: http, tcp."
	// Protocol to use as intake. Possible values are: http, tcp.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// [string] The source parser to be used.
	// The source parser to be used
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	// The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag" tf:"tag,omitempty"`
}

type PipelineInitParameters struct {

	// [string] The location of the Logging pipeline. Default: de/txl One of de/fra, de/txl, gb/lhr, es/vit, fr/par. If this is not set and if no value is provided for the IONOS_API_URL env var, the default location will be: de/fra.
	// The location of your logging pipeline. Default: de/txl. Supported locations: de/fra, de/txl, es/vit, gb/lhr, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [list] Pipeline logs, a list that contains elements with the following structure:
	Log []LogInitParameters `json:"log,omitempty" tf:"log,omitempty"`

	// [string] The name of the Logging pipeline.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineObservation struct {

	// (Computed)[string] The address of the client's grafana instance.
	// The address of the client's grafana instance
	GrafanaAddress *string `json:"grafanaAddress,omitempty" tf:"grafana_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The location of the Logging pipeline. Default: de/txl One of de/fra, de/txl, gb/lhr, es/vit, fr/par. If this is not set and if no value is provided for the IONOS_API_URL env var, the default location will be: de/fra.
	// The location of your logging pipeline. Default: de/txl. Supported locations: de/fra, de/txl, es/vit, gb/lhr, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [list] Pipeline logs, a list that contains elements with the following structure:
	Log []LogObservation `json:"log,omitempty" tf:"log,omitempty"`

	// [string] The name of the Logging pipeline.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineParameters struct {

	// [string] The location of the Logging pipeline. Default: de/txl One of de/fra, de/txl, gb/lhr, es/vit, fr/par. If this is not set and if no value is provided for the IONOS_API_URL env var, the default location will be: de/fra.
	// The location of your logging pipeline. Default: de/txl. Supported locations: de/fra, de/txl, es/vit, gb/lhr, fr/par
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [list] Pipeline logs, a list that contains elements with the following structure:
	// +kubebuilder:validation:Optional
	Log []LogParameters `json:"log,omitempty" tf:"log,omitempty"`

	// [string] The name of the Logging pipeline.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// PipelineSpec defines the desired state of Pipeline
type PipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipelineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipelineInitParameters `json:"initProvider,omitempty"`
}

// PipelineStatus defines the observed state of Pipeline.
type PipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pipeline is the Schema for the Pipelines API. Creates and manages Logging pipeline objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type Pipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.log) || (has(self.initProvider) && has(self.initProvider.log))",message="spec.forProvider.log is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PipelineSpec   `json:"spec"`
	Status PipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipelineList contains a list of Pipelines
type PipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipeline `json:"items"`
}

// Repository type metadata.
var (
	Pipeline_Kind             = "Pipeline"
	Pipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pipeline_Kind}.String()
	Pipeline_KindAPIVersion   = Pipeline_Kind + "." + CRDGroupVersion.String()
	Pipeline_GroupVersionKind = CRDGroupVersion.WithKind(Pipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&Pipeline{}, &PipelineList{})
}
