// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type BucketWebsiteConfigurationInitParameters struct {

	// [string] The name of the bucket where the object will be stored.
	// The name of the bucket.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/objectstorage/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ErrorDocument *ErrorDocumentInitParameters `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Container for the Suffix element.
	// Container for the Suffix element.
	IndexDocument *IndexDocumentInitParameters `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	RedirectAllRequestsTo *RedirectAllRequestsToInitParameters `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A container for describing a condition that must be met for the specified redirect to apply.
	// Rules that define when a redirect is applied and the redirect behavior.
	RoutingRule []RoutingRuleInitParameters `json:"routingRule,omitempty" tf:"routing_rule,omitempty"`
}

type BucketWebsiteConfigurationObservation struct {

	// [string] The name of the bucket where the object will be stored.
	// The name of the bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ErrorDocument *ErrorDocumentObservation `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Container for the Suffix element.
	// Container for the Suffix element.
	IndexDocument *IndexDocumentObservation `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	RedirectAllRequestsTo *RedirectAllRequestsToObservation `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A container for describing a condition that must be met for the specified redirect to apply.
	// Rules that define when a redirect is applied and the redirect behavior.
	RoutingRule []RoutingRuleObservation `json:"routingRule,omitempty" tf:"routing_rule,omitempty"`
}

type BucketWebsiteConfigurationParameters struct {

	// [string] The name of the bucket where the object will be stored.
	// The name of the bucket.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/objectstorage/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
	// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// +kubebuilder:validation:Optional
	ErrorDocument *ErrorDocumentParameters `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Container for the Suffix element.
	// Container for the Suffix element.
	// +kubebuilder:validation:Optional
	IndexDocument *IndexDocumentParameters `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	// +kubebuilder:validation:Optional
	RedirectAllRequestsTo *RedirectAllRequestsToParameters `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A container for describing a condition that must be met for the specified redirect to apply.
	// Rules that define when a redirect is applied and the redirect behavior.
	// +kubebuilder:validation:Optional
	RoutingRule []RoutingRuleParameters `json:"routingRule,omitempty" tf:"routing_rule,omitempty"`
}

type ConditionInitParameters struct {

	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied
	HTTPErrorCodeReturnedEquals *string `json:"httpErrorCodeReturnedEquals,omitempty" tf:"http_error_code_returned_equals,omitempty"`

	// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
	// The object key name prefix when the redirect is applied. For example, to redirect requests for `ExamplePage.html`, the key prefix will be `ExamplePage.html`. To redirect request for all pages with the prefix `docs/`, the key prefix will be `/docs`, which identifies all objects in the `docs/` folder. Required when the parent element `Condition` is specified and sibling `HTTPErrorCodeReturnedEquals` is not specified. If both conditions are specified, both must be true for the redirect to be applied. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	KeyPrefixEquals *string `json:"keyPrefixEquals,omitempty" tf:"key_prefix_equals,omitempty"`
}

type ConditionObservation struct {

	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied
	HTTPErrorCodeReturnedEquals *string `json:"httpErrorCodeReturnedEquals,omitempty" tf:"http_error_code_returned_equals,omitempty"`

	// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
	// The object key name prefix when the redirect is applied. For example, to redirect requests for `ExamplePage.html`, the key prefix will be `ExamplePage.html`. To redirect request for all pages with the prefix `docs/`, the key prefix will be `/docs`, which identifies all objects in the `docs/` folder. Required when the parent element `Condition` is specified and sibling `HTTPErrorCodeReturnedEquals` is not specified. If both conditions are specified, both must be true for the redirect to be applied. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	KeyPrefixEquals *string `json:"keyPrefixEquals,omitempty" tf:"key_prefix_equals,omitempty"`
}

type ConditionParameters struct {

	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied
	// +kubebuilder:validation:Optional
	HTTPErrorCodeReturnedEquals *string `json:"httpErrorCodeReturnedEquals,omitempty" tf:"http_error_code_returned_equals,omitempty"`

	// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
	// The object key name prefix when the redirect is applied. For example, to redirect requests for `ExamplePage.html`, the key prefix will be `ExamplePage.html`. To redirect request for all pages with the prefix `docs/`, the key prefix will be `/docs`, which identifies all objects in the `docs/` folder. Required when the parent element `Condition` is specified and sibling `HTTPErrorCodeReturnedEquals` is not specified. If both conditions are specified, both must be true for the redirect to be applied. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// +kubebuilder:validation:Optional
	KeyPrefixEquals *string `json:"keyPrefixEquals,omitempty" tf:"key_prefix_equals,omitempty"`
}

type ErrorDocumentInitParameters struct {

	// The object key
	// The object key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type ErrorDocumentObservation struct {

	// The object key
	// The object key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type ErrorDocumentParameters struct {

	// The object key
	// The object key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type IndexDocumentInitParameters struct {

	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type IndexDocumentObservation struct {

	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type IndexDocumentParameters struct {

	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type RedirectAllRequestsToInitParameters struct {

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RedirectAllRequestsToObservation struct {

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RedirectAllRequestsToParameters struct {

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RedirectInitParameters struct {

	// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
	// The HTTP redirect code to use on the response.
	HTTPRedirectCode *string `json:"httpRedirectCode,omitempty" tf:"http_redirect_code,omitempty"`

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// The protocol to use in the redirect request.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
	// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a condition block with `KeyPrefixEquals` set to `docs/` and in the Redirect set `ReplaceKeyPrefixWith` to `/documents`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyWith` is not provided.
	ReplaceKeyPrefixWith *string `json:"replaceKeyPrefixWith,omitempty" tf:"replace_key_prefix_with,omitempty"`

	// The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
	// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ReplaceKeyWith *string `json:"replaceKeyWith,omitempty" tf:"replace_key_with,omitempty"`
}

type RedirectObservation struct {

	// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
	// The HTTP redirect code to use on the response.
	HTTPRedirectCode *string `json:"httpRedirectCode,omitempty" tf:"http_redirect_code,omitempty"`

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// The protocol to use in the redirect request.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
	// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a condition block with `KeyPrefixEquals` set to `docs/` and in the Redirect set `ReplaceKeyPrefixWith` to `/documents`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyWith` is not provided.
	ReplaceKeyPrefixWith *string `json:"replaceKeyPrefixWith,omitempty" tf:"replace_key_prefix_with,omitempty"`

	// The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
	// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ReplaceKeyWith *string `json:"replaceKeyWith,omitempty" tf:"replace_key_with,omitempty"`
}

type RedirectParameters struct {

	// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
	// The HTTP redirect code to use on the response.
	// +kubebuilder:validation:Optional
	HTTPRedirectCode *string `json:"httpRedirectCode,omitempty" tf:"http_redirect_code,omitempty"`

	// Name of the host where requests will be redirected.
	// The host name to use in the redirect request.
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Protocol to use (http, https).
	// The protocol to use in the redirect request.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
	// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a condition block with `KeyPrefixEquals` set to `docs/` and in the Redirect set `ReplaceKeyPrefixWith` to `/documents`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyWith` is not provided.
	// +kubebuilder:validation:Optional
	ReplaceKeyPrefixWith *string `json:"replaceKeyPrefixWith,omitempty" tf:"replace_key_prefix_with,omitempty"`

	// The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
	// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	// +kubebuilder:validation:Optional
	ReplaceKeyWith *string `json:"replaceKeyWith,omitempty" tf:"replace_key_with,omitempty"`
}

type RoutingRuleInitParameters struct {

	// A container for describing a condition that must be met for the specified redirect to apply.
	// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
	Condition *ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// Container for the redirect information.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	Redirect *RedirectInitParameters `json:"redirect,omitempty" tf:"redirect,omitempty"`
}

type RoutingRuleObservation struct {

	// A container for describing a condition that must be met for the specified redirect to apply.
	// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
	Condition *ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// Container for the redirect information.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	Redirect *RedirectObservation `json:"redirect,omitempty" tf:"redirect,omitempty"`
}

type RoutingRuleParameters struct {

	// A container for describing a condition that must be met for the specified redirect to apply.
	// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
	// +kubebuilder:validation:Optional
	Condition *ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// Container for the redirect information.
	// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
	// +kubebuilder:validation:Optional
	Redirect *RedirectParameters `json:"redirect,omitempty" tf:"redirect,omitempty"`
}

// BucketWebsiteConfigurationSpec defines the desired state of BucketWebsiteConfiguration
type BucketWebsiteConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketWebsiteConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketWebsiteConfigurationInitParameters `json:"initProvider,omitempty"`
}

// BucketWebsiteConfigurationStatus defines the observed state of BucketWebsiteConfiguration.
type BucketWebsiteConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketWebsiteConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketWebsiteConfiguration is the Schema for the BucketWebsiteConfigurations API. Manages Buckets website configuration on IonosCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type BucketWebsiteConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketWebsiteConfigurationSpec   `json:"spec"`
	Status            BucketWebsiteConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketWebsiteConfigurationList contains a list of BucketWebsiteConfigurations
type BucketWebsiteConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketWebsiteConfiguration `json:"items"`
}

// Repository type metadata.
var (
	BucketWebsiteConfiguration_Kind             = "BucketWebsiteConfiguration"
	BucketWebsiteConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketWebsiteConfiguration_Kind}.String()
	BucketWebsiteConfiguration_KindAPIVersion   = BucketWebsiteConfiguration_Kind + "." + CRDGroupVersion.String()
	BucketWebsiteConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(BucketWebsiteConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketWebsiteConfiguration{}, &BucketWebsiteConfigurationList{})
}
