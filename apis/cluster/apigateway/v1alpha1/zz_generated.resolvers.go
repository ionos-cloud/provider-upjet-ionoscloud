// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	apisresolver "github.com/ionos-cloud/provider-upjet-ionoscloud/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Route) ResolveReferences( // ResolveReferences of this Route.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apigateway.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Apigateway", "ApigatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.GatewayIDRef,
			Selector:     mg.Spec.ForProvider.GatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apigateway.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Apigateway", "ApigatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GatewayID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.GatewayIDRef,
			Selector:     mg.Spec.InitProvider.GatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayID")
	}
	mg.Spec.InitProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GatewayIDRef = rsp.ResolvedReference

	return nil
}
