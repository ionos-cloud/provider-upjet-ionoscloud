// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AutoCertificateInitParameters struct {

	// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// [string] The key algorithm used to generate the certificate.
	// The key algorithm used to generate the certificate
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty" tf:"key_algorithm,omitempty"`

	// [string] The location of the auto-certificate.
	// The location of the auto-certificate
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/certificatemanager/v1alpha1.AutoCertificateProvider
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.AutoCertificateProviderLocation()
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Reference to a AutoCertificateProvider in certificatemanager to populate location.
	// +kubebuilder:validation:Optional
	LocationRef *v1.Reference `json:"locationRef,omitempty" tf:"-"`

	// Selector for a AutoCertificateProvider in certificatemanager to populate location.
	// +kubebuilder:validation:Optional
	LocationSelector *v1.Selector `json:"locationSelector,omitempty" tf:"-"`

	// [string] A certificate name used for management purposes.
	// A certificate name used for management purposes
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The certificate provider used to issue the certificates.
	// The certificate provider used to issue the certificates
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/certificatemanager/v1alpha1.AutoCertificateProvider
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// Reference to a AutoCertificateProvider in certificatemanager to populate providerId.
	// +kubebuilder:validation:Optional
	ProviderIDRef *v1.Reference `json:"providerIdRef,omitempty" tf:"-"`

	// Selector for a AutoCertificateProvider in certificatemanager to populate providerId.
	// +kubebuilder:validation:Optional
	ProviderIDSelector *v1.Selector `json:"providerIdSelector,omitempty" tf:"-"`

	// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS
	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`
}

type AutoCertificateObservation struct {

	// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The key algorithm used to generate the certificate.
	// The key algorithm used to generate the certificate
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty" tf:"key_algorithm,omitempty"`

	// (Computed)[string] The ID of the last certificate that was issued.
	// The ID of the last certificate that was issued
	LastIssuedCertificateID *string `json:"lastIssuedCertificateId,omitempty" tf:"last_issued_certificate_id,omitempty"`

	// [string] The location of the auto-certificate.
	// The location of the auto-certificate
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] A certificate name used for management purposes.
	// A certificate name used for management purposes
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The certificate provider used to issue the certificates.
	// The certificate provider used to issue the certificates
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS
	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`
}

type AutoCertificateParameters struct {

	// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// [string] The key algorithm used to generate the certificate.
	// The key algorithm used to generate the certificate
	// +kubebuilder:validation:Optional
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty" tf:"key_algorithm,omitempty"`

	// [string] The location of the auto-certificate.
	// The location of the auto-certificate
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/certificatemanager/v1alpha1.AutoCertificateProvider
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.AutoCertificateProviderLocation()
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Reference to a AutoCertificateProvider in certificatemanager to populate location.
	// +kubebuilder:validation:Optional
	LocationRef *v1.Reference `json:"locationRef,omitempty" tf:"-"`

	// Selector for a AutoCertificateProvider in certificatemanager to populate location.
	// +kubebuilder:validation:Optional
	LocationSelector *v1.Selector `json:"locationSelector,omitempty" tf:"-"`

	// [string] A certificate name used for management purposes.
	// A certificate name used for management purposes
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The certificate provider used to issue the certificates.
	// The certificate provider used to issue the certificates
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/certificatemanager/v1alpha1.AutoCertificateProvider
	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// Reference to a AutoCertificateProvider in certificatemanager to populate providerId.
	// +kubebuilder:validation:Optional
	ProviderIDRef *v1.Reference `json:"providerIdRef,omitempty" tf:"-"`

	// Selector for a AutoCertificateProvider in certificatemanager to populate providerId.
	// +kubebuilder:validation:Optional
	ProviderIDSelector *v1.Selector `json:"providerIdSelector,omitempty" tf:"-"`

	// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`
}

// AutoCertificateSpec defines the desired state of AutoCertificate
type AutoCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AutoCertificateInitParameters `json:"initProvider,omitempty"`
}

// AutoCertificateStatus defines the observed state of AutoCertificate.
type AutoCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AutoCertificate is the Schema for the AutoCertificates API. Creates and manages Certificate Manager AutoCertificate objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type AutoCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) && has(self.initProvider.commonName))",message="spec.forProvider.commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyAlgorithm) || (has(self.initProvider) && has(self.initProvider.keyAlgorithm))",message="spec.forProvider.keyAlgorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AutoCertificateSpec   `json:"spec"`
	Status AutoCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoCertificateList contains a list of AutoCertificates
type AutoCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoCertificate `json:"items"`
}

// Repository type metadata.
var (
	AutoCertificate_Kind             = "AutoCertificate"
	AutoCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoCertificate_Kind}.String()
	AutoCertificate_KindAPIVersion   = AutoCertificate_Kind + "." + CRDGroupVersion.String()
	AutoCertificate_GroupVersionKind = CRDGroupVersion.WithKind(AutoCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoCertificate{}, &AutoCertificateList{})
}
