// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AutoCertificateProviderInitParameters struct {

	// [string] The email address of the certificate requester.
	// The email address of the certificate requester
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [list] External account binding details.
	ExternalAccountBinding []ExternalAccountBindingInitParameters `json:"externalAccountBinding,omitempty" tf:"external_account_binding,omitempty"`

	// [string] The location of the provider.
	// The location of the certificate provider
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the certificate provider.
	// The name of the certificate provider
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The URL of the certificate provider.
	// The URL of the certificate provider
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type AutoCertificateProviderObservation struct {

	// [string] The email address of the certificate requester.
	// The email address of the certificate requester
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [list] External account binding details.
	ExternalAccountBinding []ExternalAccountBindingObservation `json:"externalAccountBinding,omitempty" tf:"external_account_binding,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The location of the provider.
	// The location of the certificate provider
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the certificate provider.
	// The name of the certificate provider
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The URL of the certificate provider.
	// The URL of the certificate provider
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type AutoCertificateProviderParameters struct {

	// [string] The email address of the certificate requester.
	// The email address of the certificate requester
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// [list] External account binding details.
	// +kubebuilder:validation:Optional
	ExternalAccountBinding []ExternalAccountBindingParameters `json:"externalAccountBinding,omitempty" tf:"external_account_binding,omitempty"`

	// [string] The location of the provider.
	// The location of the certificate provider
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the certificate provider.
	// The name of the certificate provider
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The URL of the certificate provider.
	// The URL of the certificate provider
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type ExternalAccountBindingInitParameters struct {

	// [string] The key ID of the external account binding.
	// The key ID of the external account binding
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// [string] The key secret of the external account binding
	// The secret of the external account binding
	KeySecretSecretRef v1.SecretKeySelector `json:"keySecretSecretRef" tf:"-"`
}

type ExternalAccountBindingObservation struct {

	// [string] The key ID of the external account binding.
	// The key ID of the external account binding
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

type ExternalAccountBindingParameters struct {

	// [string] The key ID of the external account binding.
	// The key ID of the external account binding
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId" tf:"key_id,omitempty"`

	// [string] The key secret of the external account binding
	// The secret of the external account binding
	// +kubebuilder:validation:Optional
	KeySecretSecretRef v1.SecretKeySelector `json:"keySecretSecretRef" tf:"-"`
}

// AutoCertificateProviderSpec defines the desired state of AutoCertificateProvider
type AutoCertificateProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoCertificateProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AutoCertificateProviderInitParameters `json:"initProvider,omitempty"`
}

// AutoCertificateProviderStatus defines the observed state of AutoCertificateProvider.
type AutoCertificateProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoCertificateProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AutoCertificateProvider is the Schema for the AutoCertificateProviders API. Creates and manages Certificate Manager provider objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type AutoCertificateProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.server) || (has(self.initProvider) && has(self.initProvider.server))",message="spec.forProvider.server is a required parameter"
	Spec   AutoCertificateProviderSpec   `json:"spec"`
	Status AutoCertificateProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoCertificateProviderList contains a list of AutoCertificateProviders
type AutoCertificateProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoCertificateProvider `json:"items"`
}

// Repository type metadata.
var (
	AutoCertificateProvider_Kind             = "AutoCertificateProvider"
	AutoCertificateProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoCertificateProvider_Kind}.String()
	AutoCertificateProvider_KindAPIVersion   = AutoCertificateProvider_Kind + "." + CRDGroupVersion.String()
	AutoCertificateProvider_GroupVersionKind = CRDGroupVersion.WithKind(AutoCertificateProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoCertificateProvider{}, &AutoCertificateProviderList{})
}
