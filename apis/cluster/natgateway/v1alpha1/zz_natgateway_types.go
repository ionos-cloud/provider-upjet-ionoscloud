// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type LansInitParameters struct {

	// [list] Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN.
	// Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN
	GatewayIps []*string `json:"gatewayIps,omitempty" tf:"gateway_ips,omitempty"`

	// [int] Id for the LAN connected to the NAT gateway.
	// Id for the LAN connected to the NAT gateway
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/compute/v1alpha1.Lan
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Lan in compute to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type LansObservation struct {

	// [list] Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN.
	// Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN
	GatewayIps []*string `json:"gatewayIps,omitempty" tf:"gateway_ips,omitempty"`

	// [int] Id for the LAN connected to the NAT gateway.
	// Id for the LAN connected to the NAT gateway
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`
}

type LansParameters struct {

	// [list] Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN.
	// Collection of gateway IP addresses of the NAT gateway. Will be auto-generated if not provided. Should ideally be an IP belonging to the same subnet as the LAN
	// +kubebuilder:validation:Optional
	GatewayIps []*string `json:"gatewayIps,omitempty" tf:"gateway_ips,omitempty"`

	// [int] Id for the LAN connected to the NAT gateway.
	// Id for the LAN connected to the NAT gateway
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/compute/v1alpha1.Lan
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Lan in compute to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NatgatewayInitParameters struct {

	// [string] A Datacenter's UUID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [list] A list of Local Area Networks the node pool should be part of.
	// A list of Local Area Networks the node pool should be part of
	Lans []LansInitParameters `json:"lans,omitempty" tf:"lans,omitempty"`

	// [string] Name of the NAT gateway.
	// Name of the NAT gateway
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
	// Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
	// +listType=set
	PublicIps []*string `json:"publicIps,omitempty" tf:"public_ips,omitempty"`
}

type NatgatewayObservation struct {

	// [string] A Datacenter's UUID.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// [int] Id for the LAN connected to the NAT gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [list] A list of Local Area Networks the node pool should be part of.
	// A list of Local Area Networks the node pool should be part of
	Lans []LansObservation `json:"lans,omitempty" tf:"lans,omitempty"`

	// [string] Name of the NAT gateway.
	// Name of the NAT gateway
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
	// Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
	// +listType=set
	PublicIps []*string `json:"publicIps,omitempty" tf:"public_ips,omitempty"`
}

type NatgatewayParameters struct {

	// [string] A Datacenter's UUID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/cluster/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.Reference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.Selector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [list] A list of Local Area Networks the node pool should be part of.
	// A list of Local Area Networks the node pool should be part of
	// +kubebuilder:validation:Optional
	Lans []LansParameters `json:"lans,omitempty" tf:"lans,omitempty"`

	// [string] Name of the NAT gateway.
	// Name of the NAT gateway
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
	// Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
	// +kubebuilder:validation:Optional
	// +listType=set
	PublicIps []*string `json:"publicIps,omitempty" tf:"public_ips,omitempty"`
}

// NatgatewaySpec defines the desired state of Natgateway
type NatgatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatgatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NatgatewayInitParameters `json:"initProvider,omitempty"`
}

// NatgatewayStatus defines the observed state of Natgateway.
type NatgatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatgatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Natgateway is the Schema for the Natgateways API. Creates and manages Nat Gateway objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type Natgateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lans) || (has(self.initProvider) && has(self.initProvider.lans))",message="spec.forProvider.lans is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicIps) || (has(self.initProvider) && has(self.initProvider.publicIps))",message="spec.forProvider.publicIps is a required parameter"
	Spec   NatgatewaySpec   `json:"spec"`
	Status NatgatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatgatewayList contains a list of Natgateways
type NatgatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Natgateway `json:"items"`
}

// Repository type metadata.
var (
	Natgateway_Kind             = "Natgateway"
	Natgateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Natgateway_Kind}.String()
	Natgateway_KindAPIVersion   = Natgateway_Kind + "." + CRDGroupVersion.String()
	Natgateway_GroupVersionKind = CRDGroupVersion.WithKind(Natgateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Natgateway{}, &NatgatewayList{})
}
