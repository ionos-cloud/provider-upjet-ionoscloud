// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectCopyInitParameters struct {

	// [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
	// The name of the bucket
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/objectstorage/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// [string] Specifies caching behavior along the request/reply chain.
	// Can be used to specify caching behavior along the request/reply chain
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// [string] Specifies presentational information for the object.
	// Specifies presentational information for the object copy
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// [string] Specifies what content encodings have been applied to the object.
	// Specifies what content encodings have been applied to the object copy and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// [string] The natural language or languages of the intended audience for the object.
	// The natural language or languages of the intended audience for the object copy
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language,omitempty"`

	// [string] A standard MIME type describing the format of the contents.
	// A standard MIME type describing the format of the contents
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Copies the object if its entity tag (ETag) matches the specified tag
	CopyIfMatch *string `json:"copyIfMatch,omitempty" tf:"copy_if_match,omitempty"`

	// Copies the object if it has been modified since the specified time
	CopyIfModifiedSince *string `json:"copyIfModifiedSince,omitempty" tf:"copy_if_modified_since,omitempty"`

	// Copies the object if its entity tag (ETag) is different than the specified ETag
	CopyIfNoneMatch *string `json:"copyIfNoneMatch,omitempty" tf:"copy_if_none_match,omitempty"`

	// Copies the object if it hasn't been modified since the specified time
	CopyIfUnmodifiedSince *string `json:"copyIfUnmodifiedSince,omitempty" tf:"copy_if_unmodified_since,omitempty"`

	// [string] The date and time at which the object is no longer cacheable.
	// The date and time at which the object copy is no longer cacheable
	Expires *string `json:"expires,omitempty" tf:"expires,omitempty"`

	// [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is false.
	// Specifies whether to delete the object copy even if it has a governance-type Object Copy Lock in place. You must explicitly pass a value of true for this parameter to delete the object copy.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// [string] The key of the object. Must be at least 1 character long.
	// The key of the object copy
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
	// A map of metadata to store with the object copy in IONOS Object Storage Object Copy Storage
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request
	MetadataDirective *string `json:"metadataDirective,omitempty" tf:"metadata_directive,omitempty"`

	// [string] Indicates whether a legal hold is in effect for the object. Valid values are ON and OFF.
	// Specifies whether a legal hold will be applied to this object copy.
	ObjectLockLegalHold *string `json:"objectLockLegalHold,omitempty" tf:"object_lock_legal_hold,omitempty"`

	// [string] The object lock mode that you want to apply to the object. Valid values are GOVERNANCE and COMPLIANCE.
	// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests.
	ObjectLockMode *string `json:"objectLockMode,omitempty" tf:"object_lock_mode,omitempty"`

	// [string] The date and time when the object lock retention expires.Must be in RFC3999 format
	// The date and time when you want this object copy's Object Copy Lock to expire. Must be formatted as a timestamp parameter.
	ObjectLockRetainUntilDate *string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date,omitempty"`

	// [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
	// The server-side encryption algorithm used when storing this object copy in IONOS Object Storage Object Copy Storage (AES256).
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
	// Specifies the algorithm to use to when encrypting the object copy (e.g., AES256).
	ServerSideEncryptionCustomerAlgorithm *string `json:"serverSideEncryptionCustomerAlgorithm,omitempty" tf:"server_side_encryption_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
	// Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data
	ServerSideEncryptionCustomerKey *string `json:"serverSideEncryptionCustomerKey,omitempty" tf:"server_side_encryption_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	ServerSideEncryptionCustomerKeyMd5 *string `json:"serverSideEncryptionCustomerKeyMd5,omitempty" tf:"server_side_encryption_customer_key_md5,omitempty"`

	// [string] The source of the object to be copied
	// The key of the source object
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
	// Specifies the algorithm to use to when decrypting the source object (e.g., AES256).
	SourceCustomerAlgorithm *string `json:"sourceCustomerAlgorithm,omitempty" tf:"source_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
	// Specifies the 256-bit, base64-encoded encryption key to use to decrypt the source object
	SourceCustomerKey *string `json:"sourceCustomerKey,omitempty" tf:"source_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	SourceCustomerKeyMd5 *string `json:"sourceCustomerKeyMd5,omitempty" tf:"source_customer_key_md5,omitempty"`

	// [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
	// The storage class of the object copy. Valid value is 'STANDARD'.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the object copy tag-set is copied from the source object or replaced with tag-set provided in the request
	TaggingDirective *string `json:"taggingDirective,omitempty" tf:"tagging_directive,omitempty"`

	// [map] The tag-set for the object.
	// The tag-set for the object copy
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// [string] Redirects requests for this object to another object in the same bucket or to an external URL.
	// If the bucket is configured as a website, redirects requests for this object copy to another object copy in the same bucket or to an external URL. IONOS Object Storage Object Copy Storage stores the value of this header in the object copy metadata
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect,omitempty"`
}

type ObjectCopyObservation struct {

	// [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
	// The name of the bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// [string] Specifies caching behavior along the request/reply chain.
	// Can be used to specify caching behavior along the request/reply chain
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// [string] Specifies presentational information for the object.
	// Specifies presentational information for the object copy
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// [string] Specifies what content encodings have been applied to the object.
	// Specifies what content encodings have been applied to the object copy and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// [string] The natural language or languages of the intended audience for the object.
	// The natural language or languages of the intended audience for the object copy
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language,omitempty"`

	// [string] A standard MIME type describing the format of the contents.
	// A standard MIME type describing the format of the contents
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Copies the object if its entity tag (ETag) matches the specified tag
	CopyIfMatch *string `json:"copyIfMatch,omitempty" tf:"copy_if_match,omitempty"`

	// Copies the object if it has been modified since the specified time
	CopyIfModifiedSince *string `json:"copyIfModifiedSince,omitempty" tf:"copy_if_modified_since,omitempty"`

	// Copies the object if its entity tag (ETag) is different than the specified ETag
	CopyIfNoneMatch *string `json:"copyIfNoneMatch,omitempty" tf:"copy_if_none_match,omitempty"`

	// Copies the object if it hasn't been modified since the specified time
	CopyIfUnmodifiedSince *string `json:"copyIfUnmodifiedSince,omitempty" tf:"copy_if_unmodified_since,omitempty"`

	// (Computed)[string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
	// An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// [string] The date and time at which the object is no longer cacheable.
	// The date and time at which the object copy is no longer cacheable
	Expires *string `json:"expires,omitempty" tf:"expires,omitempty"`

	// [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is false.
	// Specifies whether to delete the object copy even if it has a governance-type Object Copy Lock in place. You must explicitly pass a value of true for this parameter to delete the object copy.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The key of the object. Must be at least 1 character long.
	// The key of the object copy
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Computed)[string] The date and time at which the object was last modified.
	// The date and time at which the object copy was last modified
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
	// A map of metadata to store with the object copy in IONOS Object Storage Object Copy Storage
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request
	MetadataDirective *string `json:"metadataDirective,omitempty" tf:"metadata_directive,omitempty"`

	// [string] Indicates whether a legal hold is in effect for the object. Valid values are ON and OFF.
	// Specifies whether a legal hold will be applied to this object copy.
	ObjectLockLegalHold *string `json:"objectLockLegalHold,omitempty" tf:"object_lock_legal_hold,omitempty"`

	// [string] The object lock mode that you want to apply to the object. Valid values are GOVERNANCE and COMPLIANCE.
	// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests.
	ObjectLockMode *string `json:"objectLockMode,omitempty" tf:"object_lock_mode,omitempty"`

	// [string] The date and time when the object lock retention expires.Must be in RFC3999 format
	// The date and time when you want this object copy's Object Copy Lock to expire. Must be formatted as a timestamp parameter.
	ObjectLockRetainUntilDate *string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date,omitempty"`

	// [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
	// The server-side encryption algorithm used when storing this object copy in IONOS Object Storage Object Copy Storage (AES256).
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
	// Specifies the algorithm to use to when encrypting the object copy (e.g., AES256).
	ServerSideEncryptionCustomerAlgorithm *string `json:"serverSideEncryptionCustomerAlgorithm,omitempty" tf:"server_side_encryption_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
	// Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data
	ServerSideEncryptionCustomerKey *string `json:"serverSideEncryptionCustomerKey,omitempty" tf:"server_side_encryption_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	ServerSideEncryptionCustomerKeyMd5 *string `json:"serverSideEncryptionCustomerKeyMd5,omitempty" tf:"server_side_encryption_customer_key_md5,omitempty"`

	// [string] The source of the object to be copied
	// The key of the source object
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
	// Specifies the algorithm to use to when decrypting the source object (e.g., AES256).
	SourceCustomerAlgorithm *string `json:"sourceCustomerAlgorithm,omitempty" tf:"source_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
	// Specifies the 256-bit, base64-encoded encryption key to use to decrypt the source object
	SourceCustomerKey *string `json:"sourceCustomerKey,omitempty" tf:"source_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	SourceCustomerKeyMd5 *string `json:"sourceCustomerKeyMd5,omitempty" tf:"source_customer_key_md5,omitempty"`

	// [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
	// The storage class of the object copy. Valid value is 'STANDARD'.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the object copy tag-set is copied from the source object or replaced with tag-set provided in the request
	TaggingDirective *string `json:"taggingDirective,omitempty" tf:"tagging_directive,omitempty"`

	// [map] The tag-set for the object.
	// The tag-set for the object copy
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Computed)[string] The version of the object.
	// The version of the object copy
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`

	// [string] Redirects requests for this object to another object in the same bucket or to an external URL.
	// If the bucket is configured as a website, redirects requests for this object copy to another object copy in the same bucket or to an external URL. IONOS Object Storage Object Copy Storage stores the value of this header in the object copy metadata
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect,omitempty"`
}

type ObjectCopyParameters struct {

	// [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
	// The name of the bucket
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/objectstorage/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in objectstorage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// [string] Specifies caching behavior along the request/reply chain.
	// Can be used to specify caching behavior along the request/reply chain
	// +kubebuilder:validation:Optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// [string] Specifies presentational information for the object.
	// Specifies presentational information for the object copy
	// +kubebuilder:validation:Optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// [string] Specifies what content encodings have been applied to the object.
	// Specifies what content encodings have been applied to the object copy and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field
	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// [string] The natural language or languages of the intended audience for the object.
	// The natural language or languages of the intended audience for the object copy
	// +kubebuilder:validation:Optional
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language,omitempty"`

	// [string] A standard MIME type describing the format of the contents.
	// A standard MIME type describing the format of the contents
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Copies the object if its entity tag (ETag) matches the specified tag
	// +kubebuilder:validation:Optional
	CopyIfMatch *string `json:"copyIfMatch,omitempty" tf:"copy_if_match,omitempty"`

	// Copies the object if it has been modified since the specified time
	// +kubebuilder:validation:Optional
	CopyIfModifiedSince *string `json:"copyIfModifiedSince,omitempty" tf:"copy_if_modified_since,omitempty"`

	// Copies the object if its entity tag (ETag) is different than the specified ETag
	// +kubebuilder:validation:Optional
	CopyIfNoneMatch *string `json:"copyIfNoneMatch,omitempty" tf:"copy_if_none_match,omitempty"`

	// Copies the object if it hasn't been modified since the specified time
	// +kubebuilder:validation:Optional
	CopyIfUnmodifiedSince *string `json:"copyIfUnmodifiedSince,omitempty" tf:"copy_if_unmodified_since,omitempty"`

	// [string] The date and time at which the object is no longer cacheable.
	// The date and time at which the object copy is no longer cacheable
	// +kubebuilder:validation:Optional
	Expires *string `json:"expires,omitempty" tf:"expires,omitempty"`

	// [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is false.
	// Specifies whether to delete the object copy even if it has a governance-type Object Copy Lock in place. You must explicitly pass a value of true for this parameter to delete the object copy.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// [string] The key of the object. Must be at least 1 character long.
	// The key of the object copy
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
	// A map of metadata to store with the object copy in IONOS Object Storage Object Copy Storage
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request
	// +kubebuilder:validation:Optional
	MetadataDirective *string `json:"metadataDirective,omitempty" tf:"metadata_directive,omitempty"`

	// [string] Indicates whether a legal hold is in effect for the object. Valid values are ON and OFF.
	// Specifies whether a legal hold will be applied to this object copy.
	// +kubebuilder:validation:Optional
	ObjectLockLegalHold *string `json:"objectLockLegalHold,omitempty" tf:"object_lock_legal_hold,omitempty"`

	// [string] The object lock mode that you want to apply to the object. Valid values are GOVERNANCE and COMPLIANCE.
	// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests.
	// +kubebuilder:validation:Optional
	ObjectLockMode *string `json:"objectLockMode,omitempty" tf:"object_lock_mode,omitempty"`

	// [string] The date and time when the object lock retention expires.Must be in RFC3999 format
	// The date and time when you want this object copy's Object Copy Lock to expire. Must be formatted as a timestamp parameter.
	// +kubebuilder:validation:Optional
	ObjectLockRetainUntilDate *string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date,omitempty"`

	// [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
	// The server-side encryption algorithm used when storing this object copy in IONOS Object Storage Object Copy Storage (AES256).
	// +kubebuilder:validation:Optional
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
	// Specifies the algorithm to use to when encrypting the object copy (e.g., AES256).
	// +kubebuilder:validation:Optional
	ServerSideEncryptionCustomerAlgorithm *string `json:"serverSideEncryptionCustomerAlgorithm,omitempty" tf:"server_side_encryption_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
	// Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data
	// +kubebuilder:validation:Optional
	ServerSideEncryptionCustomerKey *string `json:"serverSideEncryptionCustomerKey,omitempty" tf:"server_side_encryption_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	// +kubebuilder:validation:Optional
	ServerSideEncryptionCustomerKeyMd5 *string `json:"serverSideEncryptionCustomerKeyMd5,omitempty" tf:"server_side_encryption_customer_key_md5,omitempty"`

	// [string] The source of the object to be copied
	// The key of the source object
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
	// Specifies the algorithm to use to when decrypting the source object (e.g., AES256).
	// +kubebuilder:validation:Optional
	SourceCustomerAlgorithm *string `json:"sourceCustomerAlgorithm,omitempty" tf:"source_customer_algorithm,omitempty"`

	// [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
	// Specifies the 256-bit, base64-encoded encryption key to use to decrypt the source object
	// +kubebuilder:validation:Optional
	SourceCustomerKey *string `json:"sourceCustomerKey,omitempty" tf:"source_customer_key,omitempty"`

	// [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
	// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage Object Copy Storage uses this header for a message integrity check  to ensure that the encryption key was transmitted without error
	// +kubebuilder:validation:Optional
	SourceCustomerKeyMd5 *string `json:"sourceCustomerKeyMd5,omitempty" tf:"source_customer_key_md5,omitempty"`

	// [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
	// The storage class of the object copy. Valid value is 'STANDARD'.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are COPY and REPLACE.
	// Specifies whether the object copy tag-set is copied from the source object or replaced with tag-set provided in the request
	// +kubebuilder:validation:Optional
	TaggingDirective *string `json:"taggingDirective,omitempty" tf:"tagging_directive,omitempty"`

	// [map] The tag-set for the object.
	// The tag-set for the object copy
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// [string] Redirects requests for this object to another object in the same bucket or to an external URL.
	// If the bucket is configured as a website, redirects requests for this object copy to another object copy in the same bucket or to an external URL. IONOS Object Storage Object Copy Storage stores the value of this header in the object copy metadata
	// +kubebuilder:validation:Optional
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect,omitempty"`
}

// ObjectCopySpec defines the desired state of ObjectCopy
type ObjectCopySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObjectCopyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ObjectCopyInitParameters `json:"initProvider,omitempty"`
}

// ObjectCopyStatus defines the observed state of ObjectCopy.
type ObjectCopyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObjectCopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ObjectCopy is the Schema for the ObjectCopys API. Creates a copy of an object that is already stored in IONOS Object Storage.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type ObjectCopy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	Spec   ObjectCopySpec   `json:"spec"`
	Status ObjectCopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectCopyList contains a list of ObjectCopys
type ObjectCopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectCopy `json:"items"`
}

// Repository type metadata.
var (
	ObjectCopy_Kind             = "ObjectCopy"
	ObjectCopy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObjectCopy_Kind}.String()
	ObjectCopy_KindAPIVersion   = ObjectCopy_Kind + "." + CRDGroupVersion.String()
	ObjectCopy_GroupVersionKind = CRDGroupVersion.WithKind(ObjectCopy_Kind)
)

func init() {
	SchemeBuilder.Register(&ObjectCopy{}, &ObjectCopyList{})
}
