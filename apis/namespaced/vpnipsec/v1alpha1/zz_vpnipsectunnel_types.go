// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AuthInitParameters struct {

	// [string] The authentication method to use for IPSec Authentication. Possible values: PSK.
	// Default value: PSK.
	// The Authentication Method to use for IPSec Authentication.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// [string] The pre-shared key to use for IPSec Authentication. Note: Required if method is
	// PSK.
	// The Pre-Shared Key to use for IPSec Authentication. Note: Required if method is PSK.
	PskKeySecretRef *v1.LocalSecretKeySelector `json:"pskKeySecretRef,omitempty" tf:"-"`
}

type AuthObservation struct {

	// [string] The authentication method to use for IPSec Authentication. Possible values: PSK.
	// Default value: PSK.
	// The Authentication Method to use for IPSec Authentication.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type AuthParameters struct {

	// [string] The authentication method to use for IPSec Authentication. Possible values: PSK.
	// Default value: PSK.
	// The Authentication Method to use for IPSec Authentication.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// [string] The pre-shared key to use for IPSec Authentication. Note: Required if method is
	// PSK.
	// The Pre-Shared Key to use for IPSec Authentication. Note: Required if method is PSK.
	// +kubebuilder:validation:Optional
	PskKeySecretRef *v1.LocalSecretKeySelector `json:"pskKeySecretRef,omitempty" tf:"-"`
}

type EspInitParameters struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type EspObservation struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type EspParameters struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	// +kubebuilder:validation:Optional
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type IkeInitParameters struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type IkeObservation struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type IkeParameters struct {

	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: 15-MODP3072, 16-MODP4096, 19-ECP256, 20-ECP384, 21-ECP521, 28-ECP256BP, 29-ECP384BP, 30-ECP512BP.
	// Default value: 16-MODP4096.
	// The Diffie-Hellman Group to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	DiffieHellmanGroup *string `json:"diffieHellmanGroup,omitempty" tf:"diffie_hellman_group,omitempty"`

	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: AES128, AES256, AES128-CTR, AES256-CTR, AES128-GCM-16, AES256-GCM-16, AES128-GCM-12, AES256-GCM-12, AES128-CCM-12,
	// AES256-CCM-12. Default value: AES256.
	// The encryption algorithm to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: SHA256, SHA384, SHA512, AES-XCBC. Default value: SHA256.
	// The integrity algorithm to use for IPSec Encryption.
	// +kubebuilder:validation:Optional
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// [string] The phase lifetime in seconds. Minimum value: 3600. Maximum value: 86400.
	// Default value: 86400.
	// The phase lifetime in seconds.
	// +kubebuilder:validation:Optional
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type VpnIpsecTunnelInitParameters struct {

	// [string] Properties with all data needed to define IPSec Authentication. Minimum items: 1. Maximum
	// items: 1.
	// Properties with all data needed to define IPSec Authentication.
	Auth []AuthInitParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// [list] The network CIDRs on the "Left" side that are allowed to connect to the IPSec
	// tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1.
	// Maximum items: 20.
	// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
	CloudNetworkCidrs []*string `json:"cloudNetworkCidrs,omitempty" tf:"cloud_network_cidrs,omitempty"`

	// [string] The human-readable description of your IPSec Gateway Tunnel.
	// The human-readable description of your IPSec Gateway Tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [list] Settings for the IPSec SA (ESP) phase. Minimum items: 1. Maximum items: 1.
	// Settings for the IPSec SA (ESP) phase.
	Esp []EspInitParameters `json:"esp,omitempty" tf:"esp,omitempty"`

	// [string] The ID of the IPSec Gateway that the tunnel belongs to.
	// The ID of the IPSec Gateway that the tunnel belongs to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/vpnipsec/v1alpha1.VpnIpsecGateway
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a VpnIpsecGateway in vpnipsec to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.NamespacedReference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a VpnIpsecGateway in vpnipsec to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.NamespacedSelector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [list] Settings for the initial security exchange phase. Minimum items: 1. Maximum items: 1.
	// Settings for the initial security exchange phase.
	Ike *IkeInitParameters `json:"ike,omitempty" tf:"ike,omitempty"`

	// [string] The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the IPSec Gateway Tunnel.
	// The human-readable name of your IPSec Gateway Tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The network CIDRs on the "Right" side that are allowed to connect to the IPSec
	// tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1. Maximum items: 20.
	// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.
	PeerNetworkCidrs []*string `json:"peerNetworkCidrs,omitempty" tf:"peer_network_cidrs,omitempty"`

	// [string] The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	RemoteHost *string `json:"remoteHost,omitempty" tf:"remote_host,omitempty"`
}

type VpnIpsecTunnelObservation struct {

	// [string] Properties with all data needed to define IPSec Authentication. Minimum items: 1. Maximum
	// items: 1.
	// Properties with all data needed to define IPSec Authentication.
	Auth []AuthObservation `json:"auth,omitempty" tf:"auth,omitempty"`

	// [list] The network CIDRs on the "Left" side that are allowed to connect to the IPSec
	// tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1.
	// Maximum items: 20.
	// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
	CloudNetworkCidrs []*string `json:"cloudNetworkCidrs,omitempty" tf:"cloud_network_cidrs,omitempty"`

	// [string] The human-readable description of your IPSec Gateway Tunnel.
	// The human-readable description of your IPSec Gateway Tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [list] Settings for the IPSec SA (ESP) phase. Minimum items: 1. Maximum items: 1.
	// Settings for the IPSec SA (ESP) phase.
	Esp []EspObservation `json:"esp,omitempty" tf:"esp,omitempty"`

	// [string] The ID of the IPSec Gateway that the tunnel belongs to.
	// The ID of the IPSec Gateway that the tunnel belongs to.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [list] Settings for the initial security exchange phase. Minimum items: 1. Maximum items: 1.
	// Settings for the initial security exchange phase.
	Ike *IkeObservation `json:"ike,omitempty" tf:"ike,omitempty"`

	// [string] The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the IPSec Gateway Tunnel.
	// The human-readable name of your IPSec Gateway Tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The network CIDRs on the "Right" side that are allowed to connect to the IPSec
	// tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1. Maximum items: 20.
	// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.
	PeerNetworkCidrs []*string `json:"peerNetworkCidrs,omitempty" tf:"peer_network_cidrs,omitempty"`

	// [string] The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	RemoteHost *string `json:"remoteHost,omitempty" tf:"remote_host,omitempty"`
}

type VpnIpsecTunnelParameters struct {

	// [string] Properties with all data needed to define IPSec Authentication. Minimum items: 1. Maximum
	// items: 1.
	// Properties with all data needed to define IPSec Authentication.
	// +kubebuilder:validation:Optional
	Auth []AuthParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// [list] The network CIDRs on the "Left" side that are allowed to connect to the IPSec
	// tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1.
	// Maximum items: 20.
	// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
	// +kubebuilder:validation:Optional
	CloudNetworkCidrs []*string `json:"cloudNetworkCidrs,omitempty" tf:"cloud_network_cidrs,omitempty"`

	// [string] The human-readable description of your IPSec Gateway Tunnel.
	// The human-readable description of your IPSec Gateway Tunnel.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [list] Settings for the IPSec SA (ESP) phase. Minimum items: 1. Maximum items: 1.
	// Settings for the IPSec SA (ESP) phase.
	// +kubebuilder:validation:Optional
	Esp []EspParameters `json:"esp,omitempty" tf:"esp,omitempty"`

	// [string] The ID of the IPSec Gateway that the tunnel belongs to.
	// The ID of the IPSec Gateway that the tunnel belongs to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/vpnipsec/v1alpha1.VpnIpsecGateway
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a VpnIpsecGateway in vpnipsec to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.NamespacedReference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a VpnIpsecGateway in vpnipsec to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.NamespacedSelector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [list] Settings for the initial security exchange phase. Minimum items: 1. Maximum items: 1.
	// Settings for the initial security exchange phase.
	// +kubebuilder:validation:Optional
	Ike *IkeParameters `json:"ike,omitempty" tf:"ike,omitempty"`

	// [string] The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the IPSec Gateway Tunnel.
	// The human-readable name of your IPSec Gateway Tunnel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] The network CIDRs on the "Right" side that are allowed to connect to the IPSec
	// tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses. Minimum items: 1. Maximum items: 20.
	// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.
	// +kubebuilder:validation:Optional
	PeerNetworkCidrs []*string `json:"peerNetworkCidrs,omitempty" tf:"peer_network_cidrs,omitempty"`

	// [string] The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
	// +kubebuilder:validation:Optional
	RemoteHost *string `json:"remoteHost,omitempty" tf:"remote_host,omitempty"`
}

// VpnIpsecTunnelSpec defines the desired state of VpnIpsecTunnel
type VpnIpsecTunnelSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            VpnIpsecTunnelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpnIpsecTunnelInitParameters `json:"initProvider,omitempty"`
}

// VpnIpsecTunnelStatus defines the observed state of VpnIpsecTunnel.
type VpnIpsecTunnelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpnIpsecTunnelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpnIpsecTunnel is the Schema for the VpnIpsecTunnels API. IPSec Gateway Tunnel
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type VpnIpsecTunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.auth) || (has(self.initProvider) && has(self.initProvider.auth))",message="spec.forProvider.auth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudNetworkCidrs) || (has(self.initProvider) && has(self.initProvider.cloudNetworkCidrs))",message="spec.forProvider.cloudNetworkCidrs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.esp) || (has(self.initProvider) && has(self.initProvider.esp))",message="spec.forProvider.esp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ike) || (has(self.initProvider) && has(self.initProvider.ike))",message="spec.forProvider.ike is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peerNetworkCidrs) || (has(self.initProvider) && has(self.initProvider.peerNetworkCidrs))",message="spec.forProvider.peerNetworkCidrs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.remoteHost) || (has(self.initProvider) && has(self.initProvider.remoteHost))",message="spec.forProvider.remoteHost is a required parameter"
	Spec   VpnIpsecTunnelSpec   `json:"spec"`
	Status VpnIpsecTunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnIpsecTunnelList contains a list of VpnIpsecTunnels
type VpnIpsecTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnIpsecTunnel `json:"items"`
}

// Repository type metadata.
var (
	VpnIpsecTunnel_Kind             = "VpnIpsecTunnel"
	VpnIpsecTunnel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpnIpsecTunnel_Kind}.String()
	VpnIpsecTunnel_KindAPIVersion   = VpnIpsecTunnel_Kind + "." + CRDGroupVersion.String()
	VpnIpsecTunnel_GroupVersionKind = CRDGroupVersion.WithKind(VpnIpsecTunnel_Kind)
)

func init() {
	SchemeBuilder.Register(&VpnIpsecTunnel{}, &VpnIpsecTunnelList{})
}
