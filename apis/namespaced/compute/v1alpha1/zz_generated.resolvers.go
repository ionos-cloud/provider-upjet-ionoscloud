// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	common "github.com/ionos-cloud/provider-upjet-ionoscloud/config/common"
	apisresolver "github.com/ionos-cloud/provider-upjet-ionoscloud/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *BootDeviceSelection) ResolveReferences( // ResolveReferences of this BootDeviceSelection.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BootDeviceID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BootDeviceIDRef,
			Selector:     mg.Spec.ForProvider.BootDeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BootDeviceID")
	}
	mg.Spec.ForProvider.BootDeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BootDeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServerIDRef,
			Selector:     mg.Spec.ForProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BootDeviceID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BootDeviceIDRef,
			Selector:     mg.Spec.InitProvider.BootDeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BootDeviceID")
	}
	mg.Spec.InitProvider.BootDeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BootDeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServerIDRef,
			Selector:     mg.Spec.InitProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerID")
	}
	mg.Spec.InitProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CubeServer.
func (mg *CubeServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Nic.LanRef,
				Selector:     mg.Spec.ForProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Nic.Lan")
		}
		mg.Spec.ForProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Nic.LanRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Nic.LanRef,
				Selector:     mg.Spec.InitProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Nic.Lan")
		}
		mg.Spec.InitProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Nic.LanRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Nic", "NicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NicID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NicIDRef,
			Selector:     mg.Spec.ForProvider.NicIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NicID")
	}
	mg.Spec.ForProvider.NicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NicIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServerIDRef,
			Selector:     mg.Spec.ForProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceIP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SourceIPRef,
			Selector:     mg.Spec.ForProvider.SourceIPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceIP")
	}
	mg.Spec.ForProvider.SourceIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceIPRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetIP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetIPRef,
			Selector:     mg.Spec.ForProvider.TargetIPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetIP")
	}
	mg.Spec.ForProvider.TargetIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetIPRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Nic", "NicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NicID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NicIDRef,
			Selector:     mg.Spec.InitProvider.NicIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NicID")
	}
	mg.Spec.InitProvider.NicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NicIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServerIDRef,
			Selector:     mg.Spec.InitProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerID")
	}
	mg.Spec.InitProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceIP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SourceIPRef,
			Selector:     mg.Spec.InitProvider.SourceIPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceIP")
	}
	mg.Spec.InitProvider.SourceIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceIPRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetIP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetIPRef,
			Selector:     mg.Spec.InitProvider.TargetIPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetIP")
	}
	mg.Spec.InitProvider.TargetIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetIPRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Group.
func (mg *Group) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.UserIds),
			Extract:       reference.ExternalName(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.UserIdsRefs,
			Selector:      mg.Spec.ForProvider.UserIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserIds")
	}
	mg.Spec.ForProvider.UserIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.UserIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.UserIds),
			Extract:       reference.ExternalName(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.UserIdsRefs,
			Selector:      mg.Spec.InitProvider.UserIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserIds")
	}
	mg.Spec.InitProvider.UserIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.UserIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Ipfailover.
func (mg *Ipfailover) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.IPRef,
			Selector:     mg.Spec.ForProvider.IPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IP")
	}
	mg.Spec.ForProvider.IP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LanID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.LanIDRef,
			Selector:     mg.Spec.ForProvider.LanIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LanID")
	}
	mg.Spec.ForProvider.LanID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LanIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Nicuuid),
			Extract:      common.ServerPrimaryNIC(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NicuuidRef,
			Selector:     mg.Spec.ForProvider.NicuuidSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Nicuuid")
	}
	mg.Spec.ForProvider.Nicuuid = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NicuuidRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Ipblock", "IpblockList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IP),
			Extract:      common.FirstIPBlockIP(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.IPRef,
			Selector:     mg.Spec.InitProvider.IPSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IP")
	}
	mg.Spec.InitProvider.IP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LanID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.LanIDRef,
			Selector:     mg.Spec.InitProvider.LanIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LanID")
	}
	mg.Spec.InitProvider.LanID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LanIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Nicuuid),
			Extract:      common.ServerPrimaryNIC(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NicuuidRef,
			Selector:     mg.Spec.InitProvider.NicuuidSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Nicuuid")
	}
	mg.Spec.InitProvider.Nicuuid = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NicuuidRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Lan.
func (mg *Lan) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Crossconnect", "CrossconnectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Pcc),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PccRef,
			Selector:     mg.Spec.ForProvider.PccSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Pcc")
	}
	mg.Spec.ForProvider.Pcc = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PccRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Crossconnect", "CrossconnectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Pcc),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.PccRef,
			Selector:     mg.Spec.InitProvider.PccSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Pcc")
	}
	mg.Spec.InitProvider.Pcc = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PccRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Loadbalancer.
func (mg *Loadbalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.NicIds),
			Extract:       resource.ExtractParamPath("primary_nic", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.NicIdsRefs,
			Selector:      mg.Spec.ForProvider.NicIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NicIds")
	}
	mg.Spec.ForProvider.NicIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.NicIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.NicIds),
			Extract:       resource.ExtractParamPath("primary_nic", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.NicIdsRefs,
			Selector:      mg.Spec.InitProvider.NicIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NicIds")
	}
	mg.Spec.InitProvider.NicIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.NicIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Nic.
func (mg *Nic) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Lan),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.LanRef,
			Selector:     mg.Spec.ForProvider.LanSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Lan")
	}
	mg.Spec.ForProvider.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LanRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServerIDRef,
			Selector:     mg.Spec.ForProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Lan),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.LanRef,
			Selector:     mg.Spec.InitProvider.LanSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Lan")
	}
	mg.Spec.InitProvider.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LanRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServerIDRef,
			Selector:     mg.Spec.InitProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerID")
	}
	mg.Spec.InitProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Server.
func (mg *Server) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Nic.LanRef,
				Selector:     mg.Spec.ForProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Nic.Lan")
		}
		mg.Spec.ForProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Nic.LanRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Nic.LanRef,
				Selector:     mg.Spec.InitProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Nic.Lan")
		}
		mg.Spec.InitProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Nic.LanRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Share.
func (mg *Share) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.GroupIDRef,
			Selector:     mg.Spec.ForProvider.GroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceIDRef,
			Selector:     mg.Spec.ForProvider.ResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.GroupIDRef,
			Selector:     mg.Spec.InitProvider.GroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupID")
	}
	mg.Spec.InitProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ResourceIDRef,
			Selector:     mg.Spec.InitProvider.ResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceID")
	}
	mg.Spec.InitProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Snapshot.
func (mg *Snapshot) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VolumeIDRef,
			Selector:     mg.Spec.ForProvider.VolumeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VolumeID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VolumeIDRef,
			Selector:     mg.Spec.InitProvider.VolumeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VolumeID")
	}
	mg.Spec.InitProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.GroupIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.GroupIdsRefs,
			Selector:      mg.Spec.ForProvider.GroupIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupIds")
	}
	mg.Spec.ForProvider.GroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.GroupIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.GroupIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.GroupIdsRefs,
			Selector:      mg.Spec.InitProvider.GroupIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupIds")
	}
	mg.Spec.InitProvider.GroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.GroupIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this VCPUServer.
func (mg *VCPUServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Nic.LanRef,
				Selector:     mg.Spec.ForProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Nic.Lan")
		}
		mg.Spec.ForProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Nic.LanRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Nic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Lan", "LanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Nic.Lan),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Nic.LanRef,
				Selector:     mg.Spec.InitProvider.Nic.LanSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Nic.Lan")
		}
		mg.Spec.InitProvider.Nic.Lan = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Nic.LanRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Volume.
func (mg *Volume) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatacenterIDRef,
			Selector:     mg.Spec.ForProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatacenterID")
	}
	mg.Spec.ForProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServerIDRef,
			Selector:     mg.Spec.ForProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Datacenter", "DatacenterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatacenterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatacenterIDRef,
			Selector:     mg.Spec.InitProvider.DatacenterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatacenterID")
	}
	mg.Spec.InitProvider.DatacenterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatacenterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.upjet-ionoscloud.ionoscloud.io", "v1alpha1", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServerIDRef,
			Selector:     mg.Spec.InitProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerID")
	}
	mg.Spec.InitProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}
