// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type FlowlogInitParameters struct {

	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: ACCEPTED, REJECTED, ALL. Immutable, forces re-recreation of the nic resource.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
	// The bucket name of an existing IONOS Object Storage bucket. Immutable, forces re-recreation of the nic resource.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-recreation of the nic resource.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// [string] The name of the LAN.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FlowlogObservation struct {

	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: ACCEPTED, REJECTED, ALL. Immutable, forces re-recreation of the nic resource.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
	// The bucket name of an existing IONOS Object Storage bucket. Immutable, forces re-recreation of the nic resource.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-recreation of the nic resource.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Computed) The ID of the NIC.
	// The resource's unique identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The name of the LAN.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FlowlogParameters struct {

	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: ACCEPTED, REJECTED, ALL. Immutable, forces re-recreation of the nic resource.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
	// The bucket name of an existing IONOS Object Storage bucket. Immutable, forces re-recreation of the nic resource.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-recreation of the nic resource.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction" tf:"direction,omitempty"`

	// [string] The name of the LAN.
	// The resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type NicInitParameters_2 struct {

	// [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	// [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	// [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination
	// IP addresses, source and destination ports, number of packets, amount of bytes,
	// the start and end time of the recording, and the type of protocol –
	// and log the extent to which your instances are being accessed.
	Flowlog *FlowlogInitParameters `json:"flowlog,omitempty" tf:"flowlog,omitempty"`

	// (Computed, Optional) Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
	// IPv6 CIDR block assigned to the NIC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC's Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC's CIDR block.
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	// [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// [integer] The LAN ID the NIC will sit on.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Lan
	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.NamespacedReference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.NamespacedSelector `json:"lanSelector,omitempty" tf:"-"`

	// The MAC address of the NIC. Can be set on creation only. If not set, one will be assigned automatically by the API. Immutable, update forces re-creation.
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the LAN.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The ID of a server.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Server
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.NamespacedReference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.NamespacedSelector `json:"serverIdSelector,omitempty" tf:"-"`
}

type NicObservation_2 struct {

	// [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// [string] The ID of a Virtual Data Center.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// (Computed) The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
	DeviceNumber *float64 `json:"deviceNumber,omitempty" tf:"device_number,omitempty"`

	// [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	// [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	// [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination
	// IP addresses, source and destination ports, number of packets, amount of bytes,
	// the start and end time of the recording, and the type of protocol –
	// and log the extent to which your instances are being accessed.
	Flowlog *FlowlogObservation `json:"flowlog,omitempty" tf:"flowlog,omitempty"`

	// (Computed) The ID of the NIC.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed, Optional) Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
	// IPv6 CIDR block assigned to the NIC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC's Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC's CIDR block.
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	// [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// [integer] The LAN ID the NIC will sit on.
	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	// The MAC address of the NIC. Can be set on creation only. If not set, one will be assigned automatically by the API. Immutable, update forces re-creation.
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the LAN.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Computed) The PCI slot number of the Nic.
	PciSlot *float64 `json:"pciSlot,omitempty" tf:"pci_slot,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The ID of a server.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

type NicParameters_2 struct {

	// [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	// +kubebuilder:validation:Optional
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	// [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	// +kubebuilder:validation:Optional
	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	// [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	// +kubebuilder:validation:Optional
	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination
	// IP addresses, source and destination ports, number of packets, amount of bytes,
	// the start and end time of the recording, and the type of protocol –
	// and log the extent to which your instances are being accessed.
	// +kubebuilder:validation:Optional
	Flowlog *FlowlogParameters `json:"flowlog,omitempty" tf:"flowlog,omitempty"`

	// (Computed, Optional) Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
	// IPv6 CIDR block assigned to the NIC.
	// +kubebuilder:validation:Optional
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC's Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC's CIDR block.
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	// +kubebuilder:validation:Optional
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	// [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	// +kubebuilder:validation:Optional
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// [integer] The LAN ID the NIC will sit on.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Lan
	// +kubebuilder:validation:Optional
	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.NamespacedReference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.NamespacedSelector `json:"lanSelector,omitempty" tf:"-"`

	// The MAC address of the NIC. Can be set on creation only. If not set, one will be assigned automatically by the API. Immutable, update forces re-creation.
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the LAN.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The ID of a server.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Server
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.NamespacedReference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.NamespacedSelector `json:"serverIdSelector,omitempty" tf:"-"`
}

// NicSpec defines the desired state of Nic
type NicSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            NicParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NicInitParameters_2 `json:"initProvider,omitempty"`
}

// NicStatus defines the observed state of Nic.
type NicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NicObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Nic is the Schema for the Nics API. Creates and manages Network Interface objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type Nic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NicSpec   `json:"spec"`
	Status            NicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NicList contains a list of Nics
type NicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nic `json:"items"`
}

// Repository type metadata.
var (
	Nic_Kind             = "Nic"
	Nic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nic_Kind}.String()
	Nic_KindAPIVersion   = Nic_Kind + "." + CRDGroupVersion.String()
	Nic_GroupVersionKind = CRDGroupVersion.WithKind(Nic_Kind)
)

func init() {
	SchemeBuilder.Register(&Nic{}, &NicList{})
}
