// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type FirewallInitParameters_2 struct {

	// [string] The Virtual Data Center ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the firewall rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The NIC ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Nic
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a Nic in compute to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.NamespacedReference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a Nic in compute to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.NamespacedSelector `json:"nicIdSelector,omitempty" tf:"-"`

	// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// [string] The Server ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Server
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.NamespacedReference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.NamespacedSelector `json:"serverIdSelector,omitempty" tf:"-"`

	// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Ipblock
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.FirstIPBlockIP()
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Reference to a Ipblock in compute to populate sourceIp.
	// +kubebuilder:validation:Optional
	SourceIPRef *v1.NamespacedReference `json:"sourceIpRef,omitempty" tf:"-"`

	// Selector for a Ipblock in compute to populate sourceIp.
	// +kubebuilder:validation:Optional
	SourceIPSelector *v1.NamespacedSelector `json:"sourceIpSelector,omitempty" tf:"-"`

	// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Ipblock
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.FirstIPBlockIP()
	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	// Reference to a Ipblock in compute to populate targetIp.
	// +kubebuilder:validation:Optional
	TargetIPRef *v1.NamespacedReference `json:"targetIpRef,omitempty" tf:"-"`

	// Selector for a Ipblock in compute to populate targetIp.
	// +kubebuilder:validation:Optional
	TargetIPSelector *v1.NamespacedSelector `json:"targetIpSelector,omitempty" tf:"-"`

	// [string] The type of firewall rule. If is not specified, it will take the default value INGRESS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FirewallObservation_2 struct {

	// [string] The Virtual Data Center ID.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the firewall rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The NIC ID.
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// [string] The Server ID.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	// [string] The type of firewall rule. If is not specified, it will take the default value INGRESS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FirewallParameters_2 struct {

	// [string] The Virtual Data Center ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
	// +kubebuilder:validation:Optional
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
	// +kubebuilder:validation:Optional
	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the firewall rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The NIC ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Nic
	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a Nic in compute to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.NamespacedReference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a Nic in compute to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.NamespacedSelector `json:"nicIdSelector,omitempty" tf:"-"`

	// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	// +kubebuilder:validation:Optional
	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	// +kubebuilder:validation:Optional
	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// [string] The Server ID.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Server
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.NamespacedReference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in compute to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.NamespacedSelector `json:"serverIdSelector,omitempty" tf:"-"`

	// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Ipblock
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.FirstIPBlockIP()
	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Reference to a Ipblock in compute to populate sourceIp.
	// +kubebuilder:validation:Optional
	SourceIPRef *v1.NamespacedReference `json:"sourceIpRef,omitempty" tf:"-"`

	// Selector for a Ipblock in compute to populate sourceIp.
	// +kubebuilder:validation:Optional
	SourceIPSelector *v1.NamespacedSelector `json:"sourceIpSelector,omitempty" tf:"-"`

	// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
	// +kubebuilder:validation:Optional
	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Ipblock
	// +crossplane:generate:reference:extractor=github.com/ionos-cloud/provider-upjet-ionoscloud/config/common.FirstIPBlockIP()
	// +kubebuilder:validation:Optional
	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	// Reference to a Ipblock in compute to populate targetIp.
	// +kubebuilder:validation:Optional
	TargetIPRef *v1.NamespacedReference `json:"targetIpRef,omitempty" tf:"-"`

	// Selector for a Ipblock in compute to populate targetIp.
	// +kubebuilder:validation:Optional
	TargetIPSelector *v1.NamespacedSelector `json:"targetIpSelector,omitempty" tf:"-"`

	// [string] The type of firewall rule. If is not specified, it will take the default value INGRESS.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// FirewallSpec defines the desired state of Firewall
type FirewallSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            FirewallParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FirewallInitParameters_2 `json:"initProvider,omitempty"`
}

// FirewallStatus defines the observed state of Firewall.
type FirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Firewall is the Schema for the Firewalls API. Creates and manages Firewall Rules.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type Firewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   FirewallSpec   `json:"spec"`
	Status FirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallList contains a list of Firewalls
type FirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Firewall `json:"items"`
}

// Repository type metadata.
var (
	Firewall_Kind             = "Firewall"
	Firewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Firewall_Kind}.String()
	Firewall_KindAPIVersion   = Firewall_Kind + "." + CRDGroupVersion.String()
	Firewall_GroupVersionKind = CRDGroupVersion.WithKind(Firewall_Kind)
)

func init() {
	SchemeBuilder.Register(&Firewall{}, &FirewallList{})
}
