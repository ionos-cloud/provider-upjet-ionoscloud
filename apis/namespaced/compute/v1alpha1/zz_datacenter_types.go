// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CPUArchitectureInitParameters struct {
}

type CPUArchitectureObservation struct {

	// A valid CPU family name
	CPUFamily *string `json:"cpuFamily,omitempty" tf:"cpu_family,omitempty"`

	// The maximum number of cores available
	MaxCores *float64 `json:"maxCores,omitempty" tf:"max_cores,omitempty"`

	// The maximum number of RAM in MB
	MaxRAM *float64 `json:"maxRam,omitempty" tf:"max_ram,omitempty"`

	// A valid CPU vendor name
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type CPUArchitectureParameters struct {
}

type DatacenterInitParameters struct {

	// [string] Description for the Virtual Data Center.
	// A description for the datacenter, e.g. staging, production
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the Virtual Data Center.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
	SecAuthProtection *bool `json:"secAuthProtection,omitempty" tf:"sec_auth_protection,omitempty"`
}

type DatacenterObservation struct {

	// (Computed) Array of features and CPU families available in a location
	CPUArchitecture []CPUArchitectureObservation `json:"cpuArchitecture,omitempty" tf:"cpu_architecture,omitempty"`

	// [string] Description for the Virtual Data Center.
	// A description for the datacenter, e.g. staging, production
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Computed) List of features supported by the location this data center is part of
	// +listType=set
	Features []*string `json:"features,omitempty" tf:"features,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
	// Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the Virtual Data Center.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
	SecAuthProtection *bool `json:"secAuthProtection,omitempty" tf:"sec_auth_protection,omitempty"`

	// (Computed) The version of that Data Center. Gets incremented with every change
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type DatacenterParameters struct {

	// [string] Description for the Virtual Data Center.
	// A description for the datacenter, e.g. staging, production
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of the Virtual Data Center.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
	// +kubebuilder:validation:Optional
	SecAuthProtection *bool `json:"secAuthProtection,omitempty" tf:"sec_auth_protection,omitempty"`
}

// DatacenterSpec defines the desired state of Datacenter
type DatacenterSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            DatacenterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatacenterInitParameters `json:"initProvider,omitempty"`
}

// DatacenterStatus defines the observed state of Datacenter.
type DatacenterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatacenterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Datacenter is the Schema for the Datacenters API. Creates and manages IonosCloud Virtual Data Center.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type Datacenter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   DatacenterSpec   `json:"spec"`
	Status DatacenterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatacenterList contains a list of Datacenters
type DatacenterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Datacenter `json:"items"`
}

// Repository type metadata.
var (
	Datacenter_Kind             = "Datacenter"
	Datacenter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Datacenter_Kind}.String()
	Datacenter_KindAPIVersion   = Datacenter_Kind + "." + CRDGroupVersion.String()
	Datacenter_GroupVersionKind = CRDGroupVersion.WithKind(Datacenter_Kind)
)

func init() {
	SchemeBuilder.Register(&Datacenter{}, &DatacenterList{})
}
