// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type IPConsumersInitParameters struct {
}

type IPConsumersObservation struct {
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// [string] The name of Ip Block
	DatacenterName *string `json:"datacenterName,omitempty" tf:"datacenter_name,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	K8SClusterUUID *string `json:"k8sClusterUuid,omitempty" tf:"k8s_cluster_uuid,omitempty"`

	K8SNodepoolUUID *string `json:"k8sNodepoolUuid,omitempty" tf:"k8s_nodepool_uuid,omitempty"`

	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// [string] The name of Ip Block
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type IPConsumersParameters struct {
}

type IpblockInitParameters struct {

	// Only attribute. Lists consumption detail of an individual ip
	IPConsumers []IPConsumersInitParameters `json:"ipConsumers,omitempty" tf:"ip_consumers,omitempty"`

	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of Ip Block
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [integer] The number of IP addresses to reserve for this block.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type IpblockObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Only attribute. Lists consumption detail of an individual ip
	IPConsumers []IPConsumersObservation `json:"ipConsumers,omitempty" tf:"ip_consumers,omitempty"`

	// (Computed)[integer] The list of IP addresses associated with this block.
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of Ip Block
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [integer] The number of IP addresses to reserve for this block.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type IpblockParameters struct {

	// Only attribute. Lists consumption detail of an individual ip
	// +kubebuilder:validation:Optional
	IPConsumers []IPConsumersParameters `json:"ipConsumers,omitempty" tf:"ip_consumers,omitempty"`

	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The name of Ip Block
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [integer] The number of IP addresses to reserve for this block.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

// IpblockSpec defines the desired state of Ipblock
type IpblockSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            IpblockParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpblockInitParameters `json:"initProvider,omitempty"`
}

// IpblockStatus defines the observed state of Ipblock.
type IpblockStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpblockObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Ipblock is the Schema for the Ipblocks API. Creates and manages IP Block objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type Ipblock struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   IpblockSpec   `json:"spec"`
	Status IpblockStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpblockList contains a list of Ipblocks
type IpblockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ipblock `json:"items"`
}

// Repository type metadata.
var (
	Ipblock_Kind             = "Ipblock"
	Ipblock_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ipblock_Kind}.String()
	Ipblock_KindAPIVersion   = Ipblock_Kind + "." + CRDGroupVersion.String()
	Ipblock_GroupVersionKind = CRDGroupVersion.WithKind(Ipblock_Kind)
)

func init() {
	SchemeBuilder.Register(&Ipblock{}, &IpblockList{})
}
