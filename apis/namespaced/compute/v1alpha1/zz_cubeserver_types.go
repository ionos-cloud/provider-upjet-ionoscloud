// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CubeServerInitParameters struct {

	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	// When set to true, allows the update of immutable fields by destroying and re-creating the resource.
	AllowReplace *bool `json:"allowReplace,omitempty" tf:"allow_replace,omitempty"`

	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// DEPRECATED Please refer to ionoscloud_server_boot_device_selection [string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.
	BootCdrom *string `json:"bootCdrom,omitempty" tf:"boot_cdrom,omitempty"`

	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.
	BootImage *string `json:"bootImage,omitempty" tf:"boot_image,omitempty"`

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	// The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// [string] Required if ssh_key_path is not provided.
	ImagePasswordSecretRef *v1.LocalSecretKeySelector `json:"imagePasswordSecretRef,omitempty" tf:"-"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// See the Nic section.
	Nic *NicInitParameters `json:"nic,omitempty" tf:"nic,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the server
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`

	// [string] Sets the power state of the cube server. E.g: RUNNING or SUSPENDED.
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	// See the Volume section.
	Volume *VolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type CubeServerObservation struct {

	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	// When set to true, allows the update of immutable fields by destroying and re-creating the resource.
	AllowReplace *bool `json:"allowReplace,omitempty" tf:"allow_replace,omitempty"`

	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// DEPRECATED Please refer to ionoscloud_server_boot_device_selection [string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.
	BootCdrom *string `json:"bootCdrom,omitempty" tf:"boot_cdrom,omitempty"`

	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.
	BootImage *string `json:"bootImage,omitempty" tf:"boot_image,omitempty"`

	// (Computed) The associated boot volume.
	BootVolume *string `json:"bootVolume,omitempty" tf:"boot_volume,omitempty"`

	// [string] The ID of a Virtual Data Center.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// (Computed) The associated firewall rule.
	FirewallruleID *string `json:"firewallruleId,omitempty" tf:"firewallrule_id,omitempty"`

	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	// The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds []*string `json:"inlineVolumeIds,omitempty" tf:"inline_volume_ids,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// See the Nic section.
	Nic *NicObservation `json:"nic,omitempty" tf:"nic,omitempty"`

	// (Computed) The associated IP address.
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`

	// (Computed) The associated NIC.
	PrimaryNic *string `json:"primaryNic,omitempty" tf:"primary_nic,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the server
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`

	// [string] Sets the power state of the cube server. E.g: RUNNING or SUSPENDED.
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	// See the Volume section.
	Volume *VolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`
}

type CubeServerParameters struct {

	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	// When set to true, allows the update of immutable fields by destroying and re-creating the resource.
	// +kubebuilder:validation:Optional
	AllowReplace *bool `json:"allowReplace,omitempty" tf:"allow_replace,omitempty"`

	// [string] The availability zone in which the server should exist. This property is immutable.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// DEPRECATED Please refer to ionoscloud_server_boot_device_selection [string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud_image data source.
	// +kubebuilder:validation:Optional
	BootCdrom *string `json:"bootCdrom,omitempty" tf:"boot_cdrom,omitempty"`

	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if licence_type is not provided.
	// +kubebuilder:validation:Optional
	BootImage *string `json:"bootImage,omitempty" tf:"boot_image,omitempty"`

	// [string] The ID of a Virtual Data Center.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Datacenter
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// Reference to a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDRef *v1.NamespacedReference `json:"datacenterIdRef,omitempty" tf:"-"`

	// Selector for a Datacenter in compute to populate datacenterId.
	// +kubebuilder:validation:Optional
	DatacenterIDSelector *v1.NamespacedSelector `json:"datacenterIdSelector,omitempty" tf:"-"`

	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	// The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if licence_type is not provided. Attribute is immutable.
	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// [string] Required if ssh_key_path is not provided.
	// +kubebuilder:validation:Optional
	ImagePasswordSecretRef *v1.LocalSecretKeySelector `json:"imagePasswordSecretRef,omitempty" tf:"-"`

	// [string] The name of the server.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// See the Nic section.
	// +kubebuilder:validation:Optional
	Nic *NicParameters `json:"nic,omitempty" tf:"nic,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	// +kubebuilder:validation:Optional
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the server
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	// +kubebuilder:validation:Optional
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`

	// [string] Sets the power state of the cube server. E.g: RUNNING or SUSPENDED.
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	// +kubebuilder:validation:Optional
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	// See the Volume section.
	// +kubebuilder:validation:Optional
	Volume *VolumeParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type FirewallInitParameters struct {
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FirewallObservation struct {
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FirewallParameters struct {

	// +kubebuilder:validation:Optional
	IcmpCode *string `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// +kubebuilder:validation:Optional
	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// [string] The name of the server.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PortRangeEnd *float64 `json:"portRangeEnd,omitempty" tf:"port_range_end,omitempty"`

	// +kubebuilder:validation:Optional
	PortRangeStart *float64 `json:"portRangeStart,omitempty" tf:"port_range_start,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SourceMac *string `json:"sourceMac,omitempty" tf:"source_mac,omitempty"`

	// +kubebuilder:validation:Optional
	TargetIP *string `json:"targetIp,omitempty" tf:"target_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NicInitParameters struct {
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	Firewall *FirewallInitParameters `json:"firewall,omitempty" tf:"firewall,omitempty"`

	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// IPv6 CIDR block assigned to the NIC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Lan
	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.NamespacedReference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.NamespacedSelector `json:"lanSelector,omitempty" tf:"-"`

	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the NIC
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`
}

type NicObservation struct {
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	DeviceNumber *float64 `json:"deviceNumber,omitempty" tf:"device_number,omitempty"`

	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	Firewall *FirewallObservation `json:"firewall,omitempty" tf:"firewall,omitempty"`

	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// IPv6 CIDR block assigned to the NIC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PciSlot *float64 `json:"pciSlot,omitempty" tf:"pci_slot,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the NIC
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`
}

type NicParameters struct {

	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// Indicates whether this NIC receives an IPv6 address through DHCP.
	// +kubebuilder:validation:Optional
	Dhcpv6 *bool `json:"dhcpv6,omitempty" tf:"dhcpv6,omitempty"`

	// +kubebuilder:validation:Optional
	Firewall *FirewallParameters `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// +kubebuilder:validation:Optional
	FirewallActive *bool `json:"firewallActive,omitempty" tf:"firewall_active,omitempty"`

	// +kubebuilder:validation:Optional
	FirewallType *string `json:"firewallType,omitempty" tf:"firewall_type,omitempty"`

	// IPv6 CIDR block assigned to the NIC.
	// +kubebuilder:validation:Optional
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	// +kubebuilder:validation:Optional
	IPv6Ips []*string `json:"ipv6Ips,omitempty" tf:"ipv6_ips,omitempty"`

	// +kubebuilder:validation:Optional
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/namespaced/compute/v1alpha1.Lan
	// +kubebuilder:validation:Optional
	Lan *float64 `json:"lan,omitempty" tf:"lan,omitempty"`

	// Reference to a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanRef *v1.NamespacedReference `json:"lanRef,omitempty" tf:"-"`

	// Selector for a Lan in compute to populate lan.
	// +kubebuilder:validation:Optional
	LanSelector *v1.NamespacedSelector `json:"lanSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// [string] The name of the server.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of Security Group IDs for the resource.
	// The list of Security Group IDs for the NIC
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`
}

type VolumeInitParameters struct {

	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitID *string `json:"backupUnitId,omitempty" tf:"backup_unit_id,omitempty"`

	Bus *string `json:"bus,omitempty" tf:"bus,omitempty"`

	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// If set to `true` will expose the serial id of the disk attached to the server. If set to `false` will not expose the serial id. Some operating systems or software solutions require the serial id to be exposed to work properly. Exposing the serial can influence licensed software (e.g. Windows) behavior
	ExposeSerial *bool `json:"exposeSerial,omitempty" tf:"expose_serial,omitempty"`

	// [string] Required if ssh_key_path is not provided.
	ImagePassword *string `json:"imagePassword,omitempty" tf:"image_password,omitempty"`

	// [string] Sets the OS type of the server.
	LicenceType *string `json:"licenceType,omitempty" tf:"licence_type,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type VolumeObservation struct {

	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitID *string `json:"backupUnitId,omitempty" tf:"backup_unit_id,omitempty"`

	// The UUID of the attached server.
	BootServer *string `json:"bootServer,omitempty" tf:"boot_server,omitempty"`

	Bus *string `json:"bus,omitempty" tf:"bus,omitempty"`

	CPUHotPlug *bool `json:"cpuHotPlug,omitempty" tf:"cpu_hot_plug,omitempty"`

	DeviceNumber *float64 `json:"deviceNumber,omitempty" tf:"device_number,omitempty"`

	DiscVirtioHotPlug *bool `json:"discVirtioHotPlug,omitempty" tf:"disc_virtio_hot_plug,omitempty"`

	DiscVirtioHotUnplug *bool `json:"discVirtioHotUnplug,omitempty" tf:"disc_virtio_hot_unplug,omitempty"`

	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// If set to `true` will expose the serial id of the disk attached to the server. If set to `false` will not expose the serial id. Some operating systems or software solutions require the serial id to be exposed to work properly. Exposing the serial can influence licensed software (e.g. Windows) behavior
	ExposeSerial *bool `json:"exposeSerial,omitempty" tf:"expose_serial,omitempty"`

	// [string] Required if ssh_key_path is not provided.
	ImagePassword *string `json:"imagePassword,omitempty" tf:"image_password,omitempty"`

	// [string] Sets the OS type of the server.
	LicenceType *string `json:"licenceType,omitempty" tf:"licence_type,omitempty"`

	// [string] The name of the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NicHotPlug *bool `json:"nicHotPlug,omitempty" tf:"nic_hot_plug,omitempty"`

	NicHotUnplug *bool `json:"nicHotUnplug,omitempty" tf:"nic_hot_unplug,omitempty"`

	PciSlot *float64 `json:"pciSlot,omitempty" tf:"pci_slot,omitempty"`

	RAMHotPlug *bool `json:"ramHotPlug,omitempty" tf:"ram_hot_plug,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type VolumeParameters struct {

	// [string] The availability zone in which the server should exist. This property is immutable.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	// +kubebuilder:validation:Optional
	BackupUnitID *string `json:"backupUnitId,omitempty" tf:"backup_unit_id,omitempty"`

	// +kubebuilder:validation:Optional
	Bus *string `json:"bus,omitempty" tf:"bus,omitempty"`

	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType" tf:"disk_type,omitempty"`

	// If set to `true` will expose the serial id of the disk attached to the server. If set to `false` will not expose the serial id. Some operating systems or software solutions require the serial id to be exposed to work properly. Exposing the serial can influence licensed software (e.g. Windows) behavior
	// +kubebuilder:validation:Optional
	ExposeSerial *bool `json:"exposeSerial,omitempty" tf:"expose_serial,omitempty"`

	// [string] Required if ssh_key_path is not provided.
	// +kubebuilder:validation:Optional
	ImagePassword *string `json:"imagePassword,omitempty" tf:"image_password,omitempty"`

	// [string] Sets the OS type of the server.
	// +kubebuilder:validation:Optional
	LicenceType *string `json:"licenceType,omitempty" tf:"licence_type,omitempty"`

	// [string] The name of the server.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if image_password is not provided.
	// +kubebuilder:validation:Optional
	SSHKeyPath []*string `json:"sshKeyPath,omitempty" tf:"ssh_key_path,omitempty"`

	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

// CubeServerSpec defines the desired state of CubeServer
type CubeServerSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            CubeServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CubeServerInitParameters `json:"initProvider,omitempty"`
}

// CubeServerStatus defines the observed state of CubeServer.
type CubeServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CubeServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CubeServer is the Schema for the CubeServers API. Creates and manages IonosCloud Cube Server objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type CubeServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nic) || (has(self.initProvider) && has(self.initProvider.nic))",message="spec.forProvider.nic is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateUuid) || (has(self.initProvider) && has(self.initProvider.templateUuid))",message="spec.forProvider.templateUuid is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volume) || (has(self.initProvider) && has(self.initProvider.volume))",message="spec.forProvider.volume is a required parameter"
	Spec   CubeServerSpec   `json:"spec"`
	Status CubeServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CubeServerList contains a list of CubeServers
type CubeServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CubeServer `json:"items"`
}

// Repository type metadata.
var (
	CubeServer_Kind             = "CubeServer"
	CubeServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CubeServer_Kind}.String()
	CubeServer_KindAPIVersion   = CubeServer_Kind + "." + CRDGroupVersion.String()
	CubeServer_GroupVersionKind = CRDGroupVersion.WithKind(CubeServer_Kind)
)

func init() {
	SchemeBuilder.Register(&CubeServer{}, &CubeServerList{})
}
