// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type StorageAccesskeyInitParameters struct {

	// [string] Description of the Access key.
	// Description of the Access key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type StorageAccesskeyObservation struct {

	// (Computed)  Access key metadata is a string of 92 characters.
	// Access key metadata is a string of 92 characters.
	Accesskey *string `json:"accesskey,omitempty" tf:"accesskey,omitempty"`

	// (Computed)  The canonical user ID which is valid for user-owned buckets.
	// The canonical user ID which is valid for user-owned buckets.
	CanonicalUserID *string `json:"canonicalUserId,omitempty" tf:"canonical_user_id,omitempty"`

	// (Computed)  The contract user ID which is valid for contract-owned buckets
	// The contract user ID which is valid for contract-owned buckets
	ContractUserID *string `json:"contractUserId,omitempty" tf:"contract_user_id,omitempty"`

	// [string] Description of the Access key.
	// Description of the Access key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Computed)  The ID (UUID) of the AccessKey.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed)  The secret key of the Access key.
	// The secret key of the Access key.
	Secretkey *string `json:"secretkey,omitempty" tf:"secretkey,omitempty"`
}

type StorageAccesskeyParameters struct {

	// [string] Description of the Access key.
	// Description of the Access key.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

// StorageAccesskeySpec defines the desired state of StorageAccesskey
type StorageAccesskeySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            StorageAccesskeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageAccesskeyInitParameters `json:"initProvider,omitempty"`
}

// StorageAccesskeyStatus defines the observed state of StorageAccesskey.
type StorageAccesskeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageAccesskeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StorageAccesskey is the Schema for the StorageAccesskeys API. Creates and manages IonosCloud Object Storage Accesskeys.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,ionos}
type StorageAccesskey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccesskeySpec   `json:"spec"`
	Status            StorageAccesskeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAccesskeyList contains a list of StorageAccesskeys
type StorageAccesskeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccesskey `json:"items"`
}

// Repository type metadata.
var (
	StorageAccesskey_Kind             = "StorageAccesskey"
	StorageAccesskey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageAccesskey_Kind}.String()
	StorageAccesskey_KindAPIVersion   = StorageAccesskey_Kind + "." + CRDGroupVersion.String()
	StorageAccesskey_GroupVersionKind = CRDGroupVersion.WithKind(StorageAccesskey_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageAccesskey{}, &StorageAccesskeyList{})
}
