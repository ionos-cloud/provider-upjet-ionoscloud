// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointInitParameters struct {

	// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
	// Hostname or IPV4 address that the WireGuard Server will connect to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// [int] The port that the WireGuard Server will connect to. Defaults to 51820.
	// Port that the WireGuard Server will connect to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type EndpointObservation struct {

	// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
	// Hostname or IPV4 address that the WireGuard Server will connect to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// [int] The port that the WireGuard Server will connect to. Defaults to 51820.
	// Port that the WireGuard Server will connect to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type EndpointParameters struct {

	// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
	// Hostname or IPV4 address that the WireGuard Server will connect to.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// [int] The port that the WireGuard Server will connect to. Defaults to 51820.
	// Port that the WireGuard Server will connect to.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type VpnWireguardPeerInitParameters struct {

	// [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps []*string `json:"allowedIps,omitempty" tf:"allowed_ips,omitempty"`

	// [string] A description of the WireGuard Gateway.
	// Human readable description of the WireGuard Gateway Peer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
	// Endpoint configuration for the WireGuard Peer.
	Endpoint *EndpointInitParameters `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// [string] The ID of the WireGuard Gateway that the Peer will connect to.
	// The ID of the WireGuard Peer that the peer will connect to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/vpnwireguard/v1alpha1.VpnWireguardGateway
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a VpnWireguardGateway in vpnwireguard to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a VpnWireguardGateway in vpnwireguard to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [string] The location of the WireGuard Gateway.
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The human-readable name of the WireGuard Gateway.
	// The human readable name of your WireGuard Gateway Peer.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The public key for the WireGuard Gateway.
	// WireGuard public key of the connecting peer
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type VpnWireguardPeerObservation struct {

	// [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps []*string `json:"allowedIps,omitempty" tf:"allowed_ips,omitempty"`

	// [string] A description of the WireGuard Gateway.
	// Human readable description of the WireGuard Gateway Peer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
	// Endpoint configuration for the WireGuard Peer.
	Endpoint *EndpointObservation `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// [string] The ID of the WireGuard Gateway that the Peer will connect to.
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// [string] The location of the WireGuard Gateway.
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The human-readable name of the WireGuard Gateway.
	// The human readable name of your WireGuard Gateway Peer.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The public key for the WireGuard Gateway.
	// WireGuard public key of the connecting peer
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// The current status of the WireGuard Gateway Peer.
	// The status of the WireGuard Gateway
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VpnWireguardPeerParameters struct {

	// [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	// +kubebuilder:validation:Optional
	AllowedIps []*string `json:"allowedIps,omitempty" tf:"allowed_ips,omitempty"`

	// [string] A description of the WireGuard Gateway.
	// Human readable description of the WireGuard Gateway Peer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
	// Endpoint configuration for the WireGuard Peer.
	// +kubebuilder:validation:Optional
	Endpoint *EndpointParameters `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// [string] The ID of the WireGuard Gateway that the Peer will connect to.
	// The ID of the WireGuard Peer that the peer will connect to.
	// +crossplane:generate:reference:type=github.com/ionos-cloud/provider-upjet-ionoscloud/apis/vpnwireguard/v1alpha1.VpnWireguardGateway
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a VpnWireguardGateway in vpnwireguard to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a VpnWireguardGateway in vpnwireguard to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// [string] The location of the WireGuard Gateway.
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// [string] The human-readable name of the WireGuard Gateway.
	// The human readable name of your WireGuard Gateway Peer.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [string] The public key for the WireGuard Gateway.
	// WireGuard public key of the connecting peer
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// VpnWireguardPeerSpec defines the desired state of VpnWireguardPeer
type VpnWireguardPeerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpnWireguardPeerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpnWireguardPeerInitParameters `json:"initProvider,omitempty"`
}

// VpnWireguardPeerStatus defines the observed state of VpnWireguardPeer.
type VpnWireguardPeerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpnWireguardPeerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpnWireguardPeer is the Schema for the VpnWireguardPeers API. Creates and manages IonosCloud VPN Wireguard Gateway Peer objects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ionos}
type VpnWireguardPeer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowedIps) || (has(self.initProvider) && has(self.initProvider.allowedIps))",message="spec.forProvider.allowedIps is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicKey) || (has(self.initProvider) && has(self.initProvider.publicKey))",message="spec.forProvider.publicKey is a required parameter"
	Spec   VpnWireguardPeerSpec   `json:"spec"`
	Status VpnWireguardPeerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnWireguardPeerList contains a list of VpnWireguardPeers
type VpnWireguardPeerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnWireguardPeer `json:"items"`
}

// Repository type metadata.
var (
	VpnWireguardPeer_Kind             = "VpnWireguardPeer"
	VpnWireguardPeer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpnWireguardPeer_Kind}.String()
	VpnWireguardPeer_KindAPIVersion   = VpnWireguardPeer_Kind + "." + CRDGroupVersion.String()
	VpnWireguardPeer_GroupVersionKind = CRDGroupVersion.WithKind(VpnWireguardPeer_Kind)
)

func init() {
	SchemeBuilder.Register(&VpnWireguardPeer{}, &VpnWireguardPeerList{})
}
